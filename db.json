{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/Tampermonkey破解百度云下载限速/1.png","path":"images/Tampermonkey破解百度云下载限速/1.png","modified":0,"renderable":0},{"_id":"source/images/vscode/11.png","path":"images/vscode/11.png","modified":0,"renderable":0},{"_id":"source/images/vscode/12.png","path":"images/vscode/12.png","modified":0,"renderable":0},{"_id":"source/images/vscode/10.png","path":"images/vscode/10.png","modified":0,"renderable":0},{"_id":"source/images/vscode/3.png","path":"images/vscode/3.png","modified":0,"renderable":0},{"_id":"source/images/vscode/4.png","path":"images/vscode/4.png","modified":0,"renderable":0},{"_id":"source/images/vscode/6.png","path":"images/vscode/6.png","modified":0,"renderable":0},{"_id":"source/images/vscode/8.png","path":"images/vscode/8.png","modified":0,"renderable":0},{"_id":"source/images/vscode/5.png","path":"images/vscode/5.png","modified":0,"renderable":0},{"_id":"source/images/vscode/7.png","path":"images/vscode/7.png","modified":0,"renderable":0},{"_id":"source/images/vscode/9.png","path":"images/vscode/9.png","modified":0,"renderable":0},{"_id":"source/images/关于远程连接桌面的那些事/1.png","path":"images/关于远程连接桌面的那些事/1.png","modified":0,"renderable":0},{"_id":"source/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/1.bmp","path":"images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/1.bmp","modified":0,"renderable":0},{"_id":"source/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/2.bmp","path":"images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/2.bmp","modified":0,"renderable":0},{"_id":"source/images/解决wordpress默认头像无法显示问题/1.png","path":"images/解决wordpress默认头像无法显示问题/1.png","modified":0,"renderable":0},{"_id":"source/images/配置安装PHP开发环境/1.png","path":"images/配置安装PHP开发环境/1.png","modified":0,"renderable":0},{"_id":"source/images/dogeAndFish.jpg","path":"images/dogeAndFish.jpg","modified":0,"renderable":0},{"_id":"source/images/vscode/1.png","path":"images/vscode/1.png","modified":0,"renderable":0},{"_id":"source/images/vscode/2.png","path":"images/vscode/2.png","modified":0,"renderable":0},{"_id":"source/images/如何在Markdown中方便快速的插入图片/1.png","path":"images/如何在Markdown中方便快速的插入图片/1.png","modified":0,"renderable":0},{"_id":"source/images/关于远程连接桌面的那些事/3.png","path":"images/关于远程连接桌面的那些事/3.png","modified":0,"renderable":0},{"_id":"source/images/关于远程连接桌面的那些事/2.png","path":"images/关于远程连接桌面的那些事/2.png","modified":0,"renderable":0},{"_id":"source/images/进入四月/1.jpg","path":"images/进入四月/1.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/baidu_verify_JwxJIt6B3w.html","path":"baidu_verify_JwxJIt6B3w.html","modified":1,"renderable":1},{"_id":"themes/next/source/sublime_addright.inf","path":"sublime_addright.inf","modified":1,"renderable":1},{"_id":"themes/next/source/google70ce6cc8a2b73402.html","path":"google70ce6cc8a2b73402.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/bg_wrap.jpg","path":"images/bg_wrap.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/bin.zip","path":"bin.zip","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"5488344ad12b7cddfce238fd9b5d6484f7639ae6","modified":1532231820000},{"_id":"source/robots.txt","hash":"30ab8eed8437995eea11c43a1fa82c638a94969e","modified":1532231820000},{"_id":"source/_posts/2016-year-end-review.md","hash":"4003d3ab27f923b2b756c1b60d36372081d923e9","modified":1532231820000},{"_id":"source/_posts/ElasticSearch2-3-2-exception-NoNodeAvailableException.md","hash":"5f158877c74fcbaa9d7d46dad740c1ad4295f436","modified":1532231820000},{"_id":"source/_posts/Error-java-javacTask-source-release-8-requires-target-release-1-8.md","hash":"d122a14f6e78802bf4d514cc392e52a3cd3ef41b","modified":1532231820000},{"_id":"source/_posts/10-minutes-learn-ElasticSearch.md","hash":"df418326e3145d1aaccc5ff0ef2e311944d021e5","modified":1532231820000},{"_id":"source/_posts/FTPClient的正确使用姿势.md","hash":"5685bfdf5113d9e8989405dd9a083a2476178100","modified":1532231820000},{"_id":"source/_posts/Xmanager-Enterprise5破解版下载.md","hash":"109bb08a5e6043df72391ab00852638630d8826a","modified":1532231820000},{"_id":"source/_posts/add-right-click-support-of-sublime-in-windows.md","hash":"689784c3cc2c3f2073738a8b0b42a08aa7b328e7","modified":1532231820000},{"_id":"source/_posts/Tampermonkey破解百度云下载限速.md","hash":"c54f36eb034e3c39309475cfbc944cc45d96aa1b","modified":1532231820000},{"_id":"source/_posts/centos7下yum安装mysql.md","hash":"49804cb39752a507983066d8ac642508060da6e3","modified":1532231820000},{"_id":"source/_posts/develop-go-with-vscode-and-bulid-vscode-enviroment.md","hash":"815d4531aa1501cccd0979bac2b39f27aecf388e","modified":1532231820000},{"_id":"source/_posts/annoying-maven-repo.md","hash":"531d75511316bd5bbc07044aae821fc9684becbd","modified":1532231820000},{"_id":"source/_posts/difference-of-make-and-new-in-go.md","hash":"0642c58d9db3c50a0884743cf58901775fe70537","modified":1532231820000},{"_id":"source/_posts/does-java-method-transmit-value-or-reference.md","hash":"64a48b79a1c19ac98f77eaf913abe7466fc123b7","modified":1532231820000},{"_id":"source/_posts/git-warning-LF-will-be-replaced-by-CRLF-in-xxxx解决办法.md","hash":"1c2985c152439dd54365ff446cd4f3864c7f173e","modified":1532231820000},{"_id":"source/_posts/hexo-construct-from-zero-instruction.md","hash":"d0051b3b56c2c09790ede3f1323d208c0b18d54a","modified":1532231820000},{"_id":"source/_posts/how-to-setup-PHP-and-NGINX.md","hash":"a4c6e73cfe20641652605fc5951b6ef76f090748","modified":1532231820000},{"_id":"source/_posts/how-to-confirm-a-fake-coin-lighter-or-weighter-than-true-coin.md","hash":"8fc6a4a479c84480429ce77803faef1ade5ed395","modified":1532231820000},{"_id":"source/_posts/how-to-insert-a-image-in-markdown.md","hash":"35e89c8142f9ad5353b189a742e9786796370209","modified":1532231820000},{"_id":"source/_posts/mysql-time-formate.md","hash":"3817178262be3fe2243ae10e219d6f5952797ffc","modified":1532231820000},{"_id":"source/_posts/mysql授权远程访问.md","hash":"8826bcad917cf49205b8535a8447003b2e08827d","modified":1532231820000},{"_id":"source/_posts/modify-class-file-in-the-jar-of-java.md","hash":"f2c021f662535fe72537749fb255f67767756db8","modified":1532231820000},{"_id":"source/_posts/ifconfig-command-not-found.md","hash":"b36461c8dc0b50d7ee8708c37cf908812da65936","modified":1532231820000},{"_id":"source/_posts/telnet退格删除快捷键.md","hash":"fc5881256eb6574979ea1e58c3233e0b4e419d1a","modified":1532231820000},{"_id":"source/_posts/thinkings-from-crab.md","hash":"910625fad83f9fdb6db657aaa88f4000ba473052","modified":1532231820000},{"_id":"source/_posts/why-does-0-equal-1.md","hash":"f0959cb669d8c87b7b1e93e6ed655cd15ea23912","modified":1532231820000},{"_id":"source/_posts/what-is-jsonp.md","hash":"6d4cfd72a541bce54b16e96968fa78b418fdcb26","modified":1532231820000},{"_id":"source/_posts/webpack-dev-server-error.md","hash":"f732e05305beb44456488b95fc6ec8c1d3060850","modified":1532231820000},{"_id":"source/_posts/关于远程连接桌面的那些事.md","hash":"692413452ac8e27f4961adc1becd00883aee7e80","modified":1532231820000},{"_id":"source/_posts/what-is-the-difference-between-unicode-utf-8-gbk-gb2312.md","hash":"b2782953f4ac7442c3514d12d148077e16435c87","modified":1532231820000},{"_id":"source/_posts/解决wordpress默认头像无法显示问题.md","hash":"ff608f31621febecc598d88b4c8c90619af1f7cb","modified":1532231820000},{"_id":"source/_posts/如何正确的kill一个java程序.md","hash":"88c2234a005c3df0f67194676e3c1d73912422c3","modified":1532231820000},{"_id":"source/_posts/进入四月.md","hash":"5dd04228d3a3e5f2df7b8d27ddbe3c280c7d7ac8","modified":1532231820000},{"_id":"source/categories/index.md","hash":"9a94e0fcc333b6a43540ffc013bcb517a076d22e","modified":1532231820000},{"_id":"source/tags/index.md","hash":"e8716ea6098fc352f4496ca1ee91a5d271bccede","modified":1532231820000},{"_id":"source/images/Tampermonkey破解百度云下载限速/1.png","hash":"a1f9b83dc6a0bf47426e944bc9e44b6aba34f169","modified":1532231820000},{"_id":"source/images/vscode/11.png","hash":"49b238e6a3e888c7863c3c7251f71e808f47a390","modified":1532231820000},{"_id":"source/images/vscode/12.png","hash":"714379d800ec270fdc0470dfb13b8b9433b73935","modified":1532231820000},{"_id":"source/images/vscode/10.png","hash":"df19ac27e31ea25784da7d427de05200b0733b92","modified":1532231820000},{"_id":"source/images/vscode/3.png","hash":"2bbe83e3c22babc99aa550cfbfc3a43677fa3aca","modified":1532231820000},{"_id":"source/images/vscode/4.png","hash":"c3716b62d2dda2483320b7cab9d74586ef5c0525","modified":1532231820000},{"_id":"source/images/vscode/6.png","hash":"bbd6e5d1f15248f6eaaf7b991bd9082a55b255a6","modified":1532231820000},{"_id":"source/images/vscode/8.png","hash":"e9a4dca631163f2a8961fa65de186db1c7b7918f","modified":1532231820000},{"_id":"source/images/vscode/5.png","hash":"3c24b6ea62b918fe7e7a142e4d0b2324f4ef4c2c","modified":1532231820000},{"_id":"source/images/vscode/7.png","hash":"90596bdce6a164c93e89d41cffee5297af43df04","modified":1532231820000},{"_id":"source/images/vscode/9.png","hash":"63ae9179deff66c985a59b4447caa7189d64a52d","modified":1532231820000},{"_id":"source/images/关于远程连接桌面的那些事/1.png","hash":"c21e630adb7b389a52eaf69becf8d68209efdd93","modified":1532231820000},{"_id":"source/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/1.bmp","hash":"3c7451e5e600bfad7f213d91841c5019e3b3eb78","modified":1532231820000},{"_id":"source/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/2.bmp","hash":"8eba820d563279045a66257e252995c099913d22","modified":1532231820000},{"_id":"source/images/解决wordpress默认头像无法显示问题/1.png","hash":"65925879e76d8c58e10e73329836a833bcbd6ead","modified":1532231820000},{"_id":"source/images/配置安装PHP开发环境/1.png","hash":"3ab636e16c93266287a6798b83d59bed49f9a5a5","modified":1532231820000},{"_id":"source/images/dogeAndFish.jpg","hash":"cb04e536c8a1f1a6ec1bf301e7cd11b6484df653","modified":1532231820000},{"_id":"source/images/vscode/1.png","hash":"5c9792c21bbbd5cb0e3454dfdf3a007932aacbc8","modified":1532231820000},{"_id":"source/images/vscode/2.png","hash":"2d07c9623842d0564614ede31144846bcbe88715","modified":1532231820000},{"_id":"source/images/如何在Markdown中方便快速的插入图片/1.png","hash":"64fb2c0685a74dd63039f3f8afe1c048c4e9e1c4","modified":1532231820000},{"_id":"source/images/关于远程连接桌面的那些事/3.png","hash":"cc7787651a476842962a6975fca3b6924095ae56","modified":1532231820000},{"_id":"source/images/关于远程连接桌面的那些事/2.png","hash":"b7fc29d058a0a66969fd33a513a8b5400300e261","modified":1532231820000},{"_id":"source/images/进入四月/1.jpg","hash":"94caacfc165199940331abc17c63d76970d90e30","modified":1532231820000},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1469252704000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1469252704000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1469252704000},{"_id":"themes/next/.gitignore","hash":"80710b94ff2f6c013859ebffffe90f9295fc94ed","modified":1469252704000},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1469252704000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1469252704000},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1469252704000},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1469252704000},{"_id":"themes/next/_config.yml","hash":"f63f9d9fc4b89fe297b857ab096301d0948635bb","modified":1500309454000},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1469252704000},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1469252704000},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1469252704000},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1469252704000},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1469252704000},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1469252704000},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1469252704000},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1469252704000},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1469252704000},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1469252704000},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1469252704000},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1469252704000},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1469252704000},{"_id":"themes/next/source/404.html","hash":"d9c9db5465183d9bb87d3b395bfb06aa998d3d80","modified":1469358336000},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1469252704000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1469252704000},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1469252704000},{"_id":"themes/next/source/baidu_verify_JwxJIt6B3w.html","hash":"b4bb369c632fc57b9284224e34e76b0ea9ea5c1b","modified":1469466140000},{"_id":"themes/next/source/sublime_addright.inf","hash":"81b0c3949ac850b2b9e7248cd097ba0e82bf95f4","modified":1471576544000},{"_id":"themes/next/source/google70ce6cc8a2b73402.html","hash":"2dcba1ca7404c9037b7e6afe3ce1223b81cadb04","modified":1469463280000},{"_id":"themes/next/layout/_layout.swig","hash":"ec20ccfddcbdf0b877f5a7c61592a8bac67a6e37","modified":1469292834000},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1469252704000},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1469252704000},{"_id":"themes/next/layout/index.swig","hash":"fec0e6e8748b8d3381565dcfae5c4c8644a50247","modified":1469448662000},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1469252704000},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1469252704000},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1469252704000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1469252704000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1469252704000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1469252704000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469252704000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1469252704000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1469252704000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1469252704000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1469252704000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1469252704000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1469252704000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1469252704000},{"_id":"themes/next/source/images/bg_wrap.jpg","hash":"309e6966f640127fb114217298b74563a43cfb9d","modified":1469293820000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1469252704000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1469252704000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1469252704000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469252704000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1469252704000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1469252704000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469252704000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1469252704000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1469252704000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1469252704000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5d84f3938e99f1908a6a1d44dd530740625f0188","modified":1469252704000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1469252704000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"351b25df0822817f286e71c38cdf618546f4e0b3","modified":1469447992000},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1469252704000},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1469252704000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1469252704000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1469252704000},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1469252704000},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1469252704000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1469252704000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1469252704000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6b08bd5a1e758dc24dbddc7bfb2365f2e7fa9f52","modified":1469448084000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1469252704000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1469252704000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1469252704000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1469252704000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469252704000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469252704000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469252704000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469252704000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469359920000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469252704000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469252704000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1469252704000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1469252704000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1469252704000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1469252704000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1469252704000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1469252704000},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1469252704000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1469252704000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1469252704000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1469252704000},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1469252704000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1469252704000},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1469252704000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1469252704000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1469252704000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1469252704000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1469252704000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1469252704000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1469252704000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1469252704000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1469252704000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1469252704000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1469252704000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1469252704000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1469252704000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1469252704000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1469252704000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1469252704000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1469252704000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1469252704000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1469252704000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1469252704000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1469252704000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1469252704000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1469252704000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1469252704000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1469252704000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1469252704000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1469252704000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1469252704000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1469252704000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1469252704000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1469252704000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1469252704000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1469252704000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1469291324000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1469252704000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1469252704000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1469252704000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1469252704000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1469252704000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"3931f9c3bac3970a3f54c9d0072ae4c950aa176c","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1469252704000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1469252704000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"6169eac460cbaaea899b4960cbe9aaff72484601","modified":1469293858000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"36c1df2c03173c1e4bb5a344b33300097ce1ab43","modified":1469361270000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1469252704000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1469252704000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1469252704000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1469252704000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1469252704000},{"_id":"themes/next/source/bin.zip","hash":"f016b001737284e98575e4e3db9223f81d5c7b69","modified":1465988998000}],"Category":[{"name":"年终总结","_id":"cjjwbbgeb00030a6t6l9u0q5o"},{"name":"ElasticSearch","_id":"cjjwbbgeg00080a6tfwin8437"},{"name":"java","_id":"cjjwbbgej000d0a6t8x5zwsk9"},{"name":"linux","_id":"cjjwbbgf3000t0a6t7jtbyb3x"},{"name":"开发工具","_id":"cjjwbbgf600130a6tzmbga4aj"},{"name":"技术杂文","_id":"cjjwbbgf9001b0a6t0rgqrlke"},{"name":"maven","parent":"cjjwbbgej000d0a6t8x5zwsk9","_id":"cjjwbbgfb001h0a6tywus706e"},{"name":"go","_id":"cjjwbbgfg001s0a6tg11p43vj"},{"name":"老司机翻车系列","parent":"cjjwbbgej000d0a6t8x5zwsk9","_id":"cjjwbbgfm00280a6tqp843myk"},{"name":"git","_id":"cjjwbbgfq002h0a6tt11mbnep"},{"name":"博客","_id":"cjjwbbgfs002m0a6tykw6x3rj"},{"name":"php","_id":"cjjwbbgfs002r0a6tb470guoq"},{"name":"算法","_id":"cjjwbbgft002x0a6tj7g9jxbj"},{"name":"Markdown","_id":"cjjwbbgfu00320a6tsmblvlvr"},{"name":"mysql","_id":"cjjwbbgfv00370a6toqdci7tn"},{"name":"web技术","_id":"cjjwbbgfx003j0a6tc60qpgqc"},{"name":"前端","_id":"cjjwbbgfy003n0a6tca2cel19"},{"name":"Java","_id":"cjjwbbgfz003u0a6tvroji9yv"},{"name":"杂文","_id":"cjjwbbgg0003z0a6tshsdn8d1"}],"Data":[],"Page":[{"title":"分类","date":"2016-07-24T07:36:18.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-07-24 15:36:18\ntype: \"categories\"\n---\n","updated":"2018-07-22T03:57:00.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjjwbbge800010a6tfckgwca8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All tags","date":"2016-07-24T07:59:38.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2016-07-24 15:59:38\ntype: \"tags\"\n---\n","updated":"2018-07-22T03:57:00.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjjwbbggd00540a6tzwznt2dx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2016年终总结","date":"2016-12-25T08:50:56.000Z","_content":"\n\n# 2016年终总结\n\n## 0x00\n\n今天已是12月的25号，2016年又来到了最后的一个星期。时间真的是过的很快。年初和同学在江南西吃过一顿饭后，他去了阿里，我还留在广州。我说你房子就租一年时间吧，到时候明年这个时候我就也来阿里了，咱们合租。\n\n说过的话仿佛还是昨天，转眼间已是年末。\n\n这周刚结束公司的年终总结，一个字一个字的憋出来的，我很疲惫，我老大也很疲惫，大家都很疲惫。昨晚十一点半还在给老大查数据，他也需要充实他的年终总结。年终大家总是很痛苦的，除非哪家公司不用写年终总结。\n\n今年后期的压力变得更加的大，比前面工作的几年都要大。广州的房价在下半年画出一条全力向上的曲线，让人感到气馁与绝望。你要是在年初买了房，就可以赚几年甚至几十年相对于你的收入。相反，没有买，现在就是在追赶中过生活了。关键是你的工资永远也追不上房价上涨的速度。当然很多时候也是来自于一些对自己的怨恨，总是后知后觉，以前总觉得自己还年轻，还可以赚大钱，就算有千分之一一夜暴富的机会，我也依然做着这个梦。那时候我不担心买不起房，不担心无法在这个城市立足，总在幻想未来的某一天我能以一种飞翔的姿态，在这个城市扎根。然而，现实总是会给你几记响亮的耳光，告诉你，别瞎几把乱想了。\n\n所以最后就是现实以一种近乎残酷的方式教会了我脚踏实地。\n\n<!-- more -->\n\n## 工作\n\n2016年这一年，在XX音乐，XX直播，或者叫XX直播，现在改名叫XX直播了。\n\n去年年会老板就在说品牌的力量，有说到XX直播现在是完全没有品牌影响力的，大街上拉十个人，可能8个知道XX音乐，但是可能没有一个人知道XX直播。今年一年也请了新的市场平拍推广总监，但是貌似现在看来，是没有什么卵用的。最后还是放弃了这条路子，直接改回XX直播，重回XX老牌的光环。不过，我觉得现在出去问XX直播，肯定别人会说，“XX还做直播么？”，哈哈。\n\n2016年，这一年业界都称这一年为直播元年，各类直播真是像爆米花一样，就那么一炮，出来成百上千。每个人都想在这里面分一杯羹，当然最后结果也是残酷的，没有人能看到失败者的眼泪，他们都是默默消失的。直播很赚钱，这是实实在在的。从我在直播行业里面这一年，可以算第一线了，最前线了，直播行业的赚钱速度真是只能爆红的游戏，或者金融类公司才能够得上。当然这说的也是稳定的直播公司。很多小的昙花一现的，或者靠着黄播开路的，这些都是吃一些就跑的，一口也吃不了多少。而且后期，对涉黄力度加大，几个作死的都被直接请去吃牢饭了，所以直播平台真的是只能求稳。\n\n不过我也真的很佩服XX老板的决策，如果XX没有拓展出直播这条路子，现在也是日子非常难过的。而且XX直播可以说也是最早一批做秀场类直播的了，2012年开始做。2012年当时，秀场类直播真的是只能和一些各种网页上的弹窗广告挂上勾，简直就是一种裸聊即视感，当然确实当时也很多人做裸聊的。从2012年决定做音乐属性直播做到现在，稳稳的做音乐类直播第一。果断，坚持，稳定。真的是我在XXXX直播这一年学到的，这些比技术上有什么提高，重要太多。道理我们都懂，依然过不好这一生。但是当你真的置身于这么一家公司，看着他是依靠这些朴素道理成功的时候，你真的才会明白这些有多重要。\n\n说回技术吧，毕竟我是做技术的。\n\nXX在技术上算是比较开放的一家公司，不会墨守成规，新东西很敢用，也很敢上。也和中层干部的做事风格有关系。包括我老大，也都非常拥抱新的技术，当然这些技术要在有数据支撑的前提下才能用到线上。\n\n这一年，整体部门层面，整体推进了`docker容器`的使用。对于繁星这边来说，一直是被测试资源所困扰的，你敢信？反正就是测试机缺乏，真心的。经常会因为`oom`崩溃需要重启，测试服的服务最低都已经设置到了128M内存。后来年中就开始推进`docker`，管理系统使用google的`kubernates`，然后在上面再封装一层后台管理系统。反正也是探索中前进吧，遇到很多问题，现在依然也还有很多问题。像管理后台太卡，docker不能在本地写数据，后面又加入了ELK日志组件，有些服务还有白名单机制，但是docker每次重启后IP就变了，如果调用服务需要白名单，现在依然没法上docker。最后感觉就是，如果没有一个专门负责docker的团队，这东西还是慎用啊。\n\n\n中间还做一些`GOLANG`的尝试，想用来做充值的服务，改进下现有充值系统的混乱现状，然而`GO`这东西，虽说这一年非常的火，但是我写了一段时间，不是特别感冒。当然可能也和我水平不行有关系，高手都是手中无剑，心中也无剑的。我就是觉得不好用，包括项目结构你需要使用官方推荐的方式进行建立，然后配置坑爹的`GOPATH`。整体生态上也不够完善，开发工具没有惊天之作，基本上都还是以各种编辑器的插件形式进行推出，从我自己使用VSCODE的感觉来说，只能是评价`还可以`，配置`DEBUG`真的是花了哥整一天的时间，相当不容易。而且`references`,`find usages`功能都不完善，这些都只能靠搜索来替代。不过年末出了个好消息，`jetbrain`搞了个`gogland`，我装了用了下，还是挺顺手的，期待正式版。我只能说，还是`JB`屌！其实写了一个多月的GO，我真的还是愿意回到JAVA，这完整的生态真的让人无法舍弃。反正只要能完成需求的语言，就是好语言。没啥可纠结的。啥顺手来啥。这也是我今年的感悟。做不完需求，就是天上语言，你老大也要屌你。\n\n\n后面开始搞反外挂，搞涉黄，搞涉政，搞反广告。不得不说，黑产真赚钱。要不是我是正义的小伙伴，真想去搞黑产。一年顶我多少年。对于直播平台来说，各种广告真的是无处不在，在年初的时候，我们没有专门去处理广告这些聊天，当时已经是非常猖狂，经常直播间里面已经无法正常聊天，全是外挂广告。还有一些看不惯主播，就开个挂过来刷一些脏话，主播也是苦不堪言。甚至更甚，网络黑社会，我当时也是一脸懵逼的，过来一个小弟告诉你这主播，每个月给我交多少保护费，然后我就不搞你。你不交钱，我就天天来直播间搞你。让你无法正常开播。还有一些人，就爱用黄图做头像，你有啥办法？但是网监不和你讲道理。特别是到年末，网监要求清查所有涉政的昵称和聊天，所有`习大大``彭麻麻`\n一类词汇都不能使用。而且这些都属于高压红线，一触即死。\n\n广告当时做了敏感词过滤，频率捕捉，发言IP阈值封禁，一开始没办法，就靠人工他们抗，有广告就加过滤词，封到你没有词可用了，看你怎么玩。并且对于那些发言过快的人，外挂发言的账号，直接就是封号。涉黄后期是接了第三方平台做，第三方平台鉴定，再加人工审核，基本也是解决了，偶尔会发现一两张现在，不过也是那种肉眼也确实不太能鉴别出来的了。也了解了下现在市场上的第三方鉴黄的识别率，测试了几家，其实都没有本质差别，主要还是看价钱，看服务。这东西需要持续改进的。政治识别也和鉴黄一样，是一个套路，都是图片的机器学习，很大程度上来源于样本的丰富程度，但是政治检测样本真的少，所以比较难做。\n\n\n最后就是一些直播业务上的东西，其实做直播真的和游戏是类似的，不过用户数在一个量级，在开发上主要是注意一些数据量比较大时的查询分表，然后对于接口QPS的支持量，缓存的使用。对于视频推拉流方面，现在其实也是很多第三方公司在做这种服务，你可以推给他们，他们给你放到用户最近的节点，其实也是一种变相的CDN。流媒体方面的东西还是很复杂的，各种协议，转码，我这一年也只是入了个门。或者入门都算不上。\n\n\n工作总体上来说，做了不少事情，但是没什么可以让自己很自豪去说的事情。中间由于各种原因，充值钱包项目失败，最后被砍，其实是很受挫的。所以GO语言和我，也是八字不合。\n\n\n## 生活\n\n生活上，自己就快成为一个宅男完全体了。年末居然打破了次元壁，开始玩B站。补完了fate的番。\n\n生活上真的是波澜不惊，没有什么特别可记忆的事件。这一年，也没有出去哪里旅行，也没有回老家，基本也是都献给工作和技术了。除了周末偶尔去看看电影，在家刷刷剧。\n\n看完了几本书，但是感觉到现在，已经快被我遗忘的差不多了。记性真的不是太好。\n\n跑步到了570公里，这些年唯一坚持下来一直在做的一件事。不过体脂还是很高啊，腹肌还是那样，没有变弱也没用提高。\n\n接下来列举下，一些我认为的本年度最佳\n\n年度最佳影片：血战钢锯岭\n\n> 前一个小时文艺片，后一个小时狂暴战争片，第一次在荧幕上看到那么贴近真实的战争场面\n\n年度最佳软件：Listary\n\n> 全局搜索我只服Listary，好用真的不解释\n\n\n年度最佳动画：你的名字\n\n> 第一次知道了新海诚的名字，如梦幻般的画面，第一次看的身体互换恋爱情结，完美ENDING，哎，其实我喜欢悲剧\n\n\n年度最佳产品：摩拜单车\n\n> 摩拜单车这一年无疑是划时代的，带动了整个共享单车行业，真正惠及到了每一个城市里生活的普通人\n\n\n\n## 爱情\n\n无\n\n\n\n哎，也只能写个无了，确实没有。\n\n然后也还没想过结婚，这一年也没啥突破，想去的地方还很多，想要的还很多，暂时不想被婚姻束缚，当然也可能是我太年轻了，或许过几年我就觉得现在说的话傻逼了，但是，管他呢\n\n反正是没遇到那个人吧\n\n年底的时候，舒在西藏交了个陕西的女朋友，我写这总结时，估计正腻在一起，不过感觉距离还是一切爱情的杀手，就算现在的交通工具如此的快，就算现在的通信工具这么的发达，不在一个城市，我觉得依然是很难维系一份感情的，不过，我从来不认为最后分开就是一段不好感情，只要在一起开心过，就够了，人最后都是靠回忆活着\n\n\n## 最后的最后\n\n2017，没啥说的，还是咔咔就是干吧，2017干出点成绩吧，希望\n\n毕竟自己也是25岁了，最青春的十年已经过去一半\n\n2017 is coming!","source":"_posts/2016-year-end-review.md","raw":"---\ntitle: 2016年终总结\ndate: 2016-12-25 16:50:56\ntags:\n- 杂文\n- 年终总结\ncategory:\n- 年终总结\n---\n\n\n# 2016年终总结\n\n## 0x00\n\n今天已是12月的25号，2016年又来到了最后的一个星期。时间真的是过的很快。年初和同学在江南西吃过一顿饭后，他去了阿里，我还留在广州。我说你房子就租一年时间吧，到时候明年这个时候我就也来阿里了，咱们合租。\n\n说过的话仿佛还是昨天，转眼间已是年末。\n\n这周刚结束公司的年终总结，一个字一个字的憋出来的，我很疲惫，我老大也很疲惫，大家都很疲惫。昨晚十一点半还在给老大查数据，他也需要充实他的年终总结。年终大家总是很痛苦的，除非哪家公司不用写年终总结。\n\n今年后期的压力变得更加的大，比前面工作的几年都要大。广州的房价在下半年画出一条全力向上的曲线，让人感到气馁与绝望。你要是在年初买了房，就可以赚几年甚至几十年相对于你的收入。相反，没有买，现在就是在追赶中过生活了。关键是你的工资永远也追不上房价上涨的速度。当然很多时候也是来自于一些对自己的怨恨，总是后知后觉，以前总觉得自己还年轻，还可以赚大钱，就算有千分之一一夜暴富的机会，我也依然做着这个梦。那时候我不担心买不起房，不担心无法在这个城市立足，总在幻想未来的某一天我能以一种飞翔的姿态，在这个城市扎根。然而，现实总是会给你几记响亮的耳光，告诉你，别瞎几把乱想了。\n\n所以最后就是现实以一种近乎残酷的方式教会了我脚踏实地。\n\n<!-- more -->\n\n## 工作\n\n2016年这一年，在XX音乐，XX直播，或者叫XX直播，现在改名叫XX直播了。\n\n去年年会老板就在说品牌的力量，有说到XX直播现在是完全没有品牌影响力的，大街上拉十个人，可能8个知道XX音乐，但是可能没有一个人知道XX直播。今年一年也请了新的市场平拍推广总监，但是貌似现在看来，是没有什么卵用的。最后还是放弃了这条路子，直接改回XX直播，重回XX老牌的光环。不过，我觉得现在出去问XX直播，肯定别人会说，“XX还做直播么？”，哈哈。\n\n2016年，这一年业界都称这一年为直播元年，各类直播真是像爆米花一样，就那么一炮，出来成百上千。每个人都想在这里面分一杯羹，当然最后结果也是残酷的，没有人能看到失败者的眼泪，他们都是默默消失的。直播很赚钱，这是实实在在的。从我在直播行业里面这一年，可以算第一线了，最前线了，直播行业的赚钱速度真是只能爆红的游戏，或者金融类公司才能够得上。当然这说的也是稳定的直播公司。很多小的昙花一现的，或者靠着黄播开路的，这些都是吃一些就跑的，一口也吃不了多少。而且后期，对涉黄力度加大，几个作死的都被直接请去吃牢饭了，所以直播平台真的是只能求稳。\n\n不过我也真的很佩服XX老板的决策，如果XX没有拓展出直播这条路子，现在也是日子非常难过的。而且XX直播可以说也是最早一批做秀场类直播的了，2012年开始做。2012年当时，秀场类直播真的是只能和一些各种网页上的弹窗广告挂上勾，简直就是一种裸聊即视感，当然确实当时也很多人做裸聊的。从2012年决定做音乐属性直播做到现在，稳稳的做音乐类直播第一。果断，坚持，稳定。真的是我在XXXX直播这一年学到的，这些比技术上有什么提高，重要太多。道理我们都懂，依然过不好这一生。但是当你真的置身于这么一家公司，看着他是依靠这些朴素道理成功的时候，你真的才会明白这些有多重要。\n\n说回技术吧，毕竟我是做技术的。\n\nXX在技术上算是比较开放的一家公司，不会墨守成规，新东西很敢用，也很敢上。也和中层干部的做事风格有关系。包括我老大，也都非常拥抱新的技术，当然这些技术要在有数据支撑的前提下才能用到线上。\n\n这一年，整体部门层面，整体推进了`docker容器`的使用。对于繁星这边来说，一直是被测试资源所困扰的，你敢信？反正就是测试机缺乏，真心的。经常会因为`oom`崩溃需要重启，测试服的服务最低都已经设置到了128M内存。后来年中就开始推进`docker`，管理系统使用google的`kubernates`，然后在上面再封装一层后台管理系统。反正也是探索中前进吧，遇到很多问题，现在依然也还有很多问题。像管理后台太卡，docker不能在本地写数据，后面又加入了ELK日志组件，有些服务还有白名单机制，但是docker每次重启后IP就变了，如果调用服务需要白名单，现在依然没法上docker。最后感觉就是，如果没有一个专门负责docker的团队，这东西还是慎用啊。\n\n\n中间还做一些`GOLANG`的尝试，想用来做充值的服务，改进下现有充值系统的混乱现状，然而`GO`这东西，虽说这一年非常的火，但是我写了一段时间，不是特别感冒。当然可能也和我水平不行有关系，高手都是手中无剑，心中也无剑的。我就是觉得不好用，包括项目结构你需要使用官方推荐的方式进行建立，然后配置坑爹的`GOPATH`。整体生态上也不够完善，开发工具没有惊天之作，基本上都还是以各种编辑器的插件形式进行推出，从我自己使用VSCODE的感觉来说，只能是评价`还可以`，配置`DEBUG`真的是花了哥整一天的时间，相当不容易。而且`references`,`find usages`功能都不完善，这些都只能靠搜索来替代。不过年末出了个好消息，`jetbrain`搞了个`gogland`，我装了用了下，还是挺顺手的，期待正式版。我只能说，还是`JB`屌！其实写了一个多月的GO，我真的还是愿意回到JAVA，这完整的生态真的让人无法舍弃。反正只要能完成需求的语言，就是好语言。没啥可纠结的。啥顺手来啥。这也是我今年的感悟。做不完需求，就是天上语言，你老大也要屌你。\n\n\n后面开始搞反外挂，搞涉黄，搞涉政，搞反广告。不得不说，黑产真赚钱。要不是我是正义的小伙伴，真想去搞黑产。一年顶我多少年。对于直播平台来说，各种广告真的是无处不在，在年初的时候，我们没有专门去处理广告这些聊天，当时已经是非常猖狂，经常直播间里面已经无法正常聊天，全是外挂广告。还有一些看不惯主播，就开个挂过来刷一些脏话，主播也是苦不堪言。甚至更甚，网络黑社会，我当时也是一脸懵逼的，过来一个小弟告诉你这主播，每个月给我交多少保护费，然后我就不搞你。你不交钱，我就天天来直播间搞你。让你无法正常开播。还有一些人，就爱用黄图做头像，你有啥办法？但是网监不和你讲道理。特别是到年末，网监要求清查所有涉政的昵称和聊天，所有`习大大``彭麻麻`\n一类词汇都不能使用。而且这些都属于高压红线，一触即死。\n\n广告当时做了敏感词过滤，频率捕捉，发言IP阈值封禁，一开始没办法，就靠人工他们抗，有广告就加过滤词，封到你没有词可用了，看你怎么玩。并且对于那些发言过快的人，外挂发言的账号，直接就是封号。涉黄后期是接了第三方平台做，第三方平台鉴定，再加人工审核，基本也是解决了，偶尔会发现一两张现在，不过也是那种肉眼也确实不太能鉴别出来的了。也了解了下现在市场上的第三方鉴黄的识别率，测试了几家，其实都没有本质差别，主要还是看价钱，看服务。这东西需要持续改进的。政治识别也和鉴黄一样，是一个套路，都是图片的机器学习，很大程度上来源于样本的丰富程度，但是政治检测样本真的少，所以比较难做。\n\n\n最后就是一些直播业务上的东西，其实做直播真的和游戏是类似的，不过用户数在一个量级，在开发上主要是注意一些数据量比较大时的查询分表，然后对于接口QPS的支持量，缓存的使用。对于视频推拉流方面，现在其实也是很多第三方公司在做这种服务，你可以推给他们，他们给你放到用户最近的节点，其实也是一种变相的CDN。流媒体方面的东西还是很复杂的，各种协议，转码，我这一年也只是入了个门。或者入门都算不上。\n\n\n工作总体上来说，做了不少事情，但是没什么可以让自己很自豪去说的事情。中间由于各种原因，充值钱包项目失败，最后被砍，其实是很受挫的。所以GO语言和我，也是八字不合。\n\n\n## 生活\n\n生活上，自己就快成为一个宅男完全体了。年末居然打破了次元壁，开始玩B站。补完了fate的番。\n\n生活上真的是波澜不惊，没有什么特别可记忆的事件。这一年，也没有出去哪里旅行，也没有回老家，基本也是都献给工作和技术了。除了周末偶尔去看看电影，在家刷刷剧。\n\n看完了几本书，但是感觉到现在，已经快被我遗忘的差不多了。记性真的不是太好。\n\n跑步到了570公里，这些年唯一坚持下来一直在做的一件事。不过体脂还是很高啊，腹肌还是那样，没有变弱也没用提高。\n\n接下来列举下，一些我认为的本年度最佳\n\n年度最佳影片：血战钢锯岭\n\n> 前一个小时文艺片，后一个小时狂暴战争片，第一次在荧幕上看到那么贴近真实的战争场面\n\n年度最佳软件：Listary\n\n> 全局搜索我只服Listary，好用真的不解释\n\n\n年度最佳动画：你的名字\n\n> 第一次知道了新海诚的名字，如梦幻般的画面，第一次看的身体互换恋爱情结，完美ENDING，哎，其实我喜欢悲剧\n\n\n年度最佳产品：摩拜单车\n\n> 摩拜单车这一年无疑是划时代的，带动了整个共享单车行业，真正惠及到了每一个城市里生活的普通人\n\n\n\n## 爱情\n\n无\n\n\n\n哎，也只能写个无了，确实没有。\n\n然后也还没想过结婚，这一年也没啥突破，想去的地方还很多，想要的还很多，暂时不想被婚姻束缚，当然也可能是我太年轻了，或许过几年我就觉得现在说的话傻逼了，但是，管他呢\n\n反正是没遇到那个人吧\n\n年底的时候，舒在西藏交了个陕西的女朋友，我写这总结时，估计正腻在一起，不过感觉距离还是一切爱情的杀手，就算现在的交通工具如此的快，就算现在的通信工具这么的发达，不在一个城市，我觉得依然是很难维系一份感情的，不过，我从来不认为最后分开就是一段不好感情，只要在一起开心过，就够了，人最后都是靠回忆活着\n\n\n## 最后的最后\n\n2017，没啥说的，还是咔咔就是干吧，2017干出点成绩吧，希望\n\n毕竟自己也是25岁了，最青春的十年已经过去一半\n\n2017 is coming!","slug":"2016-year-end-review","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbge500000a6t9w4zt5it","content":"<h1 id=\"2016年终总结\"><a href=\"#2016年终总结\" class=\"headerlink\" title=\"2016年终总结\"></a>2016年终总结</h1><h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>今天已是12月的25号，2016年又来到了最后的一个星期。时间真的是过的很快。年初和同学在江南西吃过一顿饭后，他去了阿里，我还留在广州。我说你房子就租一年时间吧，到时候明年这个时候我就也来阿里了，咱们合租。</p>\n<p>说过的话仿佛还是昨天，转眼间已是年末。</p>\n<p>这周刚结束公司的年终总结，一个字一个字的憋出来的，我很疲惫，我老大也很疲惫，大家都很疲惫。昨晚十一点半还在给老大查数据，他也需要充实他的年终总结。年终大家总是很痛苦的，除非哪家公司不用写年终总结。</p>\n<p>今年后期的压力变得更加的大，比前面工作的几年都要大。广州的房价在下半年画出一条全力向上的曲线，让人感到气馁与绝望。你要是在年初买了房，就可以赚几年甚至几十年相对于你的收入。相反，没有买，现在就是在追赶中过生活了。关键是你的工资永远也追不上房价上涨的速度。当然很多时候也是来自于一些对自己的怨恨，总是后知后觉，以前总觉得自己还年轻，还可以赚大钱，就算有千分之一一夜暴富的机会，我也依然做着这个梦。那时候我不担心买不起房，不担心无法在这个城市立足，总在幻想未来的某一天我能以一种飞翔的姿态，在这个城市扎根。然而，现实总是会给你几记响亮的耳光，告诉你，别瞎几把乱想了。</p>\n<p>所以最后就是现实以一种近乎残酷的方式教会了我脚踏实地。</p>\n<a id=\"more\"></a>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p>2016年这一年，在XX音乐，XX直播，或者叫XX直播，现在改名叫XX直播了。</p>\n<p>去年年会老板就在说品牌的力量，有说到XX直播现在是完全没有品牌影响力的，大街上拉十个人，可能8个知道XX音乐，但是可能没有一个人知道XX直播。今年一年也请了新的市场平拍推广总监，但是貌似现在看来，是没有什么卵用的。最后还是放弃了这条路子，直接改回XX直播，重回XX老牌的光环。不过，我觉得现在出去问XX直播，肯定别人会说，“XX还做直播么？”，哈哈。</p>\n<p>2016年，这一年业界都称这一年为直播元年，各类直播真是像爆米花一样，就那么一炮，出来成百上千。每个人都想在这里面分一杯羹，当然最后结果也是残酷的，没有人能看到失败者的眼泪，他们都是默默消失的。直播很赚钱，这是实实在在的。从我在直播行业里面这一年，可以算第一线了，最前线了，直播行业的赚钱速度真是只能爆红的游戏，或者金融类公司才能够得上。当然这说的也是稳定的直播公司。很多小的昙花一现的，或者靠着黄播开路的，这些都是吃一些就跑的，一口也吃不了多少。而且后期，对涉黄力度加大，几个作死的都被直接请去吃牢饭了，所以直播平台真的是只能求稳。</p>\n<p>不过我也真的很佩服XX老板的决策，如果XX没有拓展出直播这条路子，现在也是日子非常难过的。而且XX直播可以说也是最早一批做秀场类直播的了，2012年开始做。2012年当时，秀场类直播真的是只能和一些各种网页上的弹窗广告挂上勾，简直就是一种裸聊即视感，当然确实当时也很多人做裸聊的。从2012年决定做音乐属性直播做到现在，稳稳的做音乐类直播第一。果断，坚持，稳定。真的是我在XXXX直播这一年学到的，这些比技术上有什么提高，重要太多。道理我们都懂，依然过不好这一生。但是当你真的置身于这么一家公司，看着他是依靠这些朴素道理成功的时候，你真的才会明白这些有多重要。</p>\n<p>说回技术吧，毕竟我是做技术的。</p>\n<p>XX在技术上算是比较开放的一家公司，不会墨守成规，新东西很敢用，也很敢上。也和中层干部的做事风格有关系。包括我老大，也都非常拥抱新的技术，当然这些技术要在有数据支撑的前提下才能用到线上。</p>\n<p>这一年，整体部门层面，整体推进了<code>docker容器</code>的使用。对于繁星这边来说，一直是被测试资源所困扰的，你敢信？反正就是测试机缺乏，真心的。经常会因为<code>oom</code>崩溃需要重启，测试服的服务最低都已经设置到了128M内存。后来年中就开始推进<code>docker</code>，管理系统使用google的<code>kubernates</code>，然后在上面再封装一层后台管理系统。反正也是探索中前进吧，遇到很多问题，现在依然也还有很多问题。像管理后台太卡，docker不能在本地写数据，后面又加入了ELK日志组件，有些服务还有白名单机制，但是docker每次重启后IP就变了，如果调用服务需要白名单，现在依然没法上docker。最后感觉就是，如果没有一个专门负责docker的团队，这东西还是慎用啊。</p>\n<p>中间还做一些<code>GOLANG</code>的尝试，想用来做充值的服务，改进下现有充值系统的混乱现状，然而<code>GO</code>这东西，虽说这一年非常的火，但是我写了一段时间，不是特别感冒。当然可能也和我水平不行有关系，高手都是手中无剑，心中也无剑的。我就是觉得不好用，包括项目结构你需要使用官方推荐的方式进行建立，然后配置坑爹的<code>GOPATH</code>。整体生态上也不够完善，开发工具没有惊天之作，基本上都还是以各种编辑器的插件形式进行推出，从我自己使用VSCODE的感觉来说，只能是评价<code>还可以</code>，配置<code>DEBUG</code>真的是花了哥整一天的时间，相当不容易。而且<code>references</code>,<code>find usages</code>功能都不完善，这些都只能靠搜索来替代。不过年末出了个好消息，<code>jetbrain</code>搞了个<code>gogland</code>，我装了用了下，还是挺顺手的，期待正式版。我只能说，还是<code>JB</code>屌！其实写了一个多月的GO，我真的还是愿意回到JAVA，这完整的生态真的让人无法舍弃。反正只要能完成需求的语言，就是好语言。没啥可纠结的。啥顺手来啥。这也是我今年的感悟。做不完需求，就是天上语言，你老大也要屌你。</p>\n<p>后面开始搞反外挂，搞涉黄，搞涉政，搞反广告。不得不说，黑产真赚钱。要不是我是正义的小伙伴，真想去搞黑产。一年顶我多少年。对于直播平台来说，各种广告真的是无处不在，在年初的时候，我们没有专门去处理广告这些聊天，当时已经是非常猖狂，经常直播间里面已经无法正常聊天，全是外挂广告。还有一些看不惯主播，就开个挂过来刷一些脏话，主播也是苦不堪言。甚至更甚，网络黑社会，我当时也是一脸懵逼的，过来一个小弟告诉你这主播，每个月给我交多少保护费，然后我就不搞你。你不交钱，我就天天来直播间搞你。让你无法正常开播。还有一些人，就爱用黄图做头像，你有啥办法？但是网监不和你讲道理。特别是到年末，网监要求清查所有涉政的昵称和聊天，所有<code>习大大`</code>彭麻麻`<br>一类词汇都不能使用。而且这些都属于高压红线，一触即死。</p>\n<p>广告当时做了敏感词过滤，频率捕捉，发言IP阈值封禁，一开始没办法，就靠人工他们抗，有广告就加过滤词，封到你没有词可用了，看你怎么玩。并且对于那些发言过快的人，外挂发言的账号，直接就是封号。涉黄后期是接了第三方平台做，第三方平台鉴定，再加人工审核，基本也是解决了，偶尔会发现一两张现在，不过也是那种肉眼也确实不太能鉴别出来的了。也了解了下现在市场上的第三方鉴黄的识别率，测试了几家，其实都没有本质差别，主要还是看价钱，看服务。这东西需要持续改进的。政治识别也和鉴黄一样，是一个套路，都是图片的机器学习，很大程度上来源于样本的丰富程度，但是政治检测样本真的少，所以比较难做。</p>\n<p>最后就是一些直播业务上的东西，其实做直播真的和游戏是类似的，不过用户数在一个量级，在开发上主要是注意一些数据量比较大时的查询分表，然后对于接口QPS的支持量，缓存的使用。对于视频推拉流方面，现在其实也是很多第三方公司在做这种服务，你可以推给他们，他们给你放到用户最近的节点，其实也是一种变相的CDN。流媒体方面的东西还是很复杂的，各种协议，转码，我这一年也只是入了个门。或者入门都算不上。</p>\n<p>工作总体上来说，做了不少事情，但是没什么可以让自己很自豪去说的事情。中间由于各种原因，充值钱包项目失败，最后被砍，其实是很受挫的。所以GO语言和我，也是八字不合。</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>生活上，自己就快成为一个宅男完全体了。年末居然打破了次元壁，开始玩B站。补完了fate的番。</p>\n<p>生活上真的是波澜不惊，没有什么特别可记忆的事件。这一年，也没有出去哪里旅行，也没有回老家，基本也是都献给工作和技术了。除了周末偶尔去看看电影，在家刷刷剧。</p>\n<p>看完了几本书，但是感觉到现在，已经快被我遗忘的差不多了。记性真的不是太好。</p>\n<p>跑步到了570公里，这些年唯一坚持下来一直在做的一件事。不过体脂还是很高啊，腹肌还是那样，没有变弱也没用提高。</p>\n<p>接下来列举下，一些我认为的本年度最佳</p>\n<p>年度最佳影片：血战钢锯岭</p>\n<blockquote>\n<p>前一个小时文艺片，后一个小时狂暴战争片，第一次在荧幕上看到那么贴近真实的战争场面</p>\n</blockquote>\n<p>年度最佳软件：Listary</p>\n<blockquote>\n<p>全局搜索我只服Listary，好用真的不解释</p>\n</blockquote>\n<p>年度最佳动画：你的名字</p>\n<blockquote>\n<p>第一次知道了新海诚的名字，如梦幻般的画面，第一次看的身体互换恋爱情结，完美ENDING，哎，其实我喜欢悲剧</p>\n</blockquote>\n<p>年度最佳产品：摩拜单车</p>\n<blockquote>\n<p>摩拜单车这一年无疑是划时代的，带动了整个共享单车行业，真正惠及到了每一个城市里生活的普通人</p>\n</blockquote>\n<h2 id=\"爱情\"><a href=\"#爱情\" class=\"headerlink\" title=\"爱情\"></a>爱情</h2><p>无</p>\n<p>哎，也只能写个无了，确实没有。</p>\n<p>然后也还没想过结婚，这一年也没啥突破，想去的地方还很多，想要的还很多，暂时不想被婚姻束缚，当然也可能是我太年轻了，或许过几年我就觉得现在说的话傻逼了，但是，管他呢</p>\n<p>反正是没遇到那个人吧</p>\n<p>年底的时候，舒在西藏交了个陕西的女朋友，我写这总结时，估计正腻在一起，不过感觉距离还是一切爱情的杀手，就算现在的交通工具如此的快，就算现在的通信工具这么的发达，不在一个城市，我觉得依然是很难维系一份感情的，不过，我从来不认为最后分开就是一段不好感情，只要在一起开心过，就够了，人最后都是靠回忆活着</p>\n<h2 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a>最后的最后</h2><p>2017，没啥说的，还是咔咔就是干吧，2017干出点成绩吧，希望</p>\n<p>毕竟自己也是25岁了，最青春的十年已经过去一半</p>\n<p>2017 is coming!</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"2016年终总结\"><a href=\"#2016年终总结\" class=\"headerlink\" title=\"2016年终总结\"></a>2016年终总结</h1><h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>今天已是12月的25号，2016年又来到了最后的一个星期。时间真的是过的很快。年初和同学在江南西吃过一顿饭后，他去了阿里，我还留在广州。我说你房子就租一年时间吧，到时候明年这个时候我就也来阿里了，咱们合租。</p>\n<p>说过的话仿佛还是昨天，转眼间已是年末。</p>\n<p>这周刚结束公司的年终总结，一个字一个字的憋出来的，我很疲惫，我老大也很疲惫，大家都很疲惫。昨晚十一点半还在给老大查数据，他也需要充实他的年终总结。年终大家总是很痛苦的，除非哪家公司不用写年终总结。</p>\n<p>今年后期的压力变得更加的大，比前面工作的几年都要大。广州的房价在下半年画出一条全力向上的曲线，让人感到气馁与绝望。你要是在年初买了房，就可以赚几年甚至几十年相对于你的收入。相反，没有买，现在就是在追赶中过生活了。关键是你的工资永远也追不上房价上涨的速度。当然很多时候也是来自于一些对自己的怨恨，总是后知后觉，以前总觉得自己还年轻，还可以赚大钱，就算有千分之一一夜暴富的机会，我也依然做着这个梦。那时候我不担心买不起房，不担心无法在这个城市立足，总在幻想未来的某一天我能以一种飞翔的姿态，在这个城市扎根。然而，现实总是会给你几记响亮的耳光，告诉你，别瞎几把乱想了。</p>\n<p>所以最后就是现实以一种近乎残酷的方式教会了我脚踏实地。</p>","more":"<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2><p>2016年这一年，在XX音乐，XX直播，或者叫XX直播，现在改名叫XX直播了。</p>\n<p>去年年会老板就在说品牌的力量，有说到XX直播现在是完全没有品牌影响力的，大街上拉十个人，可能8个知道XX音乐，但是可能没有一个人知道XX直播。今年一年也请了新的市场平拍推广总监，但是貌似现在看来，是没有什么卵用的。最后还是放弃了这条路子，直接改回XX直播，重回XX老牌的光环。不过，我觉得现在出去问XX直播，肯定别人会说，“XX还做直播么？”，哈哈。</p>\n<p>2016年，这一年业界都称这一年为直播元年，各类直播真是像爆米花一样，就那么一炮，出来成百上千。每个人都想在这里面分一杯羹，当然最后结果也是残酷的，没有人能看到失败者的眼泪，他们都是默默消失的。直播很赚钱，这是实实在在的。从我在直播行业里面这一年，可以算第一线了，最前线了，直播行业的赚钱速度真是只能爆红的游戏，或者金融类公司才能够得上。当然这说的也是稳定的直播公司。很多小的昙花一现的，或者靠着黄播开路的，这些都是吃一些就跑的，一口也吃不了多少。而且后期，对涉黄力度加大，几个作死的都被直接请去吃牢饭了，所以直播平台真的是只能求稳。</p>\n<p>不过我也真的很佩服XX老板的决策，如果XX没有拓展出直播这条路子，现在也是日子非常难过的。而且XX直播可以说也是最早一批做秀场类直播的了，2012年开始做。2012年当时，秀场类直播真的是只能和一些各种网页上的弹窗广告挂上勾，简直就是一种裸聊即视感，当然确实当时也很多人做裸聊的。从2012年决定做音乐属性直播做到现在，稳稳的做音乐类直播第一。果断，坚持，稳定。真的是我在XXXX直播这一年学到的，这些比技术上有什么提高，重要太多。道理我们都懂，依然过不好这一生。但是当你真的置身于这么一家公司，看着他是依靠这些朴素道理成功的时候，你真的才会明白这些有多重要。</p>\n<p>说回技术吧，毕竟我是做技术的。</p>\n<p>XX在技术上算是比较开放的一家公司，不会墨守成规，新东西很敢用，也很敢上。也和中层干部的做事风格有关系。包括我老大，也都非常拥抱新的技术，当然这些技术要在有数据支撑的前提下才能用到线上。</p>\n<p>这一年，整体部门层面，整体推进了<code>docker容器</code>的使用。对于繁星这边来说，一直是被测试资源所困扰的，你敢信？反正就是测试机缺乏，真心的。经常会因为<code>oom</code>崩溃需要重启，测试服的服务最低都已经设置到了128M内存。后来年中就开始推进<code>docker</code>，管理系统使用google的<code>kubernates</code>，然后在上面再封装一层后台管理系统。反正也是探索中前进吧，遇到很多问题，现在依然也还有很多问题。像管理后台太卡，docker不能在本地写数据，后面又加入了ELK日志组件，有些服务还有白名单机制，但是docker每次重启后IP就变了，如果调用服务需要白名单，现在依然没法上docker。最后感觉就是，如果没有一个专门负责docker的团队，这东西还是慎用啊。</p>\n<p>中间还做一些<code>GOLANG</code>的尝试，想用来做充值的服务，改进下现有充值系统的混乱现状，然而<code>GO</code>这东西，虽说这一年非常的火，但是我写了一段时间，不是特别感冒。当然可能也和我水平不行有关系，高手都是手中无剑，心中也无剑的。我就是觉得不好用，包括项目结构你需要使用官方推荐的方式进行建立，然后配置坑爹的<code>GOPATH</code>。整体生态上也不够完善，开发工具没有惊天之作，基本上都还是以各种编辑器的插件形式进行推出，从我自己使用VSCODE的感觉来说，只能是评价<code>还可以</code>，配置<code>DEBUG</code>真的是花了哥整一天的时间，相当不容易。而且<code>references</code>,<code>find usages</code>功能都不完善，这些都只能靠搜索来替代。不过年末出了个好消息，<code>jetbrain</code>搞了个<code>gogland</code>，我装了用了下，还是挺顺手的，期待正式版。我只能说，还是<code>JB</code>屌！其实写了一个多月的GO，我真的还是愿意回到JAVA，这完整的生态真的让人无法舍弃。反正只要能完成需求的语言，就是好语言。没啥可纠结的。啥顺手来啥。这也是我今年的感悟。做不完需求，就是天上语言，你老大也要屌你。</p>\n<p>后面开始搞反外挂，搞涉黄，搞涉政，搞反广告。不得不说，黑产真赚钱。要不是我是正义的小伙伴，真想去搞黑产。一年顶我多少年。对于直播平台来说，各种广告真的是无处不在，在年初的时候，我们没有专门去处理广告这些聊天，当时已经是非常猖狂，经常直播间里面已经无法正常聊天，全是外挂广告。还有一些看不惯主播，就开个挂过来刷一些脏话，主播也是苦不堪言。甚至更甚，网络黑社会，我当时也是一脸懵逼的，过来一个小弟告诉你这主播，每个月给我交多少保护费，然后我就不搞你。你不交钱，我就天天来直播间搞你。让你无法正常开播。还有一些人，就爱用黄图做头像，你有啥办法？但是网监不和你讲道理。特别是到年末，网监要求清查所有涉政的昵称和聊天，所有<code>习大大`</code>彭麻麻`<br>一类词汇都不能使用。而且这些都属于高压红线，一触即死。</p>\n<p>广告当时做了敏感词过滤，频率捕捉，发言IP阈值封禁，一开始没办法，就靠人工他们抗，有广告就加过滤词，封到你没有词可用了，看你怎么玩。并且对于那些发言过快的人，外挂发言的账号，直接就是封号。涉黄后期是接了第三方平台做，第三方平台鉴定，再加人工审核，基本也是解决了，偶尔会发现一两张现在，不过也是那种肉眼也确实不太能鉴别出来的了。也了解了下现在市场上的第三方鉴黄的识别率，测试了几家，其实都没有本质差别，主要还是看价钱，看服务。这东西需要持续改进的。政治识别也和鉴黄一样，是一个套路，都是图片的机器学习，很大程度上来源于样本的丰富程度，但是政治检测样本真的少，所以比较难做。</p>\n<p>最后就是一些直播业务上的东西，其实做直播真的和游戏是类似的，不过用户数在一个量级，在开发上主要是注意一些数据量比较大时的查询分表，然后对于接口QPS的支持量，缓存的使用。对于视频推拉流方面，现在其实也是很多第三方公司在做这种服务，你可以推给他们，他们给你放到用户最近的节点，其实也是一种变相的CDN。流媒体方面的东西还是很复杂的，各种协议，转码，我这一年也只是入了个门。或者入门都算不上。</p>\n<p>工作总体上来说，做了不少事情，但是没什么可以让自己很自豪去说的事情。中间由于各种原因，充值钱包项目失败，最后被砍，其实是很受挫的。所以GO语言和我，也是八字不合。</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>生活上，自己就快成为一个宅男完全体了。年末居然打破了次元壁，开始玩B站。补完了fate的番。</p>\n<p>生活上真的是波澜不惊，没有什么特别可记忆的事件。这一年，也没有出去哪里旅行，也没有回老家，基本也是都献给工作和技术了。除了周末偶尔去看看电影，在家刷刷剧。</p>\n<p>看完了几本书，但是感觉到现在，已经快被我遗忘的差不多了。记性真的不是太好。</p>\n<p>跑步到了570公里，这些年唯一坚持下来一直在做的一件事。不过体脂还是很高啊，腹肌还是那样，没有变弱也没用提高。</p>\n<p>接下来列举下，一些我认为的本年度最佳</p>\n<p>年度最佳影片：血战钢锯岭</p>\n<blockquote>\n<p>前一个小时文艺片，后一个小时狂暴战争片，第一次在荧幕上看到那么贴近真实的战争场面</p>\n</blockquote>\n<p>年度最佳软件：Listary</p>\n<blockquote>\n<p>全局搜索我只服Listary，好用真的不解释</p>\n</blockquote>\n<p>年度最佳动画：你的名字</p>\n<blockquote>\n<p>第一次知道了新海诚的名字，如梦幻般的画面，第一次看的身体互换恋爱情结，完美ENDING，哎，其实我喜欢悲剧</p>\n</blockquote>\n<p>年度最佳产品：摩拜单车</p>\n<blockquote>\n<p>摩拜单车这一年无疑是划时代的，带动了整个共享单车行业，真正惠及到了每一个城市里生活的普通人</p>\n</blockquote>\n<h2 id=\"爱情\"><a href=\"#爱情\" class=\"headerlink\" title=\"爱情\"></a>爱情</h2><p>无</p>\n<p>哎，也只能写个无了，确实没有。</p>\n<p>然后也还没想过结婚，这一年也没啥突破，想去的地方还很多，想要的还很多，暂时不想被婚姻束缚，当然也可能是我太年轻了，或许过几年我就觉得现在说的话傻逼了，但是，管他呢</p>\n<p>反正是没遇到那个人吧</p>\n<p>年底的时候，舒在西藏交了个陕西的女朋友，我写这总结时，估计正腻在一起，不过感觉距离还是一切爱情的杀手，就算现在的交通工具如此的快，就算现在的通信工具这么的发达，不在一个城市，我觉得依然是很难维系一份感情的，不过，我从来不认为最后分开就是一段不好感情，只要在一起开心过，就够了，人最后都是靠回忆活着</p>\n<h2 id=\"最后的最后\"><a href=\"#最后的最后\" class=\"headerlink\" title=\"最后的最后\"></a>最后的最后</h2><p>2017，没啥说的，还是咔咔就是干吧，2017干出点成绩吧，希望</p>\n<p>毕竟自己也是25岁了，最青春的十年已经过去一半</p>\n<p>2017 is coming!</p>"},{"title":"ElasticSearch2.3.2报错NoNodeAvailableException","date":"2016-12-24T13:37:06.000Z","_content":"\n\n# ElasticSearch2.3.2报错NoNodeAvailableException\n\n## elasticsearch版本\n\n版本：2.3.2\n\nJAVA客户端：2.3.2\n\n服务器环境：centos6.3\n\n## 错误描述\n\n使用java的client`transport`方式连接ES，报以下错误：\n\n\n```\n\n\n12:56:47.761 [main] WARN  org.elasticsearch.client.transport - [Curtis Connors] node {#transport#-1}{10.16.6.18}{10.16.6.18:9300} not part of the cluster Cluster [elasticsearch], ignoring...\nDisconnected from the target VM, address: '127.0.0.1:20962', transport: 'socket'\nException in thread \"main\" NoNodeAvailableException[None of the configured nodes are available: [{#transport#-1}{10.16.6.18}{10.16.6.18:9300}]]\n\tat org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:290)\n\tat org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:207)\n\tat org.elasticsearch.client.transport.support.TransportProxyClient.execute(TransportProxyClient.java:55)\n\tat org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:288)\n\tat org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:359)\n\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)\n\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:56)\n\tat com.kugou.fanxing.admin.TestElasticSearch.main(TestElasticSearch.java:33)\n\t\n```\n\n<!-- more -->\n\n连接代码如下：\n\n> 连接的代码为ElasticSearch官网文档给的例子，只是加上了构造query语句，原代码地址为 https://www.elastic.co/guide/en/elasticsearch/client/java-api/2.3/transport-client.html\n\n```java\n\npackage demo;\n\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.common.transport.InetSocketTransportAddress;\nimport org.elasticsearch.index.query.QueryBuilders;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\n/**\n * Created by williamyao on 2016/12/15.\n */\npublic class TestElasticSearch {\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\n\t\t\tSettings settings = Settings.settingsBuilder()\n\t\t\t\t\t.put(\"cluster.name\", \"elk_dev\").put(\"client.transport.sniff\", true).build();\n\t\t\tClient client = TransportClient.builder().\n\t\t\t// 就是这个setting,一开始忘记set进来\n\t\t\t//.settings(settings)\n\t\t\tbuild()\n\t\t\t\t\t.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(\"10.16.6.18\"), 9300));\n\n\t\t\tlong startTime = 1481644800000L;\n\t\t\tlong endTime = 1481731200000L;\n\n\t\t\tSearchResponse sr = client.prepareSearch()\n\t\t\t\t\t.setQuery(QueryBuilders.rangeQuery(\"ts\").from(startTime).to(endTime))\n\t\t\t\t\t.execute().actionGet();\n\t\t\tsr.getHits().hits();\n\t\t\tclient.close();\n\t\t} catch (UnknownHostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n\n```\n\n## 排错思路\n\n说实话，好久没用ES，很多都又忘记了，真是学一次忘一次，挫败感极强，再加上这个错当时被情绪影响严重，导致我浪费不少时间\n\n1. \n\n看到这个错，首先是确认`ES`的服务到底正不正常，可以通过下面的请求：\n\n> http://127.0.0.1:9200/\n\n可以看到ES的版本信息，集群名字，那就说明ES服务倒没什么问题\n\n2. \n\n接下来，我选择去查看`9300`端口是不是有监听，因为刚才是用http服务的端口查看的，使用的是`9200`端口，而JAVA是连接socket端口的，也就是9300，只要是socket服务，那telnet肯定是万能的，直接telnet验证\n\n> telnet 10.16.6.18 9300\n\n这时候我发现不通，一连就被断开，这个是让我最误导的地方\n\n去查看ES启动日志，发现有成功`bound`到9300端口日志，但是telnet就是不通\n\n3.\n\n这时候我选择去下载一个2.3.2的ES，放到我本地运行，看下是不是可以telnet通，代码是不是可以连接上，结果是可以的，没问题\n\n4.\n\n因为我本地是windows，怕环境不同而无法重现问题，我又去线上机器，外网线上跑的相同版本ES，telnet试下，发现也是没问题！\n\n5.\n\n这样就比较蛋疼了，只能是认为那台测试虚拟机有问题了，这个问题就比较难查了，但这时候，我突然想到一个点，读文档的时候有个细节\n\n> Note that you have to set the cluster name if you use one different than \"elasticsearch\"\n\n这时候我才想起去检查下我的代码，看下我的clustername是不是设置对了，才发现，clustername是对了，但是setting没有set到TransportClient里面\n\n都是泪啊！！！！！低级失误！！！查了我这么久！！！！！\n\n\n## 总结\n\nES的问题有时候真的是挺难查的，特别是当自己写代码不仔细时，这种问题也是真的蛋疼\n\n当然也和我好久没用ES有关系\n\n写代码这东西，有时候也真是那句话，`无他，但手熟尔`\n\n还是要沉下心去排查，不能浮躁，当一个小时都找不到问题时，人会变得很燥，这时候很多细节都容易被忽略\n\n\n## 彩蛋\n\n```\n13:26:51.323 [elasticsearch[Vibro][generic][T#2]] INFO  org.elasticsearch.client.transport - [Vibro] failed to get local cluster state for {#transport#-1}{10.16.6.18}{10.16.6.18:9200}, disconnecting...\norg.elasticsearch.transport.ReceiveTimeoutTransportException: [][10.16.6.18:9200][cluster:monitor/state] request_id [0] timed out after [5001ms]\n\tat org.elasticsearch.transport.TransportService$TimeoutHandler.run(TransportService.java:679) [elasticsearch-2.3.2.jar:2.3.2]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]\n\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]\n13:26:51.323 [elasticsearch[Vibro][generic][T#2]] DEBUG org.elasticsearch.transport.netty - [Vibro] disconnecting from [{#transport#-1}{10.16.6.18}{10.16.6.18:9200}] due to explicit disconnect call\n13:26:51.326 [elasticsearch[Vibro][management][T#1]] DEBUG org.elasticsearch.transport.netty - [Vibro] connected to node [{#transport#-1}{10.16.6.18}{10.16.6.18:9200}]\nDisconnected from the target VM, address: '127.0.0.1:32427', transport: 'socket'\nException in thread \"main\" NoNodeAvailableException[None of the configured nodes are available: [{#transport#-1}{10.16.6.18}{10.16.6.18:9200}]]\n\tat org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:290)\n\tat org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:207)\n\tat org.elasticsearch.client.transport.support.TransportProxyClient.execute(TransportProxyClient.java:55)\n\tat org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:288)\n\tat org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:359)\n\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)\n\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:56)\n\tat com.kugou.fanxing.admin.TestElasticSearch.main(TestElasticSearch.java:33)\n\n```\n\n如果连接端口写错，错误的使用了`http`的端口，最后也会报`NoNodeAvailableException`,但是他会先报个5S超时\n\n如果看到莫名其妙的超时，请检查端口是不是写错了\n\n啊嘻嘻嘻~","source":"_posts/ElasticSearch2-3-2-exception-NoNodeAvailableException.md","raw":"---\ntitle: ElasticSearch2.3.2报错NoNodeAvailableException\ndate: 2016-12-24 21:37:06\ntags:\n- ElasticSearch\n- java\ncategory:\n- ElasticSearch\n---\n\n\n# ElasticSearch2.3.2报错NoNodeAvailableException\n\n## elasticsearch版本\n\n版本：2.3.2\n\nJAVA客户端：2.3.2\n\n服务器环境：centos6.3\n\n## 错误描述\n\n使用java的client`transport`方式连接ES，报以下错误：\n\n\n```\n\n\n12:56:47.761 [main] WARN  org.elasticsearch.client.transport - [Curtis Connors] node {#transport#-1}{10.16.6.18}{10.16.6.18:9300} not part of the cluster Cluster [elasticsearch], ignoring...\nDisconnected from the target VM, address: '127.0.0.1:20962', transport: 'socket'\nException in thread \"main\" NoNodeAvailableException[None of the configured nodes are available: [{#transport#-1}{10.16.6.18}{10.16.6.18:9300}]]\n\tat org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:290)\n\tat org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:207)\n\tat org.elasticsearch.client.transport.support.TransportProxyClient.execute(TransportProxyClient.java:55)\n\tat org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:288)\n\tat org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:359)\n\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)\n\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:56)\n\tat com.kugou.fanxing.admin.TestElasticSearch.main(TestElasticSearch.java:33)\n\t\n```\n\n<!-- more -->\n\n连接代码如下：\n\n> 连接的代码为ElasticSearch官网文档给的例子，只是加上了构造query语句，原代码地址为 https://www.elastic.co/guide/en/elasticsearch/client/java-api/2.3/transport-client.html\n\n```java\n\npackage demo;\n\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.common.transport.InetSocketTransportAddress;\nimport org.elasticsearch.index.query.QueryBuilders;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\n\n/**\n * Created by williamyao on 2016/12/15.\n */\npublic class TestElasticSearch {\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\n\t\t\tSettings settings = Settings.settingsBuilder()\n\t\t\t\t\t.put(\"cluster.name\", \"elk_dev\").put(\"client.transport.sniff\", true).build();\n\t\t\tClient client = TransportClient.builder().\n\t\t\t// 就是这个setting,一开始忘记set进来\n\t\t\t//.settings(settings)\n\t\t\tbuild()\n\t\t\t\t\t.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(\"10.16.6.18\"), 9300));\n\n\t\t\tlong startTime = 1481644800000L;\n\t\t\tlong endTime = 1481731200000L;\n\n\t\t\tSearchResponse sr = client.prepareSearch()\n\t\t\t\t\t.setQuery(QueryBuilders.rangeQuery(\"ts\").from(startTime).to(endTime))\n\t\t\t\t\t.execute().actionGet();\n\t\t\tsr.getHits().hits();\n\t\t\tclient.close();\n\t\t} catch (UnknownHostException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n\n```\n\n## 排错思路\n\n说实话，好久没用ES，很多都又忘记了，真是学一次忘一次，挫败感极强，再加上这个错当时被情绪影响严重，导致我浪费不少时间\n\n1. \n\n看到这个错，首先是确认`ES`的服务到底正不正常，可以通过下面的请求：\n\n> http://127.0.0.1:9200/\n\n可以看到ES的版本信息，集群名字，那就说明ES服务倒没什么问题\n\n2. \n\n接下来，我选择去查看`9300`端口是不是有监听，因为刚才是用http服务的端口查看的，使用的是`9200`端口，而JAVA是连接socket端口的，也就是9300，只要是socket服务，那telnet肯定是万能的，直接telnet验证\n\n> telnet 10.16.6.18 9300\n\n这时候我发现不通，一连就被断开，这个是让我最误导的地方\n\n去查看ES启动日志，发现有成功`bound`到9300端口日志，但是telnet就是不通\n\n3.\n\n这时候我选择去下载一个2.3.2的ES，放到我本地运行，看下是不是可以telnet通，代码是不是可以连接上，结果是可以的，没问题\n\n4.\n\n因为我本地是windows，怕环境不同而无法重现问题，我又去线上机器，外网线上跑的相同版本ES，telnet试下，发现也是没问题！\n\n5.\n\n这样就比较蛋疼了，只能是认为那台测试虚拟机有问题了，这个问题就比较难查了，但这时候，我突然想到一个点，读文档的时候有个细节\n\n> Note that you have to set the cluster name if you use one different than \"elasticsearch\"\n\n这时候我才想起去检查下我的代码，看下我的clustername是不是设置对了，才发现，clustername是对了，但是setting没有set到TransportClient里面\n\n都是泪啊！！！！！低级失误！！！查了我这么久！！！！！\n\n\n## 总结\n\nES的问题有时候真的是挺难查的，特别是当自己写代码不仔细时，这种问题也是真的蛋疼\n\n当然也和我好久没用ES有关系\n\n写代码这东西，有时候也真是那句话，`无他，但手熟尔`\n\n还是要沉下心去排查，不能浮躁，当一个小时都找不到问题时，人会变得很燥，这时候很多细节都容易被忽略\n\n\n## 彩蛋\n\n```\n13:26:51.323 [elasticsearch[Vibro][generic][T#2]] INFO  org.elasticsearch.client.transport - [Vibro] failed to get local cluster state for {#transport#-1}{10.16.6.18}{10.16.6.18:9200}, disconnecting...\norg.elasticsearch.transport.ReceiveTimeoutTransportException: [][10.16.6.18:9200][cluster:monitor/state] request_id [0] timed out after [5001ms]\n\tat org.elasticsearch.transport.TransportService$TimeoutHandler.run(TransportService.java:679) [elasticsearch-2.3.2.jar:2.3.2]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]\n\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]\n13:26:51.323 [elasticsearch[Vibro][generic][T#2]] DEBUG org.elasticsearch.transport.netty - [Vibro] disconnecting from [{#transport#-1}{10.16.6.18}{10.16.6.18:9200}] due to explicit disconnect call\n13:26:51.326 [elasticsearch[Vibro][management][T#1]] DEBUG org.elasticsearch.transport.netty - [Vibro] connected to node [{#transport#-1}{10.16.6.18}{10.16.6.18:9200}]\nDisconnected from the target VM, address: '127.0.0.1:32427', transport: 'socket'\nException in thread \"main\" NoNodeAvailableException[None of the configured nodes are available: [{#transport#-1}{10.16.6.18}{10.16.6.18:9200}]]\n\tat org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:290)\n\tat org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:207)\n\tat org.elasticsearch.client.transport.support.TransportProxyClient.execute(TransportProxyClient.java:55)\n\tat org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:288)\n\tat org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:359)\n\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)\n\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:56)\n\tat com.kugou.fanxing.admin.TestElasticSearch.main(TestElasticSearch.java:33)\n\n```\n\n如果连接端口写错，错误的使用了`http`的端口，最后也会报`NoNodeAvailableException`,但是他会先报个5S超时\n\n如果看到莫名其妙的超时，请检查端口是不是写错了\n\n啊嘻嘻嘻~","slug":"ElasticSearch2-3-2-exception-NoNodeAvailableException","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbge900020a6tyiy2y97z","content":"<h1 id=\"ElasticSearch2-3-2报错NoNodeAvailableException\"><a href=\"#ElasticSearch2-3-2报错NoNodeAvailableException\" class=\"headerlink\" title=\"ElasticSearch2.3.2报错NoNodeAvailableException\"></a>ElasticSearch2.3.2报错NoNodeAvailableException</h1><h2 id=\"elasticsearch版本\"><a href=\"#elasticsearch版本\" class=\"headerlink\" title=\"elasticsearch版本\"></a>elasticsearch版本</h2><p>版本：2.3.2</p>\n<p>JAVA客户端：2.3.2</p>\n<p>服务器环境：centos6.3</p>\n<h2 id=\"错误描述\"><a href=\"#错误描述\" class=\"headerlink\" title=\"错误描述\"></a>错误描述</h2><p>使用java的client<code>transport</code>方式连接ES，报以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">12:56:47.761 [main] WARN  org.elasticsearch.client.transport - [Curtis Connors] node &#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9300&#125; not part of the cluster Cluster [elasticsearch], ignoring...</span><br><span class=\"line\">Disconnected from the target VM, address: &apos;127.0.0.1:20962&apos;, transport: &apos;socket&apos;</span><br><span class=\"line\">Exception in thread &quot;main&quot; NoNodeAvailableException[None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9300&#125;]]</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:290)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:207)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.support.TransportProxyClient.execute(TransportProxyClient.java:55)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:288)</span><br><span class=\"line\">\tat org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:359)</span><br><span class=\"line\">\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)</span><br><span class=\"line\">\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:56)</span><br><span class=\"line\">\tat com.kugou.fanxing.admin.TestElasticSearch.main(TestElasticSearch.java:33)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>连接代码如下：</p>\n<blockquote>\n<p>连接的代码为ElasticSearch官网文档给的例子，只是加上了构造query语句，原代码地址为 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/2.3/transport-client.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/client/java-api/2.3/transport-client.html</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.Client;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by williamyao on 2016/12/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestElasticSearch</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSettings settings = Settings.settingsBuilder()</span><br><span class=\"line\">\t\t\t\t\t.put(<span class=\"string\">\"cluster.name\"</span>, <span class=\"string\">\"elk_dev\"</span>).put(<span class=\"string\">\"client.transport.sniff\"</span>, <span class=\"keyword\">true</span>).build();</span><br><span class=\"line\">\t\t\tClient client = TransportClient.builder().</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 就是这个setting,一开始忘记set进来</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//.settings(settings)</span></span><br><span class=\"line\">\t\t\tbuild()</span><br><span class=\"line\">\t\t\t\t\t.addTransportAddress(<span class=\"keyword\">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class=\"string\">\"10.16.6.18\"</span>), <span class=\"number\">9300</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> startTime = <span class=\"number\">1481644800000L</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> endTime = <span class=\"number\">1481731200000L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSearchResponse sr = client.prepareSearch()</span><br><span class=\"line\">\t\t\t\t\t.setQuery(QueryBuilders.rangeQuery(<span class=\"string\">\"ts\"</span>).from(startTime).to(endTime))</span><br><span class=\"line\">\t\t\t\t\t.execute().actionGet();</span><br><span class=\"line\">\t\t\tsr.getHits().hits();</span><br><span class=\"line\">\t\t\tclient.close();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"排错思路\"><a href=\"#排错思路\" class=\"headerlink\" title=\"排错思路\"></a>排错思路</h2><p>说实话，好久没用ES，很多都又忘记了，真是学一次忘一次，挫败感极强，再加上这个错当时被情绪影响严重，导致我浪费不少时间</p>\n<ol>\n<li><p>看到这个错，首先是确认<code>ES</code>的服务到底正不正常，可以通过下面的请求：</p>\n</li>\n</ol>\n<blockquote>\n<p><a href=\"http://127.0.0.1:9200/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:9200/</a></p>\n</blockquote>\n<p>可以看到ES的版本信息，集群名字，那就说明ES服务倒没什么问题</p>\n<ol start=\"2\">\n<li><p>接下来，我选择去查看<code>9300</code>端口是不是有监听，因为刚才是用http服务的端口查看的，使用的是<code>9200</code>端口，而JAVA是连接socket端口的，也就是9300，只要是socket服务，那telnet肯定是万能的，直接telnet验证</p>\n</li>\n</ol>\n<blockquote>\n<p>telnet 10.16.6.18 9300</p>\n</blockquote>\n<p>这时候我发现不通，一连就被断开，这个是让我最误导的地方</p>\n<p>去查看ES启动日志，发现有成功<code>bound</code>到9300端口日志，但是telnet就是不通</p>\n<p>3.</p>\n<p>这时候我选择去下载一个2.3.2的ES，放到我本地运行，看下是不是可以telnet通，代码是不是可以连接上，结果是可以的，没问题</p>\n<p>4.</p>\n<p>因为我本地是windows，怕环境不同而无法重现问题，我又去线上机器，外网线上跑的相同版本ES，telnet试下，发现也是没问题！</p>\n<p>5.</p>\n<p>这样就比较蛋疼了，只能是认为那台测试虚拟机有问题了，这个问题就比较难查了，但这时候，我突然想到一个点，读文档的时候有个细节</p>\n<blockquote>\n<p>Note that you have to set the cluster name if you use one different than “elasticsearch”</p>\n</blockquote>\n<p>这时候我才想起去检查下我的代码，看下我的clustername是不是设置对了，才发现，clustername是对了，但是setting没有set到TransportClient里面</p>\n<p>都是泪啊！！！！！低级失误！！！查了我这么久！！！！！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>ES的问题有时候真的是挺难查的，特别是当自己写代码不仔细时，这种问题也是真的蛋疼</p>\n<p>当然也和我好久没用ES有关系</p>\n<p>写代码这东西，有时候也真是那句话，<code>无他，但手熟尔</code></p>\n<p>还是要沉下心去排查，不能浮躁，当一个小时都找不到问题时，人会变得很燥，这时候很多细节都容易被忽略</p>\n<h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13:26:51.323 [elasticsearch[Vibro][generic][T#2]] INFO  org.elasticsearch.client.transport - [Vibro] failed to get local cluster state for &#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9200&#125;, disconnecting...</span><br><span class=\"line\">org.elasticsearch.transport.ReceiveTimeoutTransportException: [][10.16.6.18:9200][cluster:monitor/state] request_id [0] timed out after [5001ms]</span><br><span class=\"line\">\tat org.elasticsearch.transport.TransportService$TimeoutHandler.run(TransportService.java:679) [elasticsearch-2.3.2.jar:2.3.2]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]</span><br><span class=\"line\">13:26:51.323 [elasticsearch[Vibro][generic][T#2]] DEBUG org.elasticsearch.transport.netty - [Vibro] disconnecting from [&#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9200&#125;] due to explicit disconnect call</span><br><span class=\"line\">13:26:51.326 [elasticsearch[Vibro][management][T#1]] DEBUG org.elasticsearch.transport.netty - [Vibro] connected to node [&#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9200&#125;]</span><br><span class=\"line\">Disconnected from the target VM, address: &apos;127.0.0.1:32427&apos;, transport: &apos;socket&apos;</span><br><span class=\"line\">Exception in thread &quot;main&quot; NoNodeAvailableException[None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9200&#125;]]</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:290)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:207)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.support.TransportProxyClient.execute(TransportProxyClient.java:55)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:288)</span><br><span class=\"line\">\tat org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:359)</span><br><span class=\"line\">\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)</span><br><span class=\"line\">\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:56)</span><br><span class=\"line\">\tat com.kugou.fanxing.admin.TestElasticSearch.main(TestElasticSearch.java:33)</span><br></pre></td></tr></table></figure>\n<p>如果连接端口写错，错误的使用了<code>http</code>的端口，最后也会报<code>NoNodeAvailableException</code>,但是他会先报个5S超时</p>\n<p>如果看到莫名其妙的超时，请检查端口是不是写错了</p>\n<p>啊嘻嘻嘻~</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"ElasticSearch2-3-2报错NoNodeAvailableException\"><a href=\"#ElasticSearch2-3-2报错NoNodeAvailableException\" class=\"headerlink\" title=\"ElasticSearch2.3.2报错NoNodeAvailableException\"></a>ElasticSearch2.3.2报错NoNodeAvailableException</h1><h2 id=\"elasticsearch版本\"><a href=\"#elasticsearch版本\" class=\"headerlink\" title=\"elasticsearch版本\"></a>elasticsearch版本</h2><p>版本：2.3.2</p>\n<p>JAVA客户端：2.3.2</p>\n<p>服务器环境：centos6.3</p>\n<h2 id=\"错误描述\"><a href=\"#错误描述\" class=\"headerlink\" title=\"错误描述\"></a>错误描述</h2><p>使用java的client<code>transport</code>方式连接ES，报以下错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">12:56:47.761 [main] WARN  org.elasticsearch.client.transport - [Curtis Connors] node &#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9300&#125; not part of the cluster Cluster [elasticsearch], ignoring...</span><br><span class=\"line\">Disconnected from the target VM, address: &apos;127.0.0.1:20962&apos;, transport: &apos;socket&apos;</span><br><span class=\"line\">Exception in thread &quot;main&quot; NoNodeAvailableException[None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9300&#125;]]</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:290)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:207)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.support.TransportProxyClient.execute(TransportProxyClient.java:55)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:288)</span><br><span class=\"line\">\tat org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:359)</span><br><span class=\"line\">\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)</span><br><span class=\"line\">\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:56)</span><br><span class=\"line\">\tat com.kugou.fanxing.admin.TestElasticSearch.main(TestElasticSearch.java:33)</span><br></pre></td></tr></table></figure>","more":"<p>连接代码如下：</p>\n<blockquote>\n<p>连接的代码为ElasticSearch官网文档给的例子，只是加上了构造query语句，原代码地址为 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/2.3/transport-client.html\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/guide/en/elasticsearch/client/java-api/2.3/transport-client.html</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.Client;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.client.transport.TransportClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.settings.Settings;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by williamyao on 2016/12/15.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestElasticSearch</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSettings settings = Settings.settingsBuilder()</span><br><span class=\"line\">\t\t\t\t\t.put(<span class=\"string\">\"cluster.name\"</span>, <span class=\"string\">\"elk_dev\"</span>).put(<span class=\"string\">\"client.transport.sniff\"</span>, <span class=\"keyword\">true</span>).build();</span><br><span class=\"line\">\t\t\tClient client = TransportClient.builder().</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 就是这个setting,一开始忘记set进来</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//.settings(settings)</span></span><br><span class=\"line\">\t\t\tbuild()</span><br><span class=\"line\">\t\t\t\t\t.addTransportAddress(<span class=\"keyword\">new</span> InetSocketTransportAddress(InetAddress.getByName(<span class=\"string\">\"10.16.6.18\"</span>), <span class=\"number\">9300</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> startTime = <span class=\"number\">1481644800000L</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> endTime = <span class=\"number\">1481731200000L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tSearchResponse sr = client.prepareSearch()</span><br><span class=\"line\">\t\t\t\t\t.setQuery(QueryBuilders.rangeQuery(<span class=\"string\">\"ts\"</span>).from(startTime).to(endTime))</span><br><span class=\"line\">\t\t\t\t\t.execute().actionGet();</span><br><span class=\"line\">\t\t\tsr.getHits().hits();</span><br><span class=\"line\">\t\t\tclient.close();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"排错思路\"><a href=\"#排错思路\" class=\"headerlink\" title=\"排错思路\"></a>排错思路</h2><p>说实话，好久没用ES，很多都又忘记了，真是学一次忘一次，挫败感极强，再加上这个错当时被情绪影响严重，导致我浪费不少时间</p>\n<ol>\n<li><p>看到这个错，首先是确认<code>ES</code>的服务到底正不正常，可以通过下面的请求：</p>\n</li>\n</ol>\n<blockquote>\n<p><a href=\"http://127.0.0.1:9200/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:9200/</a></p>\n</blockquote>\n<p>可以看到ES的版本信息，集群名字，那就说明ES服务倒没什么问题</p>\n<ol start=\"2\">\n<li><p>接下来，我选择去查看<code>9300</code>端口是不是有监听，因为刚才是用http服务的端口查看的，使用的是<code>9200</code>端口，而JAVA是连接socket端口的，也就是9300，只要是socket服务，那telnet肯定是万能的，直接telnet验证</p>\n</li>\n</ol>\n<blockquote>\n<p>telnet 10.16.6.18 9300</p>\n</blockquote>\n<p>这时候我发现不通，一连就被断开，这个是让我最误导的地方</p>\n<p>去查看ES启动日志，发现有成功<code>bound</code>到9300端口日志，但是telnet就是不通</p>\n<p>3.</p>\n<p>这时候我选择去下载一个2.3.2的ES，放到我本地运行，看下是不是可以telnet通，代码是不是可以连接上，结果是可以的，没问题</p>\n<p>4.</p>\n<p>因为我本地是windows，怕环境不同而无法重现问题，我又去线上机器，外网线上跑的相同版本ES，telnet试下，发现也是没问题！</p>\n<p>5.</p>\n<p>这样就比较蛋疼了，只能是认为那台测试虚拟机有问题了，这个问题就比较难查了，但这时候，我突然想到一个点，读文档的时候有个细节</p>\n<blockquote>\n<p>Note that you have to set the cluster name if you use one different than “elasticsearch”</p>\n</blockquote>\n<p>这时候我才想起去检查下我的代码，看下我的clustername是不是设置对了，才发现，clustername是对了，但是setting没有set到TransportClient里面</p>\n<p>都是泪啊！！！！！低级失误！！！查了我这么久！！！！！</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>ES的问题有时候真的是挺难查的，特别是当自己写代码不仔细时，这种问题也是真的蛋疼</p>\n<p>当然也和我好久没用ES有关系</p>\n<p>写代码这东西，有时候也真是那句话，<code>无他，但手熟尔</code></p>\n<p>还是要沉下心去排查，不能浮躁，当一个小时都找不到问题时，人会变得很燥，这时候很多细节都容易被忽略</p>\n<h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13:26:51.323 [elasticsearch[Vibro][generic][T#2]] INFO  org.elasticsearch.client.transport - [Vibro] failed to get local cluster state for &#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9200&#125;, disconnecting...</span><br><span class=\"line\">org.elasticsearch.transport.ReceiveTimeoutTransportException: [][10.16.6.18:9200][cluster:monitor/state] request_id [0] timed out after [5001ms]</span><br><span class=\"line\">\tat org.elasticsearch.transport.TransportService$TimeoutHandler.run(TransportService.java:679) [elasticsearch-2.3.2.jar:2.3.2]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]</span><br><span class=\"line\">13:26:51.323 [elasticsearch[Vibro][generic][T#2]] DEBUG org.elasticsearch.transport.netty - [Vibro] disconnecting from [&#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9200&#125;] due to explicit disconnect call</span><br><span class=\"line\">13:26:51.326 [elasticsearch[Vibro][management][T#1]] DEBUG org.elasticsearch.transport.netty - [Vibro] connected to node [&#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9200&#125;]</span><br><span class=\"line\">Disconnected from the target VM, address: &apos;127.0.0.1:32427&apos;, transport: &apos;socket&apos;</span><br><span class=\"line\">Exception in thread &quot;main&quot; NoNodeAvailableException[None of the configured nodes are available: [&#123;#transport#-1&#125;&#123;10.16.6.18&#125;&#123;10.16.6.18:9200&#125;]]</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClientNodesService.ensureNodesAreAvailable(TransportClientNodesService.java:290)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:207)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.support.TransportProxyClient.execute(TransportProxyClient.java:55)</span><br><span class=\"line\">\tat org.elasticsearch.client.transport.TransportClient.doExecute(TransportClient.java:288)</span><br><span class=\"line\">\tat org.elasticsearch.client.support.AbstractClient.execute(AbstractClient.java:359)</span><br><span class=\"line\">\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:86)</span><br><span class=\"line\">\tat org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:56)</span><br><span class=\"line\">\tat com.kugou.fanxing.admin.TestElasticSearch.main(TestElasticSearch.java:33)</span><br></pre></td></tr></table></figure>\n<p>如果连接端口写错，错误的使用了<code>http</code>的端口，最后也会报<code>NoNodeAvailableException</code>,但是他会先报个5S超时</p>\n<p>如果看到莫名其妙的超时，请检查端口是不是写错了</p>\n<p>啊嘻嘻嘻~</p>"},{"title":"Error:java: 无效的目标发行版: 1.8","date":"2016-09-25T15:48:34.000Z","_content":"\n今天在家里的机器编译spring-boot的代码，跑其中一些samples的项目的时候，报下面这个错误\n\n`Error:java: 无效的目标发行版: 1.8`\n\n<!--more-->\n\n我使用的IDE是`IDEA`，我本机的`JDK`版本是1.7，在把`IDEA`的编译器，和项目structure的jdk都确定设置成1.7之后，还是报这个错误，果断感觉是`maven`的问题\n\n这个samples是一个maven项目，估计maven项目的编译都依赖他的编译插件，我在pom文件中没有找到编译插件的设置项，估计就默认是1.8了，然后我本机又没有1.8，所以就导致编译失败\n\n```\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.7</source>\n                    <target>1.7</target>\n                </configuration>\n            </plugin>\n\n```\n\n在pom文件中加入上面的maven插件配置之后解决此问题。","source":"_posts/Error-java-javacTask-source-release-8-requires-target-release-1-8.md","raw":"---\ntitle: \"Error:java: 无效的目标发行版: 1.8\"\ndate: 2016-09-25 23:48:34\ntags:\n- java\ncategory:\n- java\n- maven\n---\n\n今天在家里的机器编译spring-boot的代码，跑其中一些samples的项目的时候，报下面这个错误\n\n`Error:java: 无效的目标发行版: 1.8`\n\n<!--more-->\n\n我使用的IDE是`IDEA`，我本机的`JDK`版本是1.7，在把`IDEA`的编译器，和项目structure的jdk都确定设置成1.7之后，还是报这个错误，果断感觉是`maven`的问题\n\n这个samples是一个maven项目，估计maven项目的编译都依赖他的编译插件，我在pom文件中没有找到编译插件的设置项，估计就默认是1.8了，然后我本机又没有1.8，所以就导致编译失败\n\n```\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.7</source>\n                    <target>1.7</target>\n                </configuration>\n            </plugin>\n\n```\n\n在pom文件中加入上面的maven插件配置之后解决此问题。","slug":"Error-java-javacTask-source-release-8-requires-target-release-1-8","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbged00050a6tokveg4h0","content":"<p>今天在家里的机器编译spring-boot的代码，跑其中一些samples的项目的时候，报下面这个错误</p>\n<p><code>Error:java: 无效的目标发行版: 1.8</code></p>\n<a id=\"more\"></a>\n<p>我使用的IDE是<code>IDEA</code>，我本机的<code>JDK</code>版本是1.7，在把<code>IDEA</code>的编译器，和项目structure的jdk都确定设置成1.7之后，还是报这个错误，果断感觉是<code>maven</code>的问题</p>\n<p>这个samples是一个maven项目，估计maven项目的编译都依赖他的编译插件，我在pom文件中没有找到编译插件的设置项，估计就默认是1.8了，然后我本机又没有1.8，所以就导致编译失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;source&gt;1.7&lt;/source&gt;</span><br><span class=\"line\">        &lt;target&gt;1.7&lt;/target&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>在pom文件中加入上面的maven插件配置之后解决此问题。</p>\n","site":{"data":{}},"excerpt":"<p>今天在家里的机器编译spring-boot的代码，跑其中一些samples的项目的时候，报下面这个错误</p>\n<p><code>Error:java: 无效的目标发行版: 1.8</code></p>","more":"<p>我使用的IDE是<code>IDEA</code>，我本机的<code>JDK</code>版本是1.7，在把<code>IDEA</code>的编译器，和项目structure的jdk都确定设置成1.7之后，还是报这个错误，果断感觉是<code>maven</code>的问题</p>\n<p>这个samples是一个maven项目，估计maven项目的编译都依赖他的编译插件，我在pom文件中没有找到编译插件的设置项，估计就默认是1.8了，然后我本机又没有1.8，所以就导致编译失败</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;plugin&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;configuration&gt;</span><br><span class=\"line\">        &lt;source&gt;1.7&lt;/source&gt;</span><br><span class=\"line\">        &lt;target&gt;1.7&lt;/target&gt;</span><br><span class=\"line\">    &lt;/configuration&gt;</span><br><span class=\"line\">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>\n<p>在pom文件中加入上面的maven插件配置之后解决此问题。</p>"},{"title":"ElasticSearch2.3.2十分钟上手","date":"2016-12-24T13:34:27.000Z","_content":"\n\n# ElasticSearch2.3.2十分钟上手\n\n> 工作以来遇到很多次需要使用到ElasticSearch，主要用来做一些需要接近实时获取到查询结果的需求，或者是一些在mysql无法处理的复杂查询的非常大量级的数据，根据经验来说，mysql单表数据达到>5千万，想要在ms级查询出索引优化不是很好的数据，就比较难了。而ES是可以轻松做到的。当然这只是一个经验之谈。\n\n<!-- more -->\n\n## 0x00\n\nES的文档写的真的很好，英文稍微还可以的人，都可以直接去看英文，不是很难理解。章节也分的好清晰，可以很容易找到。要说不好的地方，可能也就是从官网找的话，页面目录层级比较深，有时候会不太好找。我这里写的内容，主要是作为我自己多次间隔很长时间，重新使用ES的一个快速回忆记录。这个十分钟可以快速帮助你，也帮助我自己找回ES的最基础概念和使用的记忆。说实话我的记性真的是不怎么好。\n\n当然你没接触过ES，也是没有问题的，这篇文章可以从安装到使用，一步一步教你上手。\n\n我个人是使用`JAVA语言`做开发的，ES也支持各种客户端API，但是这篇文章我都使用`JAVA`和标准`HTTP RESTFUL`做例子。\n\n\n\n## 下载安装\n\nelassticsearch包含好多产品，和spring一样，下面这个是elasticsearch的链接\n\n官网：https://www.elastic.co/products/elasticsearch\n\n\n下载地址：https://www.elastic.co/downloads/elasticsearch\n\nwindows下选择zip包，linux就tar包\n\n其实文件都是一样的，都包含`bat`也包含`sh`脚本\n\n只不过tar包在linux下解压比较方便\n\n## 启动\n\nES就像`mysql`一样，也类似一个数据库服务，我们要使用需要先启动\n\n在bin目录下，`elasticsearch.bat`使用这个脚本启动\n\nlinux是`elasticsearch`\n\n这样会以默认的端口启动，`http`访问端口是9200，`socket`访问端口是9300\n\n\n测试是否启动成功：\n\n`http://127.0.0.1:9200/`\n\n成功启动，可以看到下面这些信息\n\n```\n\n{\n  \"name\" : \"DEV_10_16_6_18\",\n  \"cluster_name\" : \"elk_dev\",\n  \"version\" : {\n    \"number\" : \"2.3.2\",\n    \"build_hash\" : \"b9e4a6acad4008027e4038f6abed7f7dba346f94\",\n    \"build_timestamp\" : \"2016-04-21T16:03:47Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.5.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n\n```\n\n## 端口问题\n\nES会对外提供两个端口的服务：HTTP端口，socket端口\n\nHTTP端口可以在配置文件中使用\n\n\n## 基本概念\n\n启动成功了，我们还需要知道一些基础概念\n\n**index**:`索引`，ES的顶级存储单位，我们所有的数据都必须存储到一个index中，如果熟悉mysql，我们可以认为index就是mysql中的一个`database`，我们要使用mysql，我们先要建一个库，ES里是先要建一个index\n\n**type**:`类型`，索引下的存储单位，一个index下可以存在任意多的type，对应mysql中，就想一个database下的表，但是这个表结构并不是固定的，比如都叫`book`的type不一定都要有`name`这个字段。但是为了不反人类，最好不要这么设计，还是统一type的结构会比较好\n\n**shard**:`分片`，ES是个分布式的引擎，数据是分片存储的，每个index都分片存储在不同的shard下面，默认启动是5个shard\n\n**replica**：`拷贝`，为了保证系统的可用性，ES的每个shard还有一个replica，相当于每份数据都有一份备份\n\n**http restful API**:ES提供的基于HTTP协议的，restful风格的API，可用直接在浏览器调用（但是浏览器只支持get请求，其他post,put需要使用插件），或者也可以在linux上使用`curl`访问，非常方便\n\n**JAVA API**：ES就是使用JAVA开发的，所以和JAVA集成是最方便的，提供了非常完善的JAVA API以进行各种查询，聚合调用，如果你的项目使用JAVA的话，那就可以直接使用JAVA API直接访问ES服务，它和使用HTTP访问的区别，主要是基于协议不太一样，JAVA API直接建立一个socket连接到某个节点上，建立一个`transport`进行访问数据\n\n## 基本操作 CRUD 增删改查\n\n```\n// 增或改\n\ncurl -XPUT 'http://127.0.0.1:9200/twitter/tweet/1' -d '\n{\n    \"user\": \"kimchy\",\n    \"postDate\": \"2009-11-15T13:12:00\",\n    \"message\": \"Trying out Elasticsearch, so far so good?\"\n}'\n\n// 查\ncurl -XGET 'http://127.0.0.1:9200/twitter/tweet/1?pretty=true'\n\n// 删\ncurl -XDELETE 'http://127.0.0.1:9200/twitter/tweet/1?pretty=true'\n\n\n```\n\n## 搜索\n\n```\n//获取用户名为kimchy的tweet\ncurl -XGET 'http://127.0.0.1:9200/twitter/tweet/_search?q=user:kimchy&pretty=true'\n\n//获取twitter/tweet下面的所有数据，默认只会显示前十条，或者前5条\ncurl -XGET 'http://127.0.0.1:9200/twitter/tweet/_search?pretty=true'\n\n```\n\n注意：\n\nES的搜索，最大只能搜索前2W条数据，如果需要搜索2W条以后的数据，需要使用到scroll\n\n也就是说，在ES里面，2W条以内可以使用from,size来分页查询，但是超出2W条就不行了，而且是from+size<=2W,超出就会报错，在我另一篇文章里有说明\n\n## 彩蛋\n\n最后介绍一个神器，写ES的查询语句，复杂的话是很蛋疼的，需要花比较多时间，还不一定能写对，但是大家对`sql语句`一定都很数据，那下面就有一个工具，可以把`sql语句`转换成对于的ES查询语句，爽飞！！\n\n名字叫：**Elasticsearch-sql**\n\n地址：https://github.com/NLPchina/elasticsearch-sql\n","source":"_posts/10-minutes-learn-ElasticSearch.md","raw":"---\ntitle: ElasticSearch2.3.2十分钟上手\ndate: 2016-12-24 21:34:27\ntags:\n- ElasticSearch\ncategory:\n- ElasticSearch\n---\n\n\n# ElasticSearch2.3.2十分钟上手\n\n> 工作以来遇到很多次需要使用到ElasticSearch，主要用来做一些需要接近实时获取到查询结果的需求，或者是一些在mysql无法处理的复杂查询的非常大量级的数据，根据经验来说，mysql单表数据达到>5千万，想要在ms级查询出索引优化不是很好的数据，就比较难了。而ES是可以轻松做到的。当然这只是一个经验之谈。\n\n<!-- more -->\n\n## 0x00\n\nES的文档写的真的很好，英文稍微还可以的人，都可以直接去看英文，不是很难理解。章节也分的好清晰，可以很容易找到。要说不好的地方，可能也就是从官网找的话，页面目录层级比较深，有时候会不太好找。我这里写的内容，主要是作为我自己多次间隔很长时间，重新使用ES的一个快速回忆记录。这个十分钟可以快速帮助你，也帮助我自己找回ES的最基础概念和使用的记忆。说实话我的记性真的是不怎么好。\n\n当然你没接触过ES，也是没有问题的，这篇文章可以从安装到使用，一步一步教你上手。\n\n我个人是使用`JAVA语言`做开发的，ES也支持各种客户端API，但是这篇文章我都使用`JAVA`和标准`HTTP RESTFUL`做例子。\n\n\n\n## 下载安装\n\nelassticsearch包含好多产品，和spring一样，下面这个是elasticsearch的链接\n\n官网：https://www.elastic.co/products/elasticsearch\n\n\n下载地址：https://www.elastic.co/downloads/elasticsearch\n\nwindows下选择zip包，linux就tar包\n\n其实文件都是一样的，都包含`bat`也包含`sh`脚本\n\n只不过tar包在linux下解压比较方便\n\n## 启动\n\nES就像`mysql`一样，也类似一个数据库服务，我们要使用需要先启动\n\n在bin目录下，`elasticsearch.bat`使用这个脚本启动\n\nlinux是`elasticsearch`\n\n这样会以默认的端口启动，`http`访问端口是9200，`socket`访问端口是9300\n\n\n测试是否启动成功：\n\n`http://127.0.0.1:9200/`\n\n成功启动，可以看到下面这些信息\n\n```\n\n{\n  \"name\" : \"DEV_10_16_6_18\",\n  \"cluster_name\" : \"elk_dev\",\n  \"version\" : {\n    \"number\" : \"2.3.2\",\n    \"build_hash\" : \"b9e4a6acad4008027e4038f6abed7f7dba346f94\",\n    \"build_timestamp\" : \"2016-04-21T16:03:47Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.5.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n\n```\n\n## 端口问题\n\nES会对外提供两个端口的服务：HTTP端口，socket端口\n\nHTTP端口可以在配置文件中使用\n\n\n## 基本概念\n\n启动成功了，我们还需要知道一些基础概念\n\n**index**:`索引`，ES的顶级存储单位，我们所有的数据都必须存储到一个index中，如果熟悉mysql，我们可以认为index就是mysql中的一个`database`，我们要使用mysql，我们先要建一个库，ES里是先要建一个index\n\n**type**:`类型`，索引下的存储单位，一个index下可以存在任意多的type，对应mysql中，就想一个database下的表，但是这个表结构并不是固定的，比如都叫`book`的type不一定都要有`name`这个字段。但是为了不反人类，最好不要这么设计，还是统一type的结构会比较好\n\n**shard**:`分片`，ES是个分布式的引擎，数据是分片存储的，每个index都分片存储在不同的shard下面，默认启动是5个shard\n\n**replica**：`拷贝`，为了保证系统的可用性，ES的每个shard还有一个replica，相当于每份数据都有一份备份\n\n**http restful API**:ES提供的基于HTTP协议的，restful风格的API，可用直接在浏览器调用（但是浏览器只支持get请求，其他post,put需要使用插件），或者也可以在linux上使用`curl`访问，非常方便\n\n**JAVA API**：ES就是使用JAVA开发的，所以和JAVA集成是最方便的，提供了非常完善的JAVA API以进行各种查询，聚合调用，如果你的项目使用JAVA的话，那就可以直接使用JAVA API直接访问ES服务，它和使用HTTP访问的区别，主要是基于协议不太一样，JAVA API直接建立一个socket连接到某个节点上，建立一个`transport`进行访问数据\n\n## 基本操作 CRUD 增删改查\n\n```\n// 增或改\n\ncurl -XPUT 'http://127.0.0.1:9200/twitter/tweet/1' -d '\n{\n    \"user\": \"kimchy\",\n    \"postDate\": \"2009-11-15T13:12:00\",\n    \"message\": \"Trying out Elasticsearch, so far so good?\"\n}'\n\n// 查\ncurl -XGET 'http://127.0.0.1:9200/twitter/tweet/1?pretty=true'\n\n// 删\ncurl -XDELETE 'http://127.0.0.1:9200/twitter/tweet/1?pretty=true'\n\n\n```\n\n## 搜索\n\n```\n//获取用户名为kimchy的tweet\ncurl -XGET 'http://127.0.0.1:9200/twitter/tweet/_search?q=user:kimchy&pretty=true'\n\n//获取twitter/tweet下面的所有数据，默认只会显示前十条，或者前5条\ncurl -XGET 'http://127.0.0.1:9200/twitter/tweet/_search?pretty=true'\n\n```\n\n注意：\n\nES的搜索，最大只能搜索前2W条数据，如果需要搜索2W条以后的数据，需要使用到scroll\n\n也就是说，在ES里面，2W条以内可以使用from,size来分页查询，但是超出2W条就不行了，而且是from+size<=2W,超出就会报错，在我另一篇文章里有说明\n\n## 彩蛋\n\n最后介绍一个神器，写ES的查询语句，复杂的话是很蛋疼的，需要花比较多时间，还不一定能写对，但是大家对`sql语句`一定都很数据，那下面就有一个工具，可以把`sql语句`转换成对于的ES查询语句，爽飞！！\n\n名字叫：**Elasticsearch-sql**\n\n地址：https://github.com/NLPchina/elasticsearch-sql\n","slug":"10-minutes-learn-ElasticSearch","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgee00060a6tcy9m0uaa","content":"<h1 id=\"ElasticSearch2-3-2十分钟上手\"><a href=\"#ElasticSearch2-3-2十分钟上手\" class=\"headerlink\" title=\"ElasticSearch2.3.2十分钟上手\"></a>ElasticSearch2.3.2十分钟上手</h1><blockquote>\n<p>工作以来遇到很多次需要使用到ElasticSearch，主要用来做一些需要接近实时获取到查询结果的需求，或者是一些在mysql无法处理的复杂查询的非常大量级的数据，根据经验来说，mysql单表数据达到&gt;5千万，想要在ms级查询出索引优化不是很好的数据，就比较难了。而ES是可以轻松做到的。当然这只是一个经验之谈。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>ES的文档写的真的很好，英文稍微还可以的人，都可以直接去看英文，不是很难理解。章节也分的好清晰，可以很容易找到。要说不好的地方，可能也就是从官网找的话，页面目录层级比较深，有时候会不太好找。我这里写的内容，主要是作为我自己多次间隔很长时间，重新使用ES的一个快速回忆记录。这个十分钟可以快速帮助你，也帮助我自己找回ES的最基础概念和使用的记忆。说实话我的记性真的是不怎么好。</p>\n<p>当然你没接触过ES，也是没有问题的，这篇文章可以从安装到使用，一步一步教你上手。</p>\n<p>我个人是使用<code>JAVA语言</code>做开发的，ES也支持各种客户端API，但是这篇文章我都使用<code>JAVA</code>和标准<code>HTTP RESTFUL</code>做例子。</p>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><p>elassticsearch包含好多产品，和spring一样，下面这个是elasticsearch的链接</p>\n<p>官网：<a href=\"https://www.elastic.co/products/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/products/elasticsearch</a></p>\n<p>下载地址：<a href=\"https://www.elastic.co/downloads/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/downloads/elasticsearch</a></p>\n<p>windows下选择zip包，linux就tar包</p>\n<p>其实文件都是一样的，都包含<code>bat</code>也包含<code>sh</code>脚本</p>\n<p>只不过tar包在linux下解压比较方便</p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>ES就像<code>mysql</code>一样，也类似一个数据库服务，我们要使用需要先启动</p>\n<p>在bin目录下，<code>elasticsearch.bat</code>使用这个脚本启动</p>\n<p>linux是<code>elasticsearch</code></p>\n<p>这样会以默认的端口启动，<code>http</code>访问端口是9200，<code>socket</code>访问端口是9300</p>\n<p>测试是否启动成功：</p>\n<p><code>http://127.0.0.1:9200/</code></p>\n<p>成功启动，可以看到下面这些信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;DEV_10_16_6_18&quot;,</span><br><span class=\"line\">  &quot;cluster_name&quot; : &quot;elk_dev&quot;,</span><br><span class=\"line\">  &quot;version&quot; : &#123;</span><br><span class=\"line\">    &quot;number&quot; : &quot;2.3.2&quot;,</span><br><span class=\"line\">    &quot;build_hash&quot; : &quot;b9e4a6acad4008027e4038f6abed7f7dba346f94&quot;,</span><br><span class=\"line\">    &quot;build_timestamp&quot; : &quot;2016-04-21T16:03:47Z&quot;,</span><br><span class=\"line\">    &quot;build_snapshot&quot; : false,</span><br><span class=\"line\">    &quot;lucene_version&quot; : &quot;5.5.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"端口问题\"><a href=\"#端口问题\" class=\"headerlink\" title=\"端口问题\"></a>端口问题</h2><p>ES会对外提供两个端口的服务：HTTP端口，socket端口</p>\n<p>HTTP端口可以在配置文件中使用</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>启动成功了，我们还需要知道一些基础概念</p>\n<p><strong>index</strong>:<code>索引</code>，ES的顶级存储单位，我们所有的数据都必须存储到一个index中，如果熟悉mysql，我们可以认为index就是mysql中的一个<code>database</code>，我们要使用mysql，我们先要建一个库，ES里是先要建一个index</p>\n<p><strong>type</strong>:<code>类型</code>，索引下的存储单位，一个index下可以存在任意多的type，对应mysql中，就想一个database下的表，但是这个表结构并不是固定的，比如都叫<code>book</code>的type不一定都要有<code>name</code>这个字段。但是为了不反人类，最好不要这么设计，还是统一type的结构会比较好</p>\n<p><strong>shard</strong>:<code>分片</code>，ES是个分布式的引擎，数据是分片存储的，每个index都分片存储在不同的shard下面，默认启动是5个shard</p>\n<p><strong>replica</strong>：<code>拷贝</code>，为了保证系统的可用性，ES的每个shard还有一个replica，相当于每份数据都有一份备份</p>\n<p><strong>http restful API</strong>:ES提供的基于HTTP协议的，restful风格的API，可用直接在浏览器调用（但是浏览器只支持get请求，其他post,put需要使用插件），或者也可以在linux上使用<code>curl</code>访问，非常方便</p>\n<p><strong>JAVA API</strong>：ES就是使用JAVA开发的，所以和JAVA集成是最方便的，提供了非常完善的JAVA API以进行各种查询，聚合调用，如果你的项目使用JAVA的话，那就可以直接使用JAVA API直接访问ES服务，它和使用HTTP访问的区别，主要是基于协议不太一样，JAVA API直接建立一个socket连接到某个节点上，建立一个<code>transport</code>进行访问数据</p>\n<h2 id=\"基本操作-CRUD-增删改查\"><a href=\"#基本操作-CRUD-增删改查\" class=\"headerlink\" title=\"基本操作 CRUD 增删改查\"></a>基本操作 CRUD 增删改查</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 增或改</span><br><span class=\"line\"></span><br><span class=\"line\">curl -XPUT &apos;http://127.0.0.1:9200/twitter/tweet/1&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;user&quot;: &quot;kimchy&quot;,</span><br><span class=\"line\">    &quot;postDate&quot;: &quot;2009-11-15T13:12:00&quot;,</span><br><span class=\"line\">    &quot;message&quot;: &quot;Trying out Elasticsearch, so far so good?&quot;</span><br><span class=\"line\">&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 查</span><br><span class=\"line\">curl -XGET &apos;http://127.0.0.1:9200/twitter/tweet/1?pretty=true&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 删</span><br><span class=\"line\">curl -XDELETE &apos;http://127.0.0.1:9200/twitter/tweet/1?pretty=true&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取用户名为kimchy的tweet</span><br><span class=\"line\">curl -XGET &apos;http://127.0.0.1:9200/twitter/tweet/_search?q=user:kimchy&amp;pretty=true&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取twitter/tweet下面的所有数据，默认只会显示前十条，或者前5条</span><br><span class=\"line\">curl -XGET &apos;http://127.0.0.1:9200/twitter/tweet/_search?pretty=true&apos;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<p>ES的搜索，最大只能搜索前2W条数据，如果需要搜索2W条以后的数据，需要使用到scroll</p>\n<p>也就是说，在ES里面，2W条以内可以使用from,size来分页查询，但是超出2W条就不行了，而且是from+size&lt;=2W,超出就会报错，在我另一篇文章里有说明</p>\n<h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><p>最后介绍一个神器，写ES的查询语句，复杂的话是很蛋疼的，需要花比较多时间，还不一定能写对，但是大家对<code>sql语句</code>一定都很数据，那下面就有一个工具，可以把<code>sql语句</code>转换成对于的ES查询语句，爽飞！！</p>\n<p>名字叫：<strong>Elasticsearch-sql</strong></p>\n<p>地址：<a href=\"https://github.com/NLPchina/elasticsearch-sql\" target=\"_blank\" rel=\"noopener\">https://github.com/NLPchina/elasticsearch-sql</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"ElasticSearch2-3-2十分钟上手\"><a href=\"#ElasticSearch2-3-2十分钟上手\" class=\"headerlink\" title=\"ElasticSearch2.3.2十分钟上手\"></a>ElasticSearch2.3.2十分钟上手</h1><blockquote>\n<p>工作以来遇到很多次需要使用到ElasticSearch，主要用来做一些需要接近实时获取到查询结果的需求，或者是一些在mysql无法处理的复杂查询的非常大量级的数据，根据经验来说，mysql单表数据达到&gt;5千万，想要在ms级查询出索引优化不是很好的数据，就比较难了。而ES是可以轻松做到的。当然这只是一个经验之谈。</p>\n</blockquote>","more":"<h2 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h2><p>ES的文档写的真的很好，英文稍微还可以的人，都可以直接去看英文，不是很难理解。章节也分的好清晰，可以很容易找到。要说不好的地方，可能也就是从官网找的话，页面目录层级比较深，有时候会不太好找。我这里写的内容，主要是作为我自己多次间隔很长时间，重新使用ES的一个快速回忆记录。这个十分钟可以快速帮助你，也帮助我自己找回ES的最基础概念和使用的记忆。说实话我的记性真的是不怎么好。</p>\n<p>当然你没接触过ES，也是没有问题的，这篇文章可以从安装到使用，一步一步教你上手。</p>\n<p>我个人是使用<code>JAVA语言</code>做开发的，ES也支持各种客户端API，但是这篇文章我都使用<code>JAVA</code>和标准<code>HTTP RESTFUL</code>做例子。</p>\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><p>elassticsearch包含好多产品，和spring一样，下面这个是elasticsearch的链接</p>\n<p>官网：<a href=\"https://www.elastic.co/products/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/products/elasticsearch</a></p>\n<p>下载地址：<a href=\"https://www.elastic.co/downloads/elasticsearch\" target=\"_blank\" rel=\"noopener\">https://www.elastic.co/downloads/elasticsearch</a></p>\n<p>windows下选择zip包，linux就tar包</p>\n<p>其实文件都是一样的，都包含<code>bat</code>也包含<code>sh</code>脚本</p>\n<p>只不过tar包在linux下解压比较方便</p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>ES就像<code>mysql</code>一样，也类似一个数据库服务，我们要使用需要先启动</p>\n<p>在bin目录下，<code>elasticsearch.bat</code>使用这个脚本启动</p>\n<p>linux是<code>elasticsearch</code></p>\n<p>这样会以默认的端口启动，<code>http</code>访问端口是9200，<code>socket</code>访问端口是9300</p>\n<p>测试是否启动成功：</p>\n<p><code>http://127.0.0.1:9200/</code></p>\n<p>成功启动，可以看到下面这些信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;DEV_10_16_6_18&quot;,</span><br><span class=\"line\">  &quot;cluster_name&quot; : &quot;elk_dev&quot;,</span><br><span class=\"line\">  &quot;version&quot; : &#123;</span><br><span class=\"line\">    &quot;number&quot; : &quot;2.3.2&quot;,</span><br><span class=\"line\">    &quot;build_hash&quot; : &quot;b9e4a6acad4008027e4038f6abed7f7dba346f94&quot;,</span><br><span class=\"line\">    &quot;build_timestamp&quot; : &quot;2016-04-21T16:03:47Z&quot;,</span><br><span class=\"line\">    &quot;build_snapshot&quot; : false,</span><br><span class=\"line\">    &quot;lucene_version&quot; : &quot;5.5.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"端口问题\"><a href=\"#端口问题\" class=\"headerlink\" title=\"端口问题\"></a>端口问题</h2><p>ES会对外提供两个端口的服务：HTTP端口，socket端口</p>\n<p>HTTP端口可以在配置文件中使用</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>启动成功了，我们还需要知道一些基础概念</p>\n<p><strong>index</strong>:<code>索引</code>，ES的顶级存储单位，我们所有的数据都必须存储到一个index中，如果熟悉mysql，我们可以认为index就是mysql中的一个<code>database</code>，我们要使用mysql，我们先要建一个库，ES里是先要建一个index</p>\n<p><strong>type</strong>:<code>类型</code>，索引下的存储单位，一个index下可以存在任意多的type，对应mysql中，就想一个database下的表，但是这个表结构并不是固定的，比如都叫<code>book</code>的type不一定都要有<code>name</code>这个字段。但是为了不反人类，最好不要这么设计，还是统一type的结构会比较好</p>\n<p><strong>shard</strong>:<code>分片</code>，ES是个分布式的引擎，数据是分片存储的，每个index都分片存储在不同的shard下面，默认启动是5个shard</p>\n<p><strong>replica</strong>：<code>拷贝</code>，为了保证系统的可用性，ES的每个shard还有一个replica，相当于每份数据都有一份备份</p>\n<p><strong>http restful API</strong>:ES提供的基于HTTP协议的，restful风格的API，可用直接在浏览器调用（但是浏览器只支持get请求，其他post,put需要使用插件），或者也可以在linux上使用<code>curl</code>访问，非常方便</p>\n<p><strong>JAVA API</strong>：ES就是使用JAVA开发的，所以和JAVA集成是最方便的，提供了非常完善的JAVA API以进行各种查询，聚合调用，如果你的项目使用JAVA的话，那就可以直接使用JAVA API直接访问ES服务，它和使用HTTP访问的区别，主要是基于协议不太一样，JAVA API直接建立一个socket连接到某个节点上，建立一个<code>transport</code>进行访问数据</p>\n<h2 id=\"基本操作-CRUD-增删改查\"><a href=\"#基本操作-CRUD-增删改查\" class=\"headerlink\" title=\"基本操作 CRUD 增删改查\"></a>基本操作 CRUD 增删改查</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 增或改</span><br><span class=\"line\"></span><br><span class=\"line\">curl -XPUT &apos;http://127.0.0.1:9200/twitter/tweet/1&apos; -d &apos;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;user&quot;: &quot;kimchy&quot;,</span><br><span class=\"line\">    &quot;postDate&quot;: &quot;2009-11-15T13:12:00&quot;,</span><br><span class=\"line\">    &quot;message&quot;: &quot;Trying out Elasticsearch, so far so good?&quot;</span><br><span class=\"line\">&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 查</span><br><span class=\"line\">curl -XGET &apos;http://127.0.0.1:9200/twitter/tweet/1?pretty=true&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 删</span><br><span class=\"line\">curl -XDELETE &apos;http://127.0.0.1:9200/twitter/tweet/1?pretty=true&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取用户名为kimchy的tweet</span><br><span class=\"line\">curl -XGET &apos;http://127.0.0.1:9200/twitter/tweet/_search?q=user:kimchy&amp;pretty=true&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取twitter/tweet下面的所有数据，默认只会显示前十条，或者前5条</span><br><span class=\"line\">curl -XGET &apos;http://127.0.0.1:9200/twitter/tweet/_search?pretty=true&apos;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<p>ES的搜索，最大只能搜索前2W条数据，如果需要搜索2W条以后的数据，需要使用到scroll</p>\n<p>也就是说，在ES里面，2W条以内可以使用from,size来分页查询，但是超出2W条就不行了，而且是from+size&lt;=2W,超出就会报错，在我另一篇文章里有说明</p>\n<h2 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h2><p>最后介绍一个神器，写ES的查询语句，复杂的话是很蛋疼的，需要花比较多时间，还不一定能写对，但是大家对<code>sql语句</code>一定都很数据，那下面就有一个工具，可以把<code>sql语句</code>转换成对于的ES查询语句，爽飞！！</p>\n<p>名字叫：<strong>Elasticsearch-sql</strong></p>\n<p>地址：<a href=\"https://github.com/NLPchina/elasticsearch-sql\" target=\"_blank\" rel=\"noopener\">https://github.com/NLPchina/elasticsearch-sql</a></p>"},{"title":"FTPClient的正确使用姿势","date":"2017-06-09T14:30:38.000Z","_content":"\n> 虽然整体听着FTP这个词，已经不能再熟了。但是真正使用代码去操作他，还真是第一次。这次接到一个异常操蛋的任务，或者叫政治任务。对的，真正的政治任务。网信办要求各个互联网大公司，特别是直播公司，上报所有的用户以及用户相关的直播数据，用于对于直播犯罪的快速信息索引。听起来是一个无比美好的事情，然而我除了微笑也是没有其他什么可说的了。\n\n\n# 业务介绍\n\n简单来说就是需要上报数据，而上报数据的方式，就是将用户数据按指定格式写到**XML**中，然后通过**FTP**推到公安网信办的服务器上去。\n\n就这么简单。\n\n其他也就不说了，主要确实也是第一次使用JAVA去操作**FTP**，将**FTP**功能嵌套到代码里面。\n\n\n<!-- more -->\n\n\n# FTPClient\n\n隐约记得JAVA是使用一个叫**FTPClient**的工具去操作的，所以也是二货不说直接引入相关包先\n\n\n> commons-net:commons-net\n\nFTPClient就包含在上面这个包里\n\n引入进来之后\n\n直接上代码：\n\n``` java\npackage yaoboss.me;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPReply;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.nio.file.Files;\n\n/**\n * FTP上传工具类\n * \n */\n@Component\npublic class FtpUtils {\n\n\tprivate static Logger logger = LoggerFactory.getLogger(FtpUtils.class);\n\n\n\t@Value(\"${ftp.ip}\")\n\tprivate String ftpIp;\n\n\t@Value(\"${ftp.loginUserName}\")\n\tprivate String loginUserName;\n\t@Value(\"${ftp.loginUserPass}\")\n\tprivate String loginUserPass;\n\n\t/**\n\t * 通过FTP上传文件 上报给公安\n\t * @param fileName\n\t */\n\tpublic void upload(String fileName) {\n\t\tFTPClient ftpClient = new FTPClient();\n\t\tFileInputStream fis = null;\n\t\tint replyCode;\n\t\ttry {\n\t\t\tftpClient.setConnectTimeout(4000);\n\t\t\tftpClient.connect(ftpIp);\n\t\t\tboolean loginSuccess = ftpClient.login(loginUserName, loginUserPass);\n\t\t\tlogger.warn(\"FTP登录状态: FTP_IP: [{}], 登录结果:[{}]\", ftpIp, loginSuccess);\n\n\t\t\t// 重点在这里   获取返回码   判断链接或者登陆是否正常   \n\t\t\treplyCode = ftpClient.getReplyCode();\n\t\t\tlogger.warn(\"FTP登录状态码: [{}]\", replyCode);\n\t\t\tif (!FTPReply.isPositiveCompletion(replyCode)) {\n\t\t\t\tftpClient.disconnect();\n\t\t\t\tlogger.error(\"FTP连接不成功，reply code：[{}]\", replyCode);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tFile srcFile = new File(fileName);\n\t\t\tfis = new FileInputStream(srcFile);\n\t\t\t//设置上传目录\n\t\t\tftpClient.changeWorkingDirectory(\"/KUGOU\");\n\t\t\tftpClient.setBufferSize(1024);\n\t\t\tftpClient.setControlEncoding(\"UTF-8\");\n\t\t\t//设置文件类型（二进制）\n\t\t\tftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);\n\t\t\tftpClient.enterLocalPassiveMode();\n\t\t\tboolean success = ftpClient.storeFile(new String(fileName.getBytes(\"UTF-8\"), \"iso-8859-1\"), fis);\n\n\t\t\t// 重点！！！  这个ReplyCode是可以重复获取的   每次获取到的返回码 是最近一次操作的返回结果\n\t\t\treplyCode = ftpClient.getReplyCode();\n\t\t\tlogger.warn(\"FTP上传状态: 文件名: [{}], 上传结果:[{}],replyCode:[{}]\", fileName, success, replyCode);\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"FTP错误：\", e);\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(fis);\n\t\t\ttry {\n\t\t\t\tftpClient.disconnect();\n\t\t\t} catch (IOException e) {\n\t\t\t\tlogger.error(\"FTP关闭连接发生错误：\", e);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n```\n\n\n上面我直接放了一个上传的例子\n\n里面的关键就在于两次获取**ReplyCode**\n\n真的，这个特别重要，这是**FTP**的唯一调试方式，你不获取返回码，你对于上传失败的原因根本无从判断\n\n而且每做一次操作后可以跟着获取一次最新的这个**ReplyCode**，可以知道刚才做的操作是否成功，或者失败的原因是什么\n\n或者好像还可以获取**ReplyString()**，调用**getReplyString()**，在stackoverflow 看别人说这个返回更详细，我自己没用过，大家可以试试\n\n\n# 后记\n\n这个东西看起来简单，我却花了一下午调试\n\n关键就在于那个坑爹的返回码，一开始我不知道有这东西，然后就发现login方法返回是登录成功的，但是死活就是上传文件不成功\n\n后来网上搜了下，获取到返回码，直接用返回码一查，立马解决问题\n\n\n坑爹。","source":"_posts/FTPClient的正确使用姿势.md","raw":"---\ntitle: FTPClient的正确使用姿势\ndate: 2017-06-09 22:30:38\ntags:\n- java\ncategory:\n- java\n---\n\n> 虽然整体听着FTP这个词，已经不能再熟了。但是真正使用代码去操作他，还真是第一次。这次接到一个异常操蛋的任务，或者叫政治任务。对的，真正的政治任务。网信办要求各个互联网大公司，特别是直播公司，上报所有的用户以及用户相关的直播数据，用于对于直播犯罪的快速信息索引。听起来是一个无比美好的事情，然而我除了微笑也是没有其他什么可说的了。\n\n\n# 业务介绍\n\n简单来说就是需要上报数据，而上报数据的方式，就是将用户数据按指定格式写到**XML**中，然后通过**FTP**推到公安网信办的服务器上去。\n\n就这么简单。\n\n其他也就不说了，主要确实也是第一次使用JAVA去操作**FTP**，将**FTP**功能嵌套到代码里面。\n\n\n<!-- more -->\n\n\n# FTPClient\n\n隐约记得JAVA是使用一个叫**FTPClient**的工具去操作的，所以也是二货不说直接引入相关包先\n\n\n> commons-net:commons-net\n\nFTPClient就包含在上面这个包里\n\n引入进来之后\n\n直接上代码：\n\n``` java\npackage yaoboss.me;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.net.ftp.FTPClient;\nimport org.apache.commons.net.ftp.FTPReply;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.nio.file.Files;\n\n/**\n * FTP上传工具类\n * \n */\n@Component\npublic class FtpUtils {\n\n\tprivate static Logger logger = LoggerFactory.getLogger(FtpUtils.class);\n\n\n\t@Value(\"${ftp.ip}\")\n\tprivate String ftpIp;\n\n\t@Value(\"${ftp.loginUserName}\")\n\tprivate String loginUserName;\n\t@Value(\"${ftp.loginUserPass}\")\n\tprivate String loginUserPass;\n\n\t/**\n\t * 通过FTP上传文件 上报给公安\n\t * @param fileName\n\t */\n\tpublic void upload(String fileName) {\n\t\tFTPClient ftpClient = new FTPClient();\n\t\tFileInputStream fis = null;\n\t\tint replyCode;\n\t\ttry {\n\t\t\tftpClient.setConnectTimeout(4000);\n\t\t\tftpClient.connect(ftpIp);\n\t\t\tboolean loginSuccess = ftpClient.login(loginUserName, loginUserPass);\n\t\t\tlogger.warn(\"FTP登录状态: FTP_IP: [{}], 登录结果:[{}]\", ftpIp, loginSuccess);\n\n\t\t\t// 重点在这里   获取返回码   判断链接或者登陆是否正常   \n\t\t\treplyCode = ftpClient.getReplyCode();\n\t\t\tlogger.warn(\"FTP登录状态码: [{}]\", replyCode);\n\t\t\tif (!FTPReply.isPositiveCompletion(replyCode)) {\n\t\t\t\tftpClient.disconnect();\n\t\t\t\tlogger.error(\"FTP连接不成功，reply code：[{}]\", replyCode);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tFile srcFile = new File(fileName);\n\t\t\tfis = new FileInputStream(srcFile);\n\t\t\t//设置上传目录\n\t\t\tftpClient.changeWorkingDirectory(\"/KUGOU\");\n\t\t\tftpClient.setBufferSize(1024);\n\t\t\tftpClient.setControlEncoding(\"UTF-8\");\n\t\t\t//设置文件类型（二进制）\n\t\t\tftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);\n\t\t\tftpClient.enterLocalPassiveMode();\n\t\t\tboolean success = ftpClient.storeFile(new String(fileName.getBytes(\"UTF-8\"), \"iso-8859-1\"), fis);\n\n\t\t\t// 重点！！！  这个ReplyCode是可以重复获取的   每次获取到的返回码 是最近一次操作的返回结果\n\t\t\treplyCode = ftpClient.getReplyCode();\n\t\t\tlogger.warn(\"FTP上传状态: 文件名: [{}], 上传结果:[{}],replyCode:[{}]\", fileName, success, replyCode);\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"FTP错误：\", e);\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(fis);\n\t\t\ttry {\n\t\t\t\tftpClient.disconnect();\n\t\t\t} catch (IOException e) {\n\t\t\t\tlogger.error(\"FTP关闭连接发生错误：\", e);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n```\n\n\n上面我直接放了一个上传的例子\n\n里面的关键就在于两次获取**ReplyCode**\n\n真的，这个特别重要，这是**FTP**的唯一调试方式，你不获取返回码，你对于上传失败的原因根本无从判断\n\n而且每做一次操作后可以跟着获取一次最新的这个**ReplyCode**，可以知道刚才做的操作是否成功，或者失败的原因是什么\n\n或者好像还可以获取**ReplyString()**，调用**getReplyString()**，在stackoverflow 看别人说这个返回更详细，我自己没用过，大家可以试试\n\n\n# 后记\n\n这个东西看起来简单，我却花了一下午调试\n\n关键就在于那个坑爹的返回码，一开始我不知道有这东西，然后就发现login方法返回是登录成功的，但是死活就是上传文件不成功\n\n后来网上搜了下，获取到返回码，直接用返回码一查，立马解决问题\n\n\n坑爹。","slug":"FTPClient的正确使用姿势","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgef00070a6tsfce1yux","content":"<blockquote>\n<p>虽然整体听着FTP这个词，已经不能再熟了。但是真正使用代码去操作他，还真是第一次。这次接到一个异常操蛋的任务，或者叫政治任务。对的，真正的政治任务。网信办要求各个互联网大公司，特别是直播公司，上报所有的用户以及用户相关的直播数据，用于对于直播犯罪的快速信息索引。听起来是一个无比美好的事情，然而我除了微笑也是没有其他什么可说的了。</p>\n</blockquote>\n<h1 id=\"业务介绍\"><a href=\"#业务介绍\" class=\"headerlink\" title=\"业务介绍\"></a>业务介绍</h1><p>简单来说就是需要上报数据，而上报数据的方式，就是将用户数据按指定格式写到<strong>XML</strong>中，然后通过<strong>FTP</strong>推到公安网信办的服务器上去。</p>\n<p>就这么简单。</p>\n<p>其他也就不说了，主要确实也是第一次使用JAVA去操作<strong>FTP</strong>，将<strong>FTP</strong>功能嵌套到代码里面。</p>\n<a id=\"more\"></a>\n<h1 id=\"FTPClient\"><a href=\"#FTPClient\" class=\"headerlink\" title=\"FTPClient\"></a>FTPClient</h1><p>隐约记得JAVA是使用一个叫<strong>FTPClient</strong>的工具去操作的，所以也是二货不说直接引入相关包先</p>\n<blockquote>\n<p>commons-net:commons-net</p>\n</blockquote>\n<p>FTPClient就包含在上面这个包里</p>\n<p>引入进来之后</p>\n<p>直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> yaoboss.me;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.IOUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.net.ftp.FTPClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.net.ftp.FTPReply;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * FTP上传工具类</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FtpUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(FtpUtils.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;ftp.ip&#125;\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String ftpIp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;ftp.loginUserName&#125;\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String loginUserName;</span><br><span class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;ftp.loginUserPass&#125;\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String loginUserPass;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 通过FTP上传文件 上报给公安</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fileName</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">upload</span><span class=\"params\">(String fileName)</span> </span>&#123;</span><br><span class=\"line\">\t\tFTPClient ftpClient = <span class=\"keyword\">new</span> FTPClient();</span><br><span class=\"line\">\t\tFileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> replyCode;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tftpClient.setConnectTimeout(<span class=\"number\">4000</span>);</span><br><span class=\"line\">\t\t\tftpClient.connect(ftpIp);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> loginSuccess = ftpClient.login(loginUserName, loginUserPass);</span><br><span class=\"line\">\t\t\tlogger.warn(<span class=\"string\">\"FTP登录状态: FTP_IP: [&#123;&#125;], 登录结果:[&#123;&#125;]\"</span>, ftpIp, loginSuccess);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 重点在这里   获取返回码   判断链接或者登陆是否正常   </span></span><br><span class=\"line\">\t\t\treplyCode = ftpClient.getReplyCode();</span><br><span class=\"line\">\t\t\tlogger.warn(<span class=\"string\">\"FTP登录状态码: [&#123;&#125;]\"</span>, replyCode);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!FTPReply.isPositiveCompletion(replyCode)) &#123;</span><br><span class=\"line\">\t\t\t\tftpClient.disconnect();</span><br><span class=\"line\">\t\t\t\tlogger.error(<span class=\"string\">\"FTP连接不成功，reply code：[&#123;&#125;]\"</span>, replyCode);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tFile srcFile = <span class=\"keyword\">new</span> File(fileName);</span><br><span class=\"line\">\t\t\tfis = <span class=\"keyword\">new</span> FileInputStream(srcFile);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//设置上传目录</span></span><br><span class=\"line\">\t\t\tftpClient.changeWorkingDirectory(<span class=\"string\">\"/KUGOU\"</span>);</span><br><span class=\"line\">\t\t\tftpClient.setBufferSize(<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\tftpClient.setControlEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//设置文件类型（二进制）</span></span><br><span class=\"line\">\t\t\tftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);</span><br><span class=\"line\">\t\t\tftpClient.enterLocalPassiveMode();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> success = ftpClient.storeFile(<span class=\"keyword\">new</span> String(fileName.getBytes(<span class=\"string\">\"UTF-8\"</span>), <span class=\"string\">\"iso-8859-1\"</span>), fis);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 重点！！！  这个ReplyCode是可以重复获取的   每次获取到的返回码 是最近一次操作的返回结果</span></span><br><span class=\"line\">\t\t\treplyCode = ftpClient.getReplyCode();</span><br><span class=\"line\">\t\t\tlogger.warn(<span class=\"string\">\"FTP上传状态: 文件名: [&#123;&#125;], 上传结果:[&#123;&#125;],replyCode:[&#123;&#125;]\"</span>, fileName, success, replyCode);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(<span class=\"string\">\"FTP错误：\"</span>, e);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tIOUtils.closeQuietly(fis);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tftpClient.disconnect();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.error(<span class=\"string\">\"FTP关闭连接发生错误：\"</span>, e);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面我直接放了一个上传的例子</p>\n<p>里面的关键就在于两次获取<strong>ReplyCode</strong></p>\n<p>真的，这个特别重要，这是<strong>FTP</strong>的唯一调试方式，你不获取返回码，你对于上传失败的原因根本无从判断</p>\n<p>而且每做一次操作后可以跟着获取一次最新的这个<strong>ReplyCode</strong>，可以知道刚才做的操作是否成功，或者失败的原因是什么</p>\n<p>或者好像还可以获取<strong>ReplyString()</strong>，调用<strong>getReplyString()</strong>，在stackoverflow 看别人说这个返回更详细，我自己没用过，大家可以试试</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>这个东西看起来简单，我却花了一下午调试</p>\n<p>关键就在于那个坑爹的返回码，一开始我不知道有这东西，然后就发现login方法返回是登录成功的，但是死活就是上传文件不成功</p>\n<p>后来网上搜了下，获取到返回码，直接用返回码一查，立马解决问题</p>\n<p>坑爹。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>虽然整体听着FTP这个词，已经不能再熟了。但是真正使用代码去操作他，还真是第一次。这次接到一个异常操蛋的任务，或者叫政治任务。对的，真正的政治任务。网信办要求各个互联网大公司，特别是直播公司，上报所有的用户以及用户相关的直播数据，用于对于直播犯罪的快速信息索引。听起来是一个无比美好的事情，然而我除了微笑也是没有其他什么可说的了。</p>\n</blockquote>\n<h1 id=\"业务介绍\"><a href=\"#业务介绍\" class=\"headerlink\" title=\"业务介绍\"></a>业务介绍</h1><p>简单来说就是需要上报数据，而上报数据的方式，就是将用户数据按指定格式写到<strong>XML</strong>中，然后通过<strong>FTP</strong>推到公安网信办的服务器上去。</p>\n<p>就这么简单。</p>\n<p>其他也就不说了，主要确实也是第一次使用JAVA去操作<strong>FTP</strong>，将<strong>FTP</strong>功能嵌套到代码里面。</p>","more":"<h1 id=\"FTPClient\"><a href=\"#FTPClient\" class=\"headerlink\" title=\"FTPClient\"></a>FTPClient</h1><p>隐约记得JAVA是使用一个叫<strong>FTPClient</strong>的工具去操作的，所以也是二货不说直接引入相关包先</p>\n<blockquote>\n<p>commons-net:commons-net</p>\n</blockquote>\n<p>FTPClient就包含在上面这个包里</p>\n<p>引入进来之后</p>\n<p>直接上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> yaoboss.me;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.IOUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.net.ftp.FTPClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.net.ftp.FTPReply;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * FTP上传工具类</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FtpUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(FtpUtils.class);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;ftp.ip&#125;\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String ftpIp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;ftp.loginUserName&#125;\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String loginUserName;</span><br><span class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;ftp.loginUserPass&#125;\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String loginUserPass;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 通过FTP上传文件 上报给公安</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fileName</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">upload</span><span class=\"params\">(String fileName)</span> </span>&#123;</span><br><span class=\"line\">\t\tFTPClient ftpClient = <span class=\"keyword\">new</span> FTPClient();</span><br><span class=\"line\">\t\tFileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> replyCode;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tftpClient.setConnectTimeout(<span class=\"number\">4000</span>);</span><br><span class=\"line\">\t\t\tftpClient.connect(ftpIp);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> loginSuccess = ftpClient.login(loginUserName, loginUserPass);</span><br><span class=\"line\">\t\t\tlogger.warn(<span class=\"string\">\"FTP登录状态: FTP_IP: [&#123;&#125;], 登录结果:[&#123;&#125;]\"</span>, ftpIp, loginSuccess);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 重点在这里   获取返回码   判断链接或者登陆是否正常   </span></span><br><span class=\"line\">\t\t\treplyCode = ftpClient.getReplyCode();</span><br><span class=\"line\">\t\t\tlogger.warn(<span class=\"string\">\"FTP登录状态码: [&#123;&#125;]\"</span>, replyCode);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!FTPReply.isPositiveCompletion(replyCode)) &#123;</span><br><span class=\"line\">\t\t\t\tftpClient.disconnect();</span><br><span class=\"line\">\t\t\t\tlogger.error(<span class=\"string\">\"FTP连接不成功，reply code：[&#123;&#125;]\"</span>, replyCode);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tFile srcFile = <span class=\"keyword\">new</span> File(fileName);</span><br><span class=\"line\">\t\t\tfis = <span class=\"keyword\">new</span> FileInputStream(srcFile);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//设置上传目录</span></span><br><span class=\"line\">\t\t\tftpClient.changeWorkingDirectory(<span class=\"string\">\"/KUGOU\"</span>);</span><br><span class=\"line\">\t\t\tftpClient.setBufferSize(<span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t\tftpClient.setControlEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//设置文件类型（二进制）</span></span><br><span class=\"line\">\t\t\tftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);</span><br><span class=\"line\">\t\t\tftpClient.enterLocalPassiveMode();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> success = ftpClient.storeFile(<span class=\"keyword\">new</span> String(fileName.getBytes(<span class=\"string\">\"UTF-8\"</span>), <span class=\"string\">\"iso-8859-1\"</span>), fis);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 重点！！！  这个ReplyCode是可以重复获取的   每次获取到的返回码 是最近一次操作的返回结果</span></span><br><span class=\"line\">\t\t\treplyCode = ftpClient.getReplyCode();</span><br><span class=\"line\">\t\t\tlogger.warn(<span class=\"string\">\"FTP上传状态: 文件名: [&#123;&#125;], 上传结果:[&#123;&#125;],replyCode:[&#123;&#125;]\"</span>, fileName, success, replyCode);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(<span class=\"string\">\"FTP错误：\"</span>, e);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tIOUtils.closeQuietly(fis);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tftpClient.disconnect();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.error(<span class=\"string\">\"FTP关闭连接发生错误：\"</span>, e);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面我直接放了一个上传的例子</p>\n<p>里面的关键就在于两次获取<strong>ReplyCode</strong></p>\n<p>真的，这个特别重要，这是<strong>FTP</strong>的唯一调试方式，你不获取返回码，你对于上传失败的原因根本无从判断</p>\n<p>而且每做一次操作后可以跟着获取一次最新的这个<strong>ReplyCode</strong>，可以知道刚才做的操作是否成功，或者失败的原因是什么</p>\n<p>或者好像还可以获取<strong>ReplyString()</strong>，调用<strong>getReplyString()</strong>，在stackoverflow 看别人说这个返回更详细，我自己没用过，大家可以试试</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>这个东西看起来简单，我却花了一下午调试</p>\n<p>关键就在于那个坑爹的返回码，一开始我不知道有这东西，然后就发现login方法返回是登录成功的，但是死活就是上传文件不成功</p>\n<p>后来网上搜了下，获取到返回码，直接用返回码一查，立马解决问题</p>\n<p>坑爹。</p>"},{"title":"Xmanager.Enterprise5破解版下载","date":"2016-04-02T13:29:54.000Z","_content":"\n下载地址：\n\n> http://pan.baidu.com/s/1bXjIN0\n\n`key:    150817-116253-999654`\n\n自行下载安装吧，最好用的shell工具，xshell,xftp等。","source":"_posts/Xmanager-Enterprise5破解版下载.md","raw":"---\ntitle: Xmanager.Enterprise5破解版下载\ndate: 2016-04-02 21:29:54\ntags:\n- Xmanager.Enterprise5\n- linux\ncategory:\n- linux\n---\n\n下载地址：\n\n> http://pan.baidu.com/s/1bXjIN0\n\n`key:    150817-116253-999654`\n\n自行下载安装吧，最好用的shell工具，xshell,xftp等。","slug":"Xmanager-Enterprise5破解版下载","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgeh000a0a6tqdje7a02","content":"<p>下载地址：</p>\n<blockquote>\n<p><a href=\"http://pan.baidu.com/s/1bXjIN0\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1bXjIN0</a></p>\n</blockquote>\n<p><code>key:    150817-116253-999654</code></p>\n<p>自行下载安装吧，最好用的shell工具，xshell,xftp等。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下载地址：</p>\n<blockquote>\n<p><a href=\"http://pan.baidu.com/s/1bXjIN0\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1bXjIN0</a></p>\n</blockquote>\n<p><code>key:    150817-116253-999654</code></p>\n<p>自行下载安装吧，最好用的shell工具，xshell,xftp等。</p>\n"},{"title":"将Sublime Text3添加到右键菜单中","date":"2016-08-20T08:46:27.000Z","_content":"\n> sublime text是我最喜欢的开发工具之一，也非常的强大。包括对各种格式文件的支持。对大文本文件的打开速度也非常好。还有搜索等功能，UI也是我喜欢的类型。总之爱不释手。不过新安装的sublime text，没有绑定所有文件的默认格式，也没用提供默认的鼠标右键\"用Sublime text打开\"支持，很不方便，每次需要拖拽文件到sublime里面。\n\n在网上找了下，其实很简单，就是在注册表加入一些右键选项就可以了。\n\n### 1.在`Sublime text3`的安装目录，新建一个文件，`sublime_addright.inf`\n\n\n### 2.复制下面的代码，保存，退出\n\n```\n[Version]\nSignature=\"$Windows NT$\"\n\n[DefaultInstall]\nAddReg=SublimeText3\n\n[SublimeText3]\nhkcr,\"*\\\\shell\\\\SublimeText3\",,,\"用 SublimeText3 打开\"\nhkcr,\"*\\\\shell\\\\SublimeText3\\\\command\",,,\"\"\"%1%\\sublime_text.exe\"\" \"\"%%1\"\" %%*\"\nhkcr,\"Directory\\shell\\SublimeText3\",,,\"用 SublimeText3 打开\"\nhkcr,\"*\\\\shell\\\\SublimeText3\",\"Icon\",0x20000,\"%1%\\sublime_text.exe, 0\"\nhkcr,\"Directory\\shell\\SublimeText3\\command\",,,\"\"\"%1%\\sublime_text.exe\"\" \"\"%%1\"\"\"\n\n```\n\n或者，下载下面这个文件，直接放到`Sublime text3`的安装目录，右键选择文件，选择安装，也可以\n\n**[这是一个可爱的下载链接](http://yaoboss.me/sublime_addright.inf)**\n\n### 3.鼠标右键点击刚刚新建的文件，选择安装\n\n\n**完成**\n\n现在右键应该有`用Sublime text3`打开的选项了","source":"_posts/add-right-click-support-of-sublime-in-windows.md","raw":"---\ntitle: 将Sublime Text3添加到右键菜单中\ndate: 2016-08-20 16:46:27\ntags:\n- 开发工具\n- sublime text3\ncategory:\n- 开发工具\n---\n\n> sublime text是我最喜欢的开发工具之一，也非常的强大。包括对各种格式文件的支持。对大文本文件的打开速度也非常好。还有搜索等功能，UI也是我喜欢的类型。总之爱不释手。不过新安装的sublime text，没有绑定所有文件的默认格式，也没用提供默认的鼠标右键\"用Sublime text打开\"支持，很不方便，每次需要拖拽文件到sublime里面。\n\n在网上找了下，其实很简单，就是在注册表加入一些右键选项就可以了。\n\n### 1.在`Sublime text3`的安装目录，新建一个文件，`sublime_addright.inf`\n\n\n### 2.复制下面的代码，保存，退出\n\n```\n[Version]\nSignature=\"$Windows NT$\"\n\n[DefaultInstall]\nAddReg=SublimeText3\n\n[SublimeText3]\nhkcr,\"*\\\\shell\\\\SublimeText3\",,,\"用 SublimeText3 打开\"\nhkcr,\"*\\\\shell\\\\SublimeText3\\\\command\",,,\"\"\"%1%\\sublime_text.exe\"\" \"\"%%1\"\" %%*\"\nhkcr,\"Directory\\shell\\SublimeText3\",,,\"用 SublimeText3 打开\"\nhkcr,\"*\\\\shell\\\\SublimeText3\",\"Icon\",0x20000,\"%1%\\sublime_text.exe, 0\"\nhkcr,\"Directory\\shell\\SublimeText3\\command\",,,\"\"\"%1%\\sublime_text.exe\"\" \"\"%%1\"\"\"\n\n```\n\n或者，下载下面这个文件，直接放到`Sublime text3`的安装目录，右键选择文件，选择安装，也可以\n\n**[这是一个可爱的下载链接](http://yaoboss.me/sublime_addright.inf)**\n\n### 3.鼠标右键点击刚刚新建的文件，选择安装\n\n\n**完成**\n\n现在右键应该有`用Sublime text3`打开的选项了","slug":"add-right-click-support-of-sublime-in-windows","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgei000b0a6te24qa0il","content":"<blockquote>\n<p>sublime text是我最喜欢的开发工具之一，也非常的强大。包括对各种格式文件的支持。对大文本文件的打开速度也非常好。还有搜索等功能，UI也是我喜欢的类型。总之爱不释手。不过新安装的sublime text，没有绑定所有文件的默认格式，也没用提供默认的鼠标右键”用Sublime text打开”支持，很不方便，每次需要拖拽文件到sublime里面。</p>\n</blockquote>\n<p>在网上找了下，其实很简单，就是在注册表加入一些右键选项就可以了。</p>\n<h3 id=\"1-在Sublime-text3的安装目录，新建一个文件，sublime-addright-inf\"><a href=\"#1-在Sublime-text3的安装目录，新建一个文件，sublime-addright-inf\" class=\"headerlink\" title=\"1.在Sublime text3的安装目录，新建一个文件，sublime_addright.inf\"></a>1.在<code>Sublime text3</code>的安装目录，新建一个文件，<code>sublime_addright.inf</code></h3><h3 id=\"2-复制下面的代码，保存，退出\"><a href=\"#2-复制下面的代码，保存，退出\" class=\"headerlink\" title=\"2.复制下面的代码，保存，退出\"></a>2.复制下面的代码，保存，退出</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Version]</span><br><span class=\"line\">Signature=&quot;$Windows NT$&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[DefaultInstall]</span><br><span class=\"line\">AddReg=SublimeText3</span><br><span class=\"line\"></span><br><span class=\"line\">[SublimeText3]</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3&quot;,,,&quot;用 SublimeText3 打开&quot;</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3\\\\command&quot;,,,&quot;&quot;&quot;%1%\\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot; %%*&quot;</span><br><span class=\"line\">hkcr,&quot;Directory\\shell\\SublimeText3&quot;,,,&quot;用 SublimeText3 打开&quot;</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3&quot;,&quot;Icon&quot;,0x20000,&quot;%1%\\sublime_text.exe, 0&quot;</span><br><span class=\"line\">hkcr,&quot;Directory\\shell\\SublimeText3\\command&quot;,,,&quot;&quot;&quot;%1%\\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>或者，下载下面这个文件，直接放到<code>Sublime text3</code>的安装目录，右键选择文件，选择安装，也可以</p>\n<p><strong><a href=\"http://yaoboss.me/sublime_addright.inf\">这是一个可爱的下载链接</a></strong></p>\n<h3 id=\"3-鼠标右键点击刚刚新建的文件，选择安装\"><a href=\"#3-鼠标右键点击刚刚新建的文件，选择安装\" class=\"headerlink\" title=\"3.鼠标右键点击刚刚新建的文件，选择安装\"></a>3.鼠标右键点击刚刚新建的文件，选择安装</h3><p><strong>完成</strong></p>\n<p>现在右键应该有<code>用Sublime text3</code>打开的选项了</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>sublime text是我最喜欢的开发工具之一，也非常的强大。包括对各种格式文件的支持。对大文本文件的打开速度也非常好。还有搜索等功能，UI也是我喜欢的类型。总之爱不释手。不过新安装的sublime text，没有绑定所有文件的默认格式，也没用提供默认的鼠标右键”用Sublime text打开”支持，很不方便，每次需要拖拽文件到sublime里面。</p>\n</blockquote>\n<p>在网上找了下，其实很简单，就是在注册表加入一些右键选项就可以了。</p>\n<h3 id=\"1-在Sublime-text3的安装目录，新建一个文件，sublime-addright-inf\"><a href=\"#1-在Sublime-text3的安装目录，新建一个文件，sublime-addright-inf\" class=\"headerlink\" title=\"1.在Sublime text3的安装目录，新建一个文件，sublime_addright.inf\"></a>1.在<code>Sublime text3</code>的安装目录，新建一个文件，<code>sublime_addright.inf</code></h3><h3 id=\"2-复制下面的代码，保存，退出\"><a href=\"#2-复制下面的代码，保存，退出\" class=\"headerlink\" title=\"2.复制下面的代码，保存，退出\"></a>2.复制下面的代码，保存，退出</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Version]</span><br><span class=\"line\">Signature=&quot;$Windows NT$&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[DefaultInstall]</span><br><span class=\"line\">AddReg=SublimeText3</span><br><span class=\"line\"></span><br><span class=\"line\">[SublimeText3]</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3&quot;,,,&quot;用 SublimeText3 打开&quot;</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3\\\\command&quot;,,,&quot;&quot;&quot;%1%\\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot; %%*&quot;</span><br><span class=\"line\">hkcr,&quot;Directory\\shell\\SublimeText3&quot;,,,&quot;用 SublimeText3 打开&quot;</span><br><span class=\"line\">hkcr,&quot;*\\\\shell\\\\SublimeText3&quot;,&quot;Icon&quot;,0x20000,&quot;%1%\\sublime_text.exe, 0&quot;</span><br><span class=\"line\">hkcr,&quot;Directory\\shell\\SublimeText3\\command&quot;,,,&quot;&quot;&quot;%1%\\sublime_text.exe&quot;&quot; &quot;&quot;%%1&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>\n<p>或者，下载下面这个文件，直接放到<code>Sublime text3</code>的安装目录，右键选择文件，选择安装，也可以</p>\n<p><strong><a href=\"http://yaoboss.me/sublime_addright.inf\">这是一个可爱的下载链接</a></strong></p>\n<h3 id=\"3-鼠标右键点击刚刚新建的文件，选择安装\"><a href=\"#3-鼠标右键点击刚刚新建的文件，选择安装\" class=\"headerlink\" title=\"3.鼠标右键点击刚刚新建的文件，选择安装\"></a>3.鼠标右键点击刚刚新建的文件，选择安装</h3><p><strong>完成</strong></p>\n<p>现在右键应该有<code>用Sublime text3</code>打开的选项了</p>\n"},{"title":"Tampermonkey破解百度云网盘下载限速","date":"2017-07-17T15:46:57.000Z","_content":"\n穷屌丝一个，充不起百度云的会员。充不起，难道我不下载百度云的资源了么？EI~~~ 当然不是，没会员我也得下啊，人家资源要放百度云，我有啥子办法嘛，四不啦！怎么下呢？没会员的话，基本就是30Kb/s起跳，封顶50kb/s，下到百度倒闭也下不完几个G的资源。这时候我们只需要一个`chrome`插件即可解决这个问题。四不四美滋滋？(～￣▽￣)～ \n\n<!-- more -->\n\n在chrome里面破解百度云的下载限速，极其非常超级的简单，你只需要用到一个插件，名字叫做 **Tampermonkey**，中文翻译过来好多人把这个称做`油猴`，这个东西的安装，你使用chrome的话，只需要在`Chrome网上应用商店`里面直接搜索这个英文名字，就可以搜索到。当然，因为国内不可描述的一些原因，你在使用`Chrome网上应用商店`时，需要一个梯子，需要FQ。要怎么FQ这个话题，咱们放到其他文章里说。\n\n搜索到这个插件以后，直接`安装扩展`，安装好了，应该会显示在`chrome`的右上角，那里会有一个小图标，长的像这样\n\n![1](/images/Tampermonkey破解百度云下载限速/1.png)\n\n有了这个小图标就说明安装已经成功了。\n\n这个`Tampermonkey`，他是一个管理用户脚本的软件，说白了，就是可以使用一种编程语言，某种`scripts`语言来开发`chrome`的扩展，在这里面你就可以实现很多基于`chrome`的功能了，比如遍历整个网页，抓出里面所有的图片，或者某些特征URL。这只是我举的例子。很多大神已经为我们写好了很多的脚本，我们直接使用就可以了，这里面就包括了破解百度云下载限速的脚本。\n\n我们访问， [解决百度云大文件下载限制](https://greasyfork.org/zh-CN/scripts/17800-%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6) ，点击安装此脚本，安装完成之后，再试试去百度云点下载，不管多大的资源，都会直接使用网页进行下载，网页下载之后，我们再去下载内容里面，**右键复制链接**，直接放到迅雷里面下载，速度基本都是妥妥的，不用开会员，都没毛病，老铁！\n\n\n当然，最后，你要和说你不用`chrome`的话，那我就也只有呵呵了。￣へ￣\n\n\n开玩笑，其实所有`chrome`内核的浏览器都是可以的哈！\n\n嘻嘻。ヽ(￣▽￣)／","source":"_posts/Tampermonkey破解百度云下载限速.md","raw":"---\ntitle: Tampermonkey破解百度云网盘下载限速\ndate: 2017-07-17 23:46:57\ntags:\n- 技术杂文\ncategory:\n- 技术杂文\n---\n\n穷屌丝一个，充不起百度云的会员。充不起，难道我不下载百度云的资源了么？EI~~~ 当然不是，没会员我也得下啊，人家资源要放百度云，我有啥子办法嘛，四不啦！怎么下呢？没会员的话，基本就是30Kb/s起跳，封顶50kb/s，下到百度倒闭也下不完几个G的资源。这时候我们只需要一个`chrome`插件即可解决这个问题。四不四美滋滋？(～￣▽￣)～ \n\n<!-- more -->\n\n在chrome里面破解百度云的下载限速，极其非常超级的简单，你只需要用到一个插件，名字叫做 **Tampermonkey**，中文翻译过来好多人把这个称做`油猴`，这个东西的安装，你使用chrome的话，只需要在`Chrome网上应用商店`里面直接搜索这个英文名字，就可以搜索到。当然，因为国内不可描述的一些原因，你在使用`Chrome网上应用商店`时，需要一个梯子，需要FQ。要怎么FQ这个话题，咱们放到其他文章里说。\n\n搜索到这个插件以后，直接`安装扩展`，安装好了，应该会显示在`chrome`的右上角，那里会有一个小图标，长的像这样\n\n![1](/images/Tampermonkey破解百度云下载限速/1.png)\n\n有了这个小图标就说明安装已经成功了。\n\n这个`Tampermonkey`，他是一个管理用户脚本的软件，说白了，就是可以使用一种编程语言，某种`scripts`语言来开发`chrome`的扩展，在这里面你就可以实现很多基于`chrome`的功能了，比如遍历整个网页，抓出里面所有的图片，或者某些特征URL。这只是我举的例子。很多大神已经为我们写好了很多的脚本，我们直接使用就可以了，这里面就包括了破解百度云下载限速的脚本。\n\n我们访问， [解决百度云大文件下载限制](https://greasyfork.org/zh-CN/scripts/17800-%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6) ，点击安装此脚本，安装完成之后，再试试去百度云点下载，不管多大的资源，都会直接使用网页进行下载，网页下载之后，我们再去下载内容里面，**右键复制链接**，直接放到迅雷里面下载，速度基本都是妥妥的，不用开会员，都没毛病，老铁！\n\n\n当然，最后，你要和说你不用`chrome`的话，那我就也只有呵呵了。￣へ￣\n\n\n开玩笑，其实所有`chrome`内核的浏览器都是可以的哈！\n\n嘻嘻。ヽ(￣▽￣)／","slug":"Tampermonkey破解百度云下载限速","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgej000f0a6t9juy1pfz","content":"<p>穷屌丝一个，充不起百度云的会员。充不起，难道我不下载百度云的资源了么？EI~~~ 当然不是，没会员我也得下啊，人家资源要放百度云，我有啥子办法嘛，四不啦！怎么下呢？没会员的话，基本就是30Kb/s起跳，封顶50kb/s，下到百度倒闭也下不完几个G的资源。这时候我们只需要一个<code>chrome</code>插件即可解决这个问题。四不四美滋滋？(～￣▽￣)～ </p>\n<a id=\"more\"></a>\n<p>在chrome里面破解百度云的下载限速，极其非常超级的简单，你只需要用到一个插件，名字叫做 <strong>Tampermonkey</strong>，中文翻译过来好多人把这个称做<code>油猴</code>，这个东西的安装，你使用chrome的话，只需要在<code>Chrome网上应用商店</code>里面直接搜索这个英文名字，就可以搜索到。当然，因为国内不可描述的一些原因，你在使用<code>Chrome网上应用商店</code>时，需要一个梯子，需要FQ。要怎么FQ这个话题，咱们放到其他文章里说。</p>\n<p>搜索到这个插件以后，直接<code>安装扩展</code>，安装好了，应该会显示在<code>chrome</code>的右上角，那里会有一个小图标，长的像这样</p>\n<p><img src=\"/images/Tampermonkey破解百度云下载限速/1.png\" alt=\"1\"></p>\n<p>有了这个小图标就说明安装已经成功了。</p>\n<p>这个<code>Tampermonkey</code>，他是一个管理用户脚本的软件，说白了，就是可以使用一种编程语言，某种<code>scripts</code>语言来开发<code>chrome</code>的扩展，在这里面你就可以实现很多基于<code>chrome</code>的功能了，比如遍历整个网页，抓出里面所有的图片，或者某些特征URL。这只是我举的例子。很多大神已经为我们写好了很多的脚本，我们直接使用就可以了，这里面就包括了破解百度云下载限速的脚本。</p>\n<p>我们访问， <a href=\"https://greasyfork.org/zh-CN/scripts/17800-%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6\" target=\"_blank\" rel=\"noopener\">解决百度云大文件下载限制</a> ，点击安装此脚本，安装完成之后，再试试去百度云点下载，不管多大的资源，都会直接使用网页进行下载，网页下载之后，我们再去下载内容里面，<strong>右键复制链接</strong>，直接放到迅雷里面下载，速度基本都是妥妥的，不用开会员，都没毛病，老铁！</p>\n<p>当然，最后，你要和说你不用<code>chrome</code>的话，那我就也只有呵呵了。￣へ￣</p>\n<p>开玩笑，其实所有<code>chrome</code>内核的浏览器都是可以的哈！</p>\n<p>嘻嘻。ヽ(￣▽￣)／</p>\n","site":{"data":{}},"excerpt":"<p>穷屌丝一个，充不起百度云的会员。充不起，难道我不下载百度云的资源了么？EI~~~ 当然不是，没会员我也得下啊，人家资源要放百度云，我有啥子办法嘛，四不啦！怎么下呢？没会员的话，基本就是30Kb/s起跳，封顶50kb/s，下到百度倒闭也下不完几个G的资源。这时候我们只需要一个<code>chrome</code>插件即可解决这个问题。四不四美滋滋？(～￣▽￣)～ </p>","more":"<p>在chrome里面破解百度云的下载限速，极其非常超级的简单，你只需要用到一个插件，名字叫做 <strong>Tampermonkey</strong>，中文翻译过来好多人把这个称做<code>油猴</code>，这个东西的安装，你使用chrome的话，只需要在<code>Chrome网上应用商店</code>里面直接搜索这个英文名字，就可以搜索到。当然，因为国内不可描述的一些原因，你在使用<code>Chrome网上应用商店</code>时，需要一个梯子，需要FQ。要怎么FQ这个话题，咱们放到其他文章里说。</p>\n<p>搜索到这个插件以后，直接<code>安装扩展</code>，安装好了，应该会显示在<code>chrome</code>的右上角，那里会有一个小图标，长的像这样</p>\n<p><img src=\"/images/Tampermonkey破解百度云下载限速/1.png\" alt=\"1\"></p>\n<p>有了这个小图标就说明安装已经成功了。</p>\n<p>这个<code>Tampermonkey</code>，他是一个管理用户脚本的软件，说白了，就是可以使用一种编程语言，某种<code>scripts</code>语言来开发<code>chrome</code>的扩展，在这里面你就可以实现很多基于<code>chrome</code>的功能了，比如遍历整个网页，抓出里面所有的图片，或者某些特征URL。这只是我举的例子。很多大神已经为我们写好了很多的脚本，我们直接使用就可以了，这里面就包括了破解百度云下载限速的脚本。</p>\n<p>我们访问， <a href=\"https://greasyfork.org/zh-CN/scripts/17800-%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6\" target=\"_blank\" rel=\"noopener\">解决百度云大文件下载限制</a> ，点击安装此脚本，安装完成之后，再试试去百度云点下载，不管多大的资源，都会直接使用网页进行下载，网页下载之后，我们再去下载内容里面，<strong>右键复制链接</strong>，直接放到迅雷里面下载，速度基本都是妥妥的，不用开会员，都没毛病，老铁！</p>\n<p>当然，最后，你要和说你不用<code>chrome</code>的话，那我就也只有呵呵了。￣へ￣</p>\n<p>开玩笑，其实所有<code>chrome</code>内核的浏览器都是可以的哈！</p>\n<p>嘻嘻。ヽ(￣▽￣)／</p>"},{"title":"centos7下yum安装mysql","date":"2016-04-02T14:52:54.000Z","_content":"\n我的博客部署的服务器是centos7，centos7中默认不包含mysql的安装文件\n\n就算有好像也是一个很老的版本\n\n可以根据下面的步骤安装mysql\n\n<!-- more-->\n\nCentOS 7的yum源中貌似没有正常安装mysql时的mysql-sever文件，需要去官网上下载\n\n```\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n```\n成功安装之后重启mysql服务\n```\n# service mysqld restart\n```\n初次安装mysql是root账户是没有密码的\n设置密码的方法\n```\n# mysql -uroot\nmysql> set password for ‘root’@‘localhost’ = password(‘mypasswd’);\nmysql> exit\n```\n搞定！","source":"_posts/centos7下yum安装mysql.md","raw":"---\ntitle: centos7下yum安装mysql\ndate: 2016-04-2 22:52:54\ntags: \n- linux\n- mysql\n- centos\ncategory: linux\n---\n\n我的博客部署的服务器是centos7，centos7中默认不包含mysql的安装文件\n\n就算有好像也是一个很老的版本\n\n可以根据下面的步骤安装mysql\n\n<!-- more-->\n\nCentOS 7的yum源中貌似没有正常安装mysql时的mysql-sever文件，需要去官网上下载\n\n```\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n```\n成功安装之后重启mysql服务\n```\n# service mysqld restart\n```\n初次安装mysql是root账户是没有密码的\n设置密码的方法\n```\n# mysql -uroot\nmysql> set password for ‘root’@‘localhost’ = password(‘mypasswd’);\nmysql> exit\n```\n搞定！","slug":"centos7下yum安装mysql","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgel000h0a6tfk9uqvd2","content":"<p>我的博客部署的服务器是centos7，centos7中默认不包含mysql的安装文件</p>\n<p>就算有好像也是一个很老的版本</p>\n<p>可以根据下面的步骤安装mysql</p>\n<a id=\"more\"></a>\n<p>CentOS 7的yum源中貌似没有正常安装mysql时的mysql-sever文件，需要去官网上下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>成功安装之后重启mysql服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysqld restart</span><br></pre></td></tr></table></figure></p>\n<p>初次安装mysql是root账户是没有密码的<br>设置密码的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql -uroot</span><br><span class=\"line\">mysql&gt; set password for ‘root’@‘localhost’ = password(‘mypasswd’);</span><br><span class=\"line\">mysql&gt; exit</span><br></pre></td></tr></table></figure></p>\n<p>搞定！</p>\n","site":{"data":{}},"excerpt":"<p>我的博客部署的服务器是centos7，centos7中默认不包含mysql的安装文件</p>\n<p>就算有好像也是一个很老的版本</p>\n<p>可以根据下面的步骤安装mysql</p>","more":"<p>CentOS 7的yum源中貌似没有正常安装mysql时的mysql-sever文件，需要去官网上下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\"># yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>成功安装之后重启mysql服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service mysqld restart</span><br></pre></td></tr></table></figure></p>\n<p>初次安装mysql是root账户是没有密码的<br>设置密码的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># mysql -uroot</span><br><span class=\"line\">mysql&gt; set password for ‘root’@‘localhost’ = password(‘mypasswd’);</span><br><span class=\"line\">mysql&gt; exit</span><br></pre></td></tr></table></figure></p>\n<p>搞定！</p>"},{"title":"使用vscode开发go语言-vscode中go语言的开发与调试环境搭建教程","date":"2016-07-27T15:50:01.000Z","_content":"\n- 第一步下载Go的安装包，\n\n > https://golang.org/project/\n\n 这个应该没什么说的\n\n 截止我写这篇教程时，Go的最新版本是1.6.2，本教程也是使用的此版本\n <!--more-->\n\n- 直接全部下一步安装，如果你也是默认下一步安装完成，那你的Go应该安装在C盘的Go文件夹下\n\n ![vscode](/images/vscode/1.png)\n\n- 这样Go的运行环境就安装完了，感觉智障都不会有困难的。我还写这么详细，我也是智障。。。\n\n\t 安装完了，还得配置\n\n\t 一开始，我们没有IDE，只能使用windows下面的CMD命令行运行，为了在每个路径下都可以直接运行Go命令，我们需要配置 系统环境变量的 Path\n\n\t 别告诉我不知道怎么配，复制 C:\\Go\\bin 到下图\n\n\t ![vscode](/images/vscode/2.png)\n\n\t 用分号分隔。\n\n\t 接下来配置GOPATH\n\n\t ![vscode](/images/vscode/3.png)\n\n\t GOPATH是你的项目路径，用于运行时默认寻找Go依赖包的地址，如果学过Java，可以认为是classpath，不过Go更加依赖这个Path\n\n\t 比如图里的E:\\goDemo就是我的项目存放地址，后面各种下载包也会下载到这里\n\n\t 还没完！\n\n\t 配置GOROOT!\n\n\t ![vscode](/images/vscode/4.png)\n\n\t 就是Go的根路径，类似Java_home\n\n\n\n- 这样整个环境算OK了，可以在CMD中试试，go version，可以查看Go的版本号\n\t这样说明Go已经配置好\n\n\n- 写个helloworld.go吧，测试下gopath啥的，helloworld怎么写呢\n\n\t```go\n\tpackage main\n\n\timport \"fmt\"\n\n\tfunc main(){\n\t    fmt.Println(\"hello world\");\n\t}\n\t```\n\t使用go run helloworld.go运行，打印出helloworld 就算OK了。\n\n-  好了运行环境，已经OK了，现在来搭建IDE，我试了几款，最后选择了VSCODE，类似Sublime的一个文本编辑器，但是也是很多插件，对Go支持还是不错的，支持代码补全，提示，调试断点\n\n\t先去下载VSCODE，\n\t> https://code.visualstudio.com/\n\n\t一直下一步，不说了，最多改下安装路径哈。\n\n- 安装好后，安装go插件，在vscode界面上，使用快捷键，ctrl+shift+p,呼出命令窗口，跟sublime其实快捷键都是一样的，然后敲几个install字母，就出来安装扩展的提示，选择安装扩展\n\n ![vscode](/images/vscode/5.png)\n\n 然后就会出来下面这个界面，有时可能比较慢，感觉微软的服务器也不怎么快\n\n ![vscode](/images/vscode/6.png)\n\n 看到Go了么，直接点他安装，然后等，有时还挺久的\n\n 装的时候没有进度条，只有左下角，有个发亮在动的图标在告诉你，正在下载安装\n\n ![vscode](/images/vscode/7.png)\n\n 等丫安装完。\n\n 安装完以后重启。\n\n 重启VS CODE啊，不是电脑哈~\n\n 重启完之后并不是就都完了，真正麻烦的事来了，因为整个VSCODE其实就是依赖GO的各种工具在运行，其实他就是整合下Go的各个工具，所以他需要依赖Go的各种工具\n\n 但是，你懂得，我们有墙，会比较难下载，经常会失败\n\n 好了，现在看右下角\n\n ![vscode](/images/vscode/8.png)\n\n 缺失了很多工具，点一下，会提示让你安装，你就点一下嘛，也不会吃亏\n\n\n ![vscode](/images/vscode/9.png)\n\n\n 点一下，就告诉你，GOPATH下没有工具，玩不下去了，好了，点install，不废话\n\n install完，看是不是还会报，有tool找不到，如果还报，就上大招\n\n 在命令行中执行 `\"git clone https://github.com/golang/tools.git\"(需要提前安装git) `，自己去拉工具的源码，其实这些工具都是一个一个的GO源码文件，编译完就成了工具\n\n 把克隆下来的tools文件夹复制到你的GOPATH下面的，src\\golang.org\\x文件夹中，记得要自己新建这个文件目录，如果没有的话\n\n OK以后，重启VSCODE\n\n 这时候VSCODE又会重新编译GOPATH下面的源码，然后生成一堆工具，最后会这样\n\n\n ![vscode](/images/vscode/10.png)\n\n debug那个文件无视，dlv现在你们也还没有\n\n 如果不愿去拉，也可以直接下载，我的打包，直接放到对应BIN目录就行，重启\n\n > **[点这个可爱的链接下载(＾－＾)V](http://yaoboss.me/bin.zip \"点这个可爱的链接\") **\n\n 这样，提示，补全，等功能都应该有了，但是还是没法运行，和调试\n\n\n\n- 在命令行中执行“go get -u -v github.com/derekparker/delve/cmd/dlv”\n\n 去拉DLV的代码，这个工具是调试用的，一样，拉下了以后，重启\n\n 刚才我的那个BIN包已经包含dlv，你们可以直接用，一条龙！\n\n- 现在就可以调试了\n\n 但是要注意几点，\n\n 第一次点调试运行的时候，会让你选择，要用什么调试环境，有node啥的选择，当然选Go拉！\n\n 然后就会弹出一个配置文件\n\n ![vscode](/images/vscode/11.png)\n\n 这个文件只要注意我圈红的地方\n\n 这个路径，是你需要调试的main函数执行的文件的所在文件夹路径\n\n 必须要配置，否则，默认就在你打开的那个文件路径下\n\n 如果你不配置就会出现下面这个错误\n\n ![vscode](/images/vscode/12.png)\n\n 找不到可执行的包。\n\n\n\n**好了，最后，这样整个GO的环境搭建，已经开发调试环境，都配置完了。愉快的日狗(GO)了！**","source":"_posts/develop-go-with-vscode-and-bulid-vscode-enviroment.md","raw":"---\ntitle: 使用vscode开发go语言-vscode中go语言的开发与调试环境搭建教程\ndate: 2016-07-27 23:50:01\ntags:\n- vscode\n- go\ncategory:\n- go\n---\n\n- 第一步下载Go的安装包，\n\n > https://golang.org/project/\n\n 这个应该没什么说的\n\n 截止我写这篇教程时，Go的最新版本是1.6.2，本教程也是使用的此版本\n <!--more-->\n\n- 直接全部下一步安装，如果你也是默认下一步安装完成，那你的Go应该安装在C盘的Go文件夹下\n\n ![vscode](/images/vscode/1.png)\n\n- 这样Go的运行环境就安装完了，感觉智障都不会有困难的。我还写这么详细，我也是智障。。。\n\n\t 安装完了，还得配置\n\n\t 一开始，我们没有IDE，只能使用windows下面的CMD命令行运行，为了在每个路径下都可以直接运行Go命令，我们需要配置 系统环境变量的 Path\n\n\t 别告诉我不知道怎么配，复制 C:\\Go\\bin 到下图\n\n\t ![vscode](/images/vscode/2.png)\n\n\t 用分号分隔。\n\n\t 接下来配置GOPATH\n\n\t ![vscode](/images/vscode/3.png)\n\n\t GOPATH是你的项目路径，用于运行时默认寻找Go依赖包的地址，如果学过Java，可以认为是classpath，不过Go更加依赖这个Path\n\n\t 比如图里的E:\\goDemo就是我的项目存放地址，后面各种下载包也会下载到这里\n\n\t 还没完！\n\n\t 配置GOROOT!\n\n\t ![vscode](/images/vscode/4.png)\n\n\t 就是Go的根路径，类似Java_home\n\n\n\n- 这样整个环境算OK了，可以在CMD中试试，go version，可以查看Go的版本号\n\t这样说明Go已经配置好\n\n\n- 写个helloworld.go吧，测试下gopath啥的，helloworld怎么写呢\n\n\t```go\n\tpackage main\n\n\timport \"fmt\"\n\n\tfunc main(){\n\t    fmt.Println(\"hello world\");\n\t}\n\t```\n\t使用go run helloworld.go运行，打印出helloworld 就算OK了。\n\n-  好了运行环境，已经OK了，现在来搭建IDE，我试了几款，最后选择了VSCODE，类似Sublime的一个文本编辑器，但是也是很多插件，对Go支持还是不错的，支持代码补全，提示，调试断点\n\n\t先去下载VSCODE，\n\t> https://code.visualstudio.com/\n\n\t一直下一步，不说了，最多改下安装路径哈。\n\n- 安装好后，安装go插件，在vscode界面上，使用快捷键，ctrl+shift+p,呼出命令窗口，跟sublime其实快捷键都是一样的，然后敲几个install字母，就出来安装扩展的提示，选择安装扩展\n\n ![vscode](/images/vscode/5.png)\n\n 然后就会出来下面这个界面，有时可能比较慢，感觉微软的服务器也不怎么快\n\n ![vscode](/images/vscode/6.png)\n\n 看到Go了么，直接点他安装，然后等，有时还挺久的\n\n 装的时候没有进度条，只有左下角，有个发亮在动的图标在告诉你，正在下载安装\n\n ![vscode](/images/vscode/7.png)\n\n 等丫安装完。\n\n 安装完以后重启。\n\n 重启VS CODE啊，不是电脑哈~\n\n 重启完之后并不是就都完了，真正麻烦的事来了，因为整个VSCODE其实就是依赖GO的各种工具在运行，其实他就是整合下Go的各个工具，所以他需要依赖Go的各种工具\n\n 但是，你懂得，我们有墙，会比较难下载，经常会失败\n\n 好了，现在看右下角\n\n ![vscode](/images/vscode/8.png)\n\n 缺失了很多工具，点一下，会提示让你安装，你就点一下嘛，也不会吃亏\n\n\n ![vscode](/images/vscode/9.png)\n\n\n 点一下，就告诉你，GOPATH下没有工具，玩不下去了，好了，点install，不废话\n\n install完，看是不是还会报，有tool找不到，如果还报，就上大招\n\n 在命令行中执行 `\"git clone https://github.com/golang/tools.git\"(需要提前安装git) `，自己去拉工具的源码，其实这些工具都是一个一个的GO源码文件，编译完就成了工具\n\n 把克隆下来的tools文件夹复制到你的GOPATH下面的，src\\golang.org\\x文件夹中，记得要自己新建这个文件目录，如果没有的话\n\n OK以后，重启VSCODE\n\n 这时候VSCODE又会重新编译GOPATH下面的源码，然后生成一堆工具，最后会这样\n\n\n ![vscode](/images/vscode/10.png)\n\n debug那个文件无视，dlv现在你们也还没有\n\n 如果不愿去拉，也可以直接下载，我的打包，直接放到对应BIN目录就行，重启\n\n > **[点这个可爱的链接下载(＾－＾)V](http://yaoboss.me/bin.zip \"点这个可爱的链接\") **\n\n 这样，提示，补全，等功能都应该有了，但是还是没法运行，和调试\n\n\n\n- 在命令行中执行“go get -u -v github.com/derekparker/delve/cmd/dlv”\n\n 去拉DLV的代码，这个工具是调试用的，一样，拉下了以后，重启\n\n 刚才我的那个BIN包已经包含dlv，你们可以直接用，一条龙！\n\n- 现在就可以调试了\n\n 但是要注意几点，\n\n 第一次点调试运行的时候，会让你选择，要用什么调试环境，有node啥的选择，当然选Go拉！\n\n 然后就会弹出一个配置文件\n\n ![vscode](/images/vscode/11.png)\n\n 这个文件只要注意我圈红的地方\n\n 这个路径，是你需要调试的main函数执行的文件的所在文件夹路径\n\n 必须要配置，否则，默认就在你打开的那个文件路径下\n\n 如果你不配置就会出现下面这个错误\n\n ![vscode](/images/vscode/12.png)\n\n 找不到可执行的包。\n\n\n\n**好了，最后，这样整个GO的环境搭建，已经开发调试环境，都配置完了。愉快的日狗(GO)了！**","slug":"develop-go-with-vscode-and-bulid-vscode-enviroment","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgeq000m0a6tl5z2upwe","content":"<ul>\n<li><p>第一步下载Go的安装包，</p>\n<blockquote>\n<p><a href=\"https://golang.org/project/\" target=\"_blank\" rel=\"noopener\">https://golang.org/project/</a></p>\n</blockquote>\n<p>这个应该没什么说的</p>\n<p>截止我写这篇教程时，Go的最新版本是1.6.2，本教程也是使用的此版本</p>\n<a id=\"more\"></a>\n</li>\n<li><p>直接全部下一步安装，如果你也是默认下一步安装完成，那你的Go应该安装在C盘的Go文件夹下</p>\n<p><img src=\"/images/vscode/1.png\" alt=\"vscode\"></p>\n</li>\n<li><p>这样Go的运行环境就安装完了，感觉智障都不会有困难的。我还写这么详细，我也是智障。。。</p>\n<p>   安装完了，还得配置</p>\n<p>   一开始，我们没有IDE，只能使用windows下面的CMD命令行运行，为了在每个路径下都可以直接运行Go命令，我们需要配置 系统环境变量的 Path</p>\n<p>   别告诉我不知道怎么配，复制 C:\\Go\\bin 到下图</p>\n<p>   <img src=\"/images/vscode/2.png\" alt=\"vscode\"></p>\n<p>   用分号分隔。</p>\n<p>   接下来配置GOPATH</p>\n<p>   <img src=\"/images/vscode/3.png\" alt=\"vscode\"></p>\n<p>   GOPATH是你的项目路径，用于运行时默认寻找Go依赖包的地址，如果学过Java，可以认为是classpath，不过Go更加依赖这个Path</p>\n<p>   比如图里的E:\\goDemo就是我的项目存放地址，后面各种下载包也会下载到这里</p>\n<p>   还没完！</p>\n<p>   配置GOROOT!</p>\n<p>   <img src=\"/images/vscode/4.png\" alt=\"vscode\"></p>\n<p>   就是Go的根路径，类似Java_home</p>\n</li>\n</ul>\n<ul>\n<li>这样整个环境算OK了，可以在CMD中试试，go version，可以查看Go的版本号<br>  这样说明Go已经配置好</li>\n</ul>\n<ul>\n<li><p>写个helloworld.go吧，测试下gopath啥的，helloworld怎么写呢</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  使用go run helloworld.go运行，打印出helloworld 就算OK了。</p>\n</li>\n<li><p>好了运行环境，已经OK了，现在来搭建IDE，我试了几款，最后选择了VSCODE，类似Sublime的一个文本编辑器，但是也是很多插件，对Go支持还是不错的，支持代码补全，提示，调试断点</p>\n<p> 先去下载VSCODE，</p>\n<blockquote>\n<p><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/</a></p>\n</blockquote>\n<p> 一直下一步，不说了，最多改下安装路径哈。</p>\n</li>\n<li><p>安装好后，安装go插件，在vscode界面上，使用快捷键，ctrl+shift+p,呼出命令窗口，跟sublime其实快捷键都是一样的，然后敲几个install字母，就出来安装扩展的提示，选择安装扩展</p>\n<p><img src=\"/images/vscode/5.png\" alt=\"vscode\"></p>\n<p>然后就会出来下面这个界面，有时可能比较慢，感觉微软的服务器也不怎么快</p>\n<p><img src=\"/images/vscode/6.png\" alt=\"vscode\"></p>\n<p>看到Go了么，直接点他安装，然后等，有时还挺久的</p>\n<p>装的时候没有进度条，只有左下角，有个发亮在动的图标在告诉你，正在下载安装</p>\n<p><img src=\"/images/vscode/7.png\" alt=\"vscode\"></p>\n<p>等丫安装完。</p>\n<p>安装完以后重启。</p>\n<p>重启VS CODE啊，不是电脑哈~</p>\n<p>重启完之后并不是就都完了，真正麻烦的事来了，因为整个VSCODE其实就是依赖GO的各种工具在运行，其实他就是整合下Go的各个工具，所以他需要依赖Go的各种工具</p>\n<p>但是，你懂得，我们有墙，会比较难下载，经常会失败</p>\n<p>好了，现在看右下角</p>\n<p><img src=\"/images/vscode/8.png\" alt=\"vscode\"></p>\n<p>缺失了很多工具，点一下，会提示让你安装，你就点一下嘛，也不会吃亏</p>\n</li>\n</ul>\n<p> <img src=\"/images/vscode/9.png\" alt=\"vscode\"></p>\n<p> 点一下，就告诉你，GOPATH下没有工具，玩不下去了，好了，点install，不废话</p>\n<p> install完，看是不是还会报，有tool找不到，如果还报，就上大招</p>\n<p> 在命令行中执行 <code>&quot;git clone https://github.com/golang/tools.git&quot;(需要提前安装git)</code>，自己去拉工具的源码，其实这些工具都是一个一个的GO源码文件，编译完就成了工具</p>\n<p> 把克隆下来的tools文件夹复制到你的GOPATH下面的，src\\golang.org\\x文件夹中，记得要自己新建这个文件目录，如果没有的话</p>\n<p> OK以后，重启VSCODE</p>\n<p> 这时候VSCODE又会重新编译GOPATH下面的源码，然后生成一堆工具，最后会这样</p>\n<p> <img src=\"/images/vscode/10.png\" alt=\"vscode\"></p>\n<p> debug那个文件无视，dlv现在你们也还没有</p>\n<p> 如果不愿去拉，也可以直接下载，我的打包，直接放到对应BIN目录就行，重启</p>\n<blockquote>\n<p><strong><a href=\"http://yaoboss.me/bin.zip\" title=\"点这个可爱的链接\">点这个可爱的链接下载(＾－＾)V</a> </strong></p>\n</blockquote>\n<p> 这样，提示，补全，等功能都应该有了，但是还是没法运行，和调试</p>\n<ul>\n<li><p>在命令行中执行“go get -u -v github.com/derekparker/delve/cmd/dlv”</p>\n<p>去拉DLV的代码，这个工具是调试用的，一样，拉下了以后，重启</p>\n<p>刚才我的那个BIN包已经包含dlv，你们可以直接用，一条龙！</p>\n</li>\n<li><p>现在就可以调试了</p>\n<p>但是要注意几点，</p>\n<p>第一次点调试运行的时候，会让你选择，要用什么调试环境，有node啥的选择，当然选Go拉！</p>\n<p>然后就会弹出一个配置文件</p>\n<p><img src=\"/images/vscode/11.png\" alt=\"vscode\"></p>\n<p>这个文件只要注意我圈红的地方</p>\n<p>这个路径，是你需要调试的main函数执行的文件的所在文件夹路径</p>\n<p>必须要配置，否则，默认就在你打开的那个文件路径下</p>\n<p>如果你不配置就会出现下面这个错误</p>\n<p><img src=\"/images/vscode/12.png\" alt=\"vscode\"></p>\n<p>找不到可执行的包。</p>\n</li>\n</ul>\n<p><strong>好了，最后，这样整个GO的环境搭建，已经开发调试环境，都配置完了。愉快的日狗(GO)了！</strong></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>第一步下载Go的安装包，</p>\n<blockquote>\n<p><a href=\"https://golang.org/project/\" target=\"_blank\" rel=\"noopener\">https://golang.org/project/</a></p>\n</blockquote>\n<p>这个应该没什么说的</p>\n<p>截止我写这篇教程时，Go的最新版本是1.6.2，本教程也是使用的此版本</p>","more":"</li>\n<li><p>直接全部下一步安装，如果你也是默认下一步安装完成，那你的Go应该安装在C盘的Go文件夹下</p>\n<p><img src=\"/images/vscode/1.png\" alt=\"vscode\"></p>\n</li>\n<li><p>这样Go的运行环境就安装完了，感觉智障都不会有困难的。我还写这么详细，我也是智障。。。</p>\n<p>   安装完了，还得配置</p>\n<p>   一开始，我们没有IDE，只能使用windows下面的CMD命令行运行，为了在每个路径下都可以直接运行Go命令，我们需要配置 系统环境变量的 Path</p>\n<p>   别告诉我不知道怎么配，复制 C:\\Go\\bin 到下图</p>\n<p>   <img src=\"/images/vscode/2.png\" alt=\"vscode\"></p>\n<p>   用分号分隔。</p>\n<p>   接下来配置GOPATH</p>\n<p>   <img src=\"/images/vscode/3.png\" alt=\"vscode\"></p>\n<p>   GOPATH是你的项目路径，用于运行时默认寻找Go依赖包的地址，如果学过Java，可以认为是classpath，不过Go更加依赖这个Path</p>\n<p>   比如图里的E:\\goDemo就是我的项目存放地址，后面各种下载包也会下载到这里</p>\n<p>   还没完！</p>\n<p>   配置GOROOT!</p>\n<p>   <img src=\"/images/vscode/4.png\" alt=\"vscode\"></p>\n<p>   就是Go的根路径，类似Java_home</p>\n</li>\n</ul>\n<ul>\n<li>这样整个环境算OK了，可以在CMD中试试，go version，可以查看Go的版本号<br>  这样说明Go已经配置好</li>\n</ul>\n<ul>\n<li><p>写个helloworld.go吧，测试下gopath啥的，helloworld怎么写呢</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  使用go run helloworld.go运行，打印出helloworld 就算OK了。</p>\n</li>\n<li><p>好了运行环境，已经OK了，现在来搭建IDE，我试了几款，最后选择了VSCODE，类似Sublime的一个文本编辑器，但是也是很多插件，对Go支持还是不错的，支持代码补全，提示，调试断点</p>\n<p> 先去下载VSCODE，</p>\n<blockquote>\n<p><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/</a></p>\n</blockquote>\n<p> 一直下一步，不说了，最多改下安装路径哈。</p>\n</li>\n<li><p>安装好后，安装go插件，在vscode界面上，使用快捷键，ctrl+shift+p,呼出命令窗口，跟sublime其实快捷键都是一样的，然后敲几个install字母，就出来安装扩展的提示，选择安装扩展</p>\n<p><img src=\"/images/vscode/5.png\" alt=\"vscode\"></p>\n<p>然后就会出来下面这个界面，有时可能比较慢，感觉微软的服务器也不怎么快</p>\n<p><img src=\"/images/vscode/6.png\" alt=\"vscode\"></p>\n<p>看到Go了么，直接点他安装，然后等，有时还挺久的</p>\n<p>装的时候没有进度条，只有左下角，有个发亮在动的图标在告诉你，正在下载安装</p>\n<p><img src=\"/images/vscode/7.png\" alt=\"vscode\"></p>\n<p>等丫安装完。</p>\n<p>安装完以后重启。</p>\n<p>重启VS CODE啊，不是电脑哈~</p>\n<p>重启完之后并不是就都完了，真正麻烦的事来了，因为整个VSCODE其实就是依赖GO的各种工具在运行，其实他就是整合下Go的各个工具，所以他需要依赖Go的各种工具</p>\n<p>但是，你懂得，我们有墙，会比较难下载，经常会失败</p>\n<p>好了，现在看右下角</p>\n<p><img src=\"/images/vscode/8.png\" alt=\"vscode\"></p>\n<p>缺失了很多工具，点一下，会提示让你安装，你就点一下嘛，也不会吃亏</p>\n</li>\n</ul>\n<p> <img src=\"/images/vscode/9.png\" alt=\"vscode\"></p>\n<p> 点一下，就告诉你，GOPATH下没有工具，玩不下去了，好了，点install，不废话</p>\n<p> install完，看是不是还会报，有tool找不到，如果还报，就上大招</p>\n<p> 在命令行中执行 <code>&quot;git clone https://github.com/golang/tools.git&quot;(需要提前安装git)</code>，自己去拉工具的源码，其实这些工具都是一个一个的GO源码文件，编译完就成了工具</p>\n<p> 把克隆下来的tools文件夹复制到你的GOPATH下面的，src\\golang.org\\x文件夹中，记得要自己新建这个文件目录，如果没有的话</p>\n<p> OK以后，重启VSCODE</p>\n<p> 这时候VSCODE又会重新编译GOPATH下面的源码，然后生成一堆工具，最后会这样</p>\n<p> <img src=\"/images/vscode/10.png\" alt=\"vscode\"></p>\n<p> debug那个文件无视，dlv现在你们也还没有</p>\n<p> 如果不愿去拉，也可以直接下载，我的打包，直接放到对应BIN目录就行，重启</p>\n<blockquote>\n<p><strong><a href=\"http://yaoboss.me/bin.zip\" title=\"点这个可爱的链接\">点这个可爱的链接下载(＾－＾)V</a> </strong></p>\n</blockquote>\n<p> 这样，提示，补全，等功能都应该有了，但是还是没法运行，和调试</p>\n<ul>\n<li><p>在命令行中执行“go get -u -v github.com/derekparker/delve/cmd/dlv”</p>\n<p>去拉DLV的代码，这个工具是调试用的，一样，拉下了以后，重启</p>\n<p>刚才我的那个BIN包已经包含dlv，你们可以直接用，一条龙！</p>\n</li>\n<li><p>现在就可以调试了</p>\n<p>但是要注意几点，</p>\n<p>第一次点调试运行的时候，会让你选择，要用什么调试环境，有node啥的选择，当然选Go拉！</p>\n<p>然后就会弹出一个配置文件</p>\n<p><img src=\"/images/vscode/11.png\" alt=\"vscode\"></p>\n<p>这个文件只要注意我圈红的地方</p>\n<p>这个路径，是你需要调试的main函数执行的文件的所在文件夹路径</p>\n<p>必须要配置，否则，默认就在你打开的那个文件路径下</p>\n<p>如果你不配置就会出现下面这个错误</p>\n<p><img src=\"/images/vscode/12.png\" alt=\"vscode\"></p>\n<p>找不到可执行的包。</p>\n</li>\n</ul>\n<p><strong>好了，最后，这样整个GO的环境搭建，已经开发调试环境，都配置完了。愉快的日狗(GO)了！</strong></p>"},{"title":"烦人的Maven仓库","date":"2016-09-24T04:47:26.000Z","_content":"\n> 由于众所周知那堵伟大的WALL，国内使用maven时最容易，也最烦的问题就是maven的仓库问题。时不时的大姨妈一下。没有可靠的镜像。也不知道从什么时候开始，开源中国的`maven镜像仓库`也已经是完全ping不同了，死翘翘了的感觉。\n\n\n今天在家拉`spring`的源码，也是相当费劲。别看这么一个小小问题，但是很容易几个小时就耗在这上面。然而，解决这种问题，对于你的技术水平真的是一点进步都没有。sign~\n\n今天就记录下，我花了一个小时搞的结果吧。让后面看到的人，可以5分钟搞定这个问题，我的目的就达到了。\n\n<!-- more-->\n\n因为镜像很难保证百分百一直稳定，所以我会一直保持更新，如果哪天我发现镜像不行了，我也会去找新的，然后更新到博客上来。\n\n----\n\n我选择的镜像是下面这个：\n\n> http://uk.maven.org/maven2/\n\n备用地址：\n> http://maven.aliyun.com/nexus/content/groups/public\n\n可以直接在浏览器里面访问这个地址，如果访问成功，那就说明还是可用的。\n\n接下来是maven修改默认仓库地址的方法：\n\n我选择修改的是`针对单用户生效`的方式，也就是只针对当前用户生效，这种方式会覆盖全局的设置方式\n\n首先找到配置文件地址\n\n我的是`window 7`系统，找到`C`盘->用户->{你的系统用户名}->.m2文件夹->settings.xml\n\n找到`<mirrors></mirrors>`标签，在中间插入下面的代码\n\n```xml\n\n<mirror>\n  <id>ui</id>\n  <mirrorOf>central</mirrorOf>\n  <name>Human Readable Name for this Mirror.</name>\n <url>http://uk.maven.org/maven2/</url>\n</mirror>\n\n```\n\n配置完上面，所有的`jar`包都会去上面的仓库寻找拉取了\n\n不过maven还依赖一些`plugins`，拉取`plugins`也需要去仓库，所以也需要配置镜像\n\n在刚才的文件中，往下面找，找到`<profiles></profiles>`标签\n\n在其中插入下面的代码\n\n```xml\n<profile>\n    <id>jdk-1.7</id>\n    <activation>\n    <jdk>1.7</jdk>\n    </activation>\n    <repositories>\n        <repository>\n            <id>nexus</id>\n            <name>local private nexus</name>\n            <url>http://uk.maven.org/maven2/</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>nexus</id>\n            <name>local private nexus</name>\n            <url>http://uk.maven.org/maven2/</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </pluginRepository>\n    </pluginRepositories>\n</profile>\n\n```\n\n**需要特别注意：** 这段代码里面有`id`,`jdk`的标签，一定要改成你自己本地使用的`jdk`版本，否则，配置不能生效的，这段配置的触发是根据`jdk`版本来的\n\n---\n\n到此为止，配置结束。应该可以很快的拉取`repo`里的`jar`包了。\n\nPS.\n\n关于上面的`JDK版本`配置问题：\n在`settings.xml`有段注释说明了这个问题，我一开始也没注意到，导致配置不成功。注释里举了个例子，并且做了说明：\n\n```xml\n\n    <!-- profile\n     | Specifies a set of introductions to the build process, to be activated using one or more of the\n     | mechanisms described above. For inheritance purposes, and to activate profiles via <activatedProfiles/>\n     | or the command line, profiles have to have an ID that is unique.\n     |\n     | An encouraged best practice for profile identification is to use a consistent naming convention\n     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.\n     | This will make it more intuitive to understand what the set of introduced profiles is attempting\n     | to accomplish, particularly when you only have a list of profile id's for debug.\n     |\n     | **（This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.）** 主要就是这句话\n    <profile>\n      <id>jdk-1.4</id>\n\n      <activation>\n        <jdk>1.4</jdk>\n      </activation>\n\n      <repositories>\n        <repository>\n          <id>jdk14</id>\n          <name>Repository for JDK 1.4 builds</name>\n          <url>http://www.myhost.com/maven/jdk14</url>\n          <layout>default</layout>\n          <snapshotPolicy>always</snapshotPolicy>\n        </repository>\n      </repositories>\n    </profile>\n    -->\n\n```","source":"_posts/annoying-maven-repo.md","raw":"---\ntitle: 烦人的Maven仓库\ndate: 2016-09-24 12:47:26\ntags:\n- maven\n- java\ncategory:\n- java\n---\n\n> 由于众所周知那堵伟大的WALL，国内使用maven时最容易，也最烦的问题就是maven的仓库问题。时不时的大姨妈一下。没有可靠的镜像。也不知道从什么时候开始，开源中国的`maven镜像仓库`也已经是完全ping不同了，死翘翘了的感觉。\n\n\n今天在家拉`spring`的源码，也是相当费劲。别看这么一个小小问题，但是很容易几个小时就耗在这上面。然而，解决这种问题，对于你的技术水平真的是一点进步都没有。sign~\n\n今天就记录下，我花了一个小时搞的结果吧。让后面看到的人，可以5分钟搞定这个问题，我的目的就达到了。\n\n<!-- more-->\n\n因为镜像很难保证百分百一直稳定，所以我会一直保持更新，如果哪天我发现镜像不行了，我也会去找新的，然后更新到博客上来。\n\n----\n\n我选择的镜像是下面这个：\n\n> http://uk.maven.org/maven2/\n\n备用地址：\n> http://maven.aliyun.com/nexus/content/groups/public\n\n可以直接在浏览器里面访问这个地址，如果访问成功，那就说明还是可用的。\n\n接下来是maven修改默认仓库地址的方法：\n\n我选择修改的是`针对单用户生效`的方式，也就是只针对当前用户生效，这种方式会覆盖全局的设置方式\n\n首先找到配置文件地址\n\n我的是`window 7`系统，找到`C`盘->用户->{你的系统用户名}->.m2文件夹->settings.xml\n\n找到`<mirrors></mirrors>`标签，在中间插入下面的代码\n\n```xml\n\n<mirror>\n  <id>ui</id>\n  <mirrorOf>central</mirrorOf>\n  <name>Human Readable Name for this Mirror.</name>\n <url>http://uk.maven.org/maven2/</url>\n</mirror>\n\n```\n\n配置完上面，所有的`jar`包都会去上面的仓库寻找拉取了\n\n不过maven还依赖一些`plugins`，拉取`plugins`也需要去仓库，所以也需要配置镜像\n\n在刚才的文件中，往下面找，找到`<profiles></profiles>`标签\n\n在其中插入下面的代码\n\n```xml\n<profile>\n    <id>jdk-1.7</id>\n    <activation>\n    <jdk>1.7</jdk>\n    </activation>\n    <repositories>\n        <repository>\n            <id>nexus</id>\n            <name>local private nexus</name>\n            <url>http://uk.maven.org/maven2/</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>nexus</id>\n            <name>local private nexus</name>\n            <url>http://uk.maven.org/maven2/</url>\n            <releases>\n                <enabled>true</enabled>\n            </releases>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </pluginRepository>\n    </pluginRepositories>\n</profile>\n\n```\n\n**需要特别注意：** 这段代码里面有`id`,`jdk`的标签，一定要改成你自己本地使用的`jdk`版本，否则，配置不能生效的，这段配置的触发是根据`jdk`版本来的\n\n---\n\n到此为止，配置结束。应该可以很快的拉取`repo`里的`jar`包了。\n\nPS.\n\n关于上面的`JDK版本`配置问题：\n在`settings.xml`有段注释说明了这个问题，我一开始也没注意到，导致配置不成功。注释里举了个例子，并且做了说明：\n\n```xml\n\n    <!-- profile\n     | Specifies a set of introductions to the build process, to be activated using one or more of the\n     | mechanisms described above. For inheritance purposes, and to activate profiles via <activatedProfiles/>\n     | or the command line, profiles have to have an ID that is unique.\n     |\n     | An encouraged best practice for profile identification is to use a consistent naming convention\n     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.\n     | This will make it more intuitive to understand what the set of introduced profiles is attempting\n     | to accomplish, particularly when you only have a list of profile id's for debug.\n     |\n     | **（This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.）** 主要就是这句话\n    <profile>\n      <id>jdk-1.4</id>\n\n      <activation>\n        <jdk>1.4</jdk>\n      </activation>\n\n      <repositories>\n        <repository>\n          <id>jdk14</id>\n          <name>Repository for JDK 1.4 builds</name>\n          <url>http://www.myhost.com/maven/jdk14</url>\n          <layout>default</layout>\n          <snapshotPolicy>always</snapshotPolicy>\n        </repository>\n      </repositories>\n    </profile>\n    -->\n\n```","slug":"annoying-maven-repo","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgey000n0a6t0dxknj0f","content":"<blockquote>\n<p>由于众所周知那堵伟大的WALL，国内使用maven时最容易，也最烦的问题就是maven的仓库问题。时不时的大姨妈一下。没有可靠的镜像。也不知道从什么时候开始，开源中国的<code>maven镜像仓库</code>也已经是完全ping不同了，死翘翘了的感觉。</p>\n</blockquote>\n<p>今天在家拉<code>spring</code>的源码，也是相当费劲。别看这么一个小小问题，但是很容易几个小时就耗在这上面。然而，解决这种问题，对于你的技术水平真的是一点进步都没有。sign~</p>\n<p>今天就记录下，我花了一个小时搞的结果吧。让后面看到的人，可以5分钟搞定这个问题，我的目的就达到了。</p>\n<a id=\"more\"></a>\n<p>因为镜像很难保证百分百一直稳定，所以我会一直保持更新，如果哪天我发现镜像不行了，我也会去找新的，然后更新到博客上来。</p>\n<hr>\n<p>我选择的镜像是下面这个：</p>\n<blockquote>\n<p><a href=\"http://uk.maven.org/maven2/\" target=\"_blank\" rel=\"noopener\">http://uk.maven.org/maven2/</a></p>\n</blockquote>\n<p>备用地址：</p>\n<blockquote>\n<p><a href=\"http://maven.aliyun.com/nexus/content/groups/public\" target=\"_blank\" rel=\"noopener\">http://maven.aliyun.com/nexus/content/groups/public</a></p>\n</blockquote>\n<p>可以直接在浏览器里面访问这个地址，如果访问成功，那就说明还是可用的。</p>\n<p>接下来是maven修改默认仓库地址的方法：</p>\n<p>我选择修改的是<code>针对单用户生效</code>的方式，也就是只针对当前用户生效，这种方式会覆盖全局的设置方式</p>\n<p>首先找到配置文件地址</p>\n<p>我的是<code>window 7</code>系统，找到<code>C</code>盘-&gt;用户-&gt;{你的系统用户名}-&gt;.m2文件夹-&gt;settings.xml</p>\n<p>找到<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签，在中间插入下面的代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>ui<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Human Readable Name for this Mirror.<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://uk.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置完上面，所有的<code>jar</code>包都会去上面的仓库寻找拉取了</p>\n<p>不过maven还依赖一些<code>plugins</code>，拉取<code>plugins</code>也需要去仓库，所以也需要配置镜像</p>\n<p>在刚才的文件中，往下面找，找到<code>&lt;profiles&gt;&lt;/profiles&gt;</code>标签</p>\n<p>在其中插入下面的代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.7<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>local private nexus<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://uk.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginRepositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>local private nexus<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://uk.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginRepositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要特别注意：</strong> 这段代码里面有<code>id</code>,<code>jdk</code>的标签，一定要改成你自己本地使用的<code>jdk</code>版本，否则，配置不能生效的，这段配置的触发是根据<code>jdk</code>版本来的</p>\n<hr>\n<p>到此为止，配置结束。应该可以很快的拉取<code>repo</code>里的<code>jar</code>包了。</p>\n<p>PS.</p>\n<p>关于上面的<code>JDK版本</code>配置问题：<br>在<code>settings.xml</code>有段注释说明了这个问题，我一开始也没注意到，导致配置不成功。注释里举了个例子，并且做了说明：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- profile</span></span><br><span class=\"line\"><span class=\"comment\"> | Specifies a set of introductions to the build process, to be activated using one or more of the</span></span><br><span class=\"line\"><span class=\"comment\"> | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> | or the command line, profiles have to have an ID that is unique.</span></span><br><span class=\"line\"><span class=\"comment\"> |</span></span><br><span class=\"line\"><span class=\"comment\"> | An encouraged best practice for profile identification is to use a consistent naming convention</span></span><br><span class=\"line\"><span class=\"comment\"> | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.</span></span><br><span class=\"line\"><span class=\"comment\"> | This will make it more intuitive to understand what the set of introduced profiles is attempting</span></span><br><span class=\"line\"><span class=\"comment\"> | to accomplish, particularly when you only have a list of profile id's for debug.</span></span><br><span class=\"line\"><span class=\"comment\"> |</span></span><br><span class=\"line\"><span class=\"comment\"> | **（This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.）** 主要就是这句话</span></span><br><span class=\"line\"><span class=\"comment\">&lt;profile&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;id&gt;jdk-1.4&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  &lt;activation&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;jdk&gt;1.4&lt;/jdk&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/activation&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  &lt;repositories&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;repository&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;id&gt;jdk14&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;layout&gt;default&lt;/layout&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/repository&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/repositories&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/profile&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>由于众所周知那堵伟大的WALL，国内使用maven时最容易，也最烦的问题就是maven的仓库问题。时不时的大姨妈一下。没有可靠的镜像。也不知道从什么时候开始，开源中国的<code>maven镜像仓库</code>也已经是完全ping不同了，死翘翘了的感觉。</p>\n</blockquote>\n<p>今天在家拉<code>spring</code>的源码，也是相当费劲。别看这么一个小小问题，但是很容易几个小时就耗在这上面。然而，解决这种问题，对于你的技术水平真的是一点进步都没有。sign~</p>\n<p>今天就记录下，我花了一个小时搞的结果吧。让后面看到的人，可以5分钟搞定这个问题，我的目的就达到了。</p>","more":"<p>因为镜像很难保证百分百一直稳定，所以我会一直保持更新，如果哪天我发现镜像不行了，我也会去找新的，然后更新到博客上来。</p>\n<hr>\n<p>我选择的镜像是下面这个：</p>\n<blockquote>\n<p><a href=\"http://uk.maven.org/maven2/\" target=\"_blank\" rel=\"noopener\">http://uk.maven.org/maven2/</a></p>\n</blockquote>\n<p>备用地址：</p>\n<blockquote>\n<p><a href=\"http://maven.aliyun.com/nexus/content/groups/public\" target=\"_blank\" rel=\"noopener\">http://maven.aliyun.com/nexus/content/groups/public</a></p>\n</blockquote>\n<p>可以直接在浏览器里面访问这个地址，如果访问成功，那就说明还是可用的。</p>\n<p>接下来是maven修改默认仓库地址的方法：</p>\n<p>我选择修改的是<code>针对单用户生效</code>的方式，也就是只针对当前用户生效，这种方式会覆盖全局的设置方式</p>\n<p>首先找到配置文件地址</p>\n<p>我的是<code>window 7</code>系统，找到<code>C</code>盘-&gt;用户-&gt;{你的系统用户名}-&gt;.m2文件夹-&gt;settings.xml</p>\n<p>找到<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签，在中间插入下面的代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>ui<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Human Readable Name for this Mirror.<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://uk.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置完上面，所有的<code>jar</code>包都会去上面的仓库寻找拉取了</p>\n<p>不过maven还依赖一些<code>plugins</code>，拉取<code>plugins</code>也需要去仓库，所以也需要配置镜像</p>\n<p>在刚才的文件中，往下面找，找到<code>&lt;profiles&gt;&lt;/profiles&gt;</code>标签</p>\n<p>在其中插入下面的代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.7<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>local private nexus<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://uk.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginRepositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>local private nexus<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://uk.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">pluginRepository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">pluginRepositories</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>需要特别注意：</strong> 这段代码里面有<code>id</code>,<code>jdk</code>的标签，一定要改成你自己本地使用的<code>jdk</code>版本，否则，配置不能生效的，这段配置的触发是根据<code>jdk</code>版本来的</p>\n<hr>\n<p>到此为止，配置结束。应该可以很快的拉取<code>repo</code>里的<code>jar</code>包了。</p>\n<p>PS.</p>\n<p>关于上面的<code>JDK版本</code>配置问题：<br>在<code>settings.xml</code>有段注释说明了这个问题，我一开始也没注意到，导致配置不成功。注释里举了个例子，并且做了说明：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- profile</span></span><br><span class=\"line\"><span class=\"comment\"> | Specifies a set of introductions to the build process, to be activated using one or more of the</span></span><br><span class=\"line\"><span class=\"comment\"> | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> | or the command line, profiles have to have an ID that is unique.</span></span><br><span class=\"line\"><span class=\"comment\"> |</span></span><br><span class=\"line\"><span class=\"comment\"> | An encouraged best practice for profile identification is to use a consistent naming convention</span></span><br><span class=\"line\"><span class=\"comment\"> | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.</span></span><br><span class=\"line\"><span class=\"comment\"> | This will make it more intuitive to understand what the set of introduced profiles is attempting</span></span><br><span class=\"line\"><span class=\"comment\"> | to accomplish, particularly when you only have a list of profile id's for debug.</span></span><br><span class=\"line\"><span class=\"comment\"> |</span></span><br><span class=\"line\"><span class=\"comment\"> | **（This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.）** 主要就是这句话</span></span><br><span class=\"line\"><span class=\"comment\">&lt;profile&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;id&gt;jdk-1.4&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  &lt;activation&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;jdk&gt;1.4&lt;/jdk&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/activation&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  &lt;repositories&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;repository&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;id&gt;jdk14&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;layout&gt;default&lt;/layout&gt;</span></span><br><span class=\"line\"><span class=\"comment\">      &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/repository&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/repositories&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/profile&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Go 语言中的 new() 和 make() 的区别","date":"2016-08-15T03:48:09.000Z","_content":"\n# 概述\n\nGo 语言中的 new 和 make 一直是新手比较容易混淆的东西，咋一看很相似。不过解释两者之间的不同也非常容易。\n\n## new 的主要特性\n\n首先 `new` 是内建函数，你可以从 http://golang.org/pkg/builtin/#new 这儿看到它，它的定义也很简单：\n\n```\nfunc new(Type) *Type\n\n```\n\n官方文档对于它的描述是：\n\n> 内建函数 `new` 用来分配内存，它的第一个参数是一个类型，不是一个值，它的返回值是一个指向新分配类型零值的指针\n\n根据这段描述，我们可以自己实现一个类似 `new` 的功能：\n\n```\nfunc newInt() *int {\n  var i int\n  return &i\n}\n\nsomeInt := newInt()\n\n```\n\n我们这个函数的功能跟 `someInt := new(int)` 一模一样。所以在我们自己定义 new 开头的函数时，出于约定也应该返回类型的指针。\n\n## make 的主要特性\n\n`make` 也是内建函数，你可以从 http://golang.org/pkg/builtin/#make 这儿看到它，它的定义比 new 多了一个参数，返回值也不同：\n\n```\nfunc make(Type, size IntegerType) Type\n\n```\n官方文档对于它的描述是：\n> 内建函数 `make` 用来为 `slice`，`map` 或 `chan` 类型分配内存和初始化一个对象(注意：只能用在这三种类型上)\u0010，跟 `new` 类似，第一个参数也是一个类型而不是一个值，跟 `new` 不同的是，`make` 返回类型的引用而不是指针，而返回值也依赖于具体传入的类型，具体说明如下：\n\n```\nSlice: 第二个参数 size 指定了它的长度，它的容量和长度相同。\n你可以传入第三个参数来指定不同的容量值，但必须不能比长度值小。\n比如 make([]int, 0, 10)\n\nMap: 根据 size 大小来初始化分配内存，不过分配后的 map 长度为 0，如果 size 被忽略了，那么会在初始化分配内存时分配一个小尺寸的内存\n\nChannel: 管道缓冲区依据缓冲区容量被初始化。如果容量为 0 或者忽略容量，管道是没有缓冲区的\n```\n\n## 总结\n\n`new` 的作用是初始化一个指向类型的指针(`*T`)，`make` 的作用是为 `slice`，`map` 或 `chan` 初始化并返回引用(T)。","source":"_posts/difference-of-make-and-new-in-go.md","raw":"---\ntitle: Go 语言中的 new() 和 make() 的区别\ndate: 2016-08-15 11:48:09\ntags:\n- go\ncategory:\n- go\n---\n\n# 概述\n\nGo 语言中的 new 和 make 一直是新手比较容易混淆的东西，咋一看很相似。不过解释两者之间的不同也非常容易。\n\n## new 的主要特性\n\n首先 `new` 是内建函数，你可以从 http://golang.org/pkg/builtin/#new 这儿看到它，它的定义也很简单：\n\n```\nfunc new(Type) *Type\n\n```\n\n官方文档对于它的描述是：\n\n> 内建函数 `new` 用来分配内存，它的第一个参数是一个类型，不是一个值，它的返回值是一个指向新分配类型零值的指针\n\n根据这段描述，我们可以自己实现一个类似 `new` 的功能：\n\n```\nfunc newInt() *int {\n  var i int\n  return &i\n}\n\nsomeInt := newInt()\n\n```\n\n我们这个函数的功能跟 `someInt := new(int)` 一模一样。所以在我们自己定义 new 开头的函数时，出于约定也应该返回类型的指针。\n\n## make 的主要特性\n\n`make` 也是内建函数，你可以从 http://golang.org/pkg/builtin/#make 这儿看到它，它的定义比 new 多了一个参数，返回值也不同：\n\n```\nfunc make(Type, size IntegerType) Type\n\n```\n官方文档对于它的描述是：\n> 内建函数 `make` 用来为 `slice`，`map` 或 `chan` 类型分配内存和初始化一个对象(注意：只能用在这三种类型上)\u0010，跟 `new` 类似，第一个参数也是一个类型而不是一个值，跟 `new` 不同的是，`make` 返回类型的引用而不是指针，而返回值也依赖于具体传入的类型，具体说明如下：\n\n```\nSlice: 第二个参数 size 指定了它的长度，它的容量和长度相同。\n你可以传入第三个参数来指定不同的容量值，但必须不能比长度值小。\n比如 make([]int, 0, 10)\n\nMap: 根据 size 大小来初始化分配内存，不过分配后的 map 长度为 0，如果 size 被忽略了，那么会在初始化分配内存时分配一个小尺寸的内存\n\nChannel: 管道缓冲区依据缓冲区容量被初始化。如果容量为 0 或者忽略容量，管道是没有缓冲区的\n```\n\n## 总结\n\n`new` 的作用是初始化一个指向类型的指针(`*T`)，`make` 的作用是为 `slice`，`map` 或 `chan` 初始化并返回引用(T)。","slug":"difference-of-make-and-new-in-go","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgf0000q0a6t7h9sgu38","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Go 语言中的 new 和 make 一直是新手比较容易混淆的东西，咋一看很相似。不过解释两者之间的不同也非常容易。</p>\n<h2 id=\"new-的主要特性\"><a href=\"#new-的主要特性\" class=\"headerlink\" title=\"new 的主要特性\"></a>new 的主要特性</h2><p>首先 <code>new</code> 是内建函数，你可以从 <a href=\"http://golang.org/pkg/builtin/#new\" target=\"_blank\" rel=\"noopener\">http://golang.org/pkg/builtin/#new</a> 这儿看到它，它的定义也很简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func new(Type) *Type</span><br></pre></td></tr></table></figure>\n<p>官方文档对于它的描述是：</p>\n<blockquote>\n<p>内建函数 <code>new</code> 用来分配内存，它的第一个参数是一个类型，不是一个值，它的返回值是一个指向新分配类型零值的指针</p>\n</blockquote>\n<p>根据这段描述，我们可以自己实现一个类似 <code>new</code> 的功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newInt() *int &#123;</span><br><span class=\"line\">  var i int</span><br><span class=\"line\">  return &amp;i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">someInt := newInt()</span><br></pre></td></tr></table></figure>\n<p>我们这个函数的功能跟 <code>someInt := new(int)</code> 一模一样。所以在我们自己定义 new 开头的函数时，出于约定也应该返回类型的指针。</p>\n<h2 id=\"make-的主要特性\"><a href=\"#make-的主要特性\" class=\"headerlink\" title=\"make 的主要特性\"></a>make 的主要特性</h2><p><code>make</code> 也是内建函数，你可以从 <a href=\"http://golang.org/pkg/builtin/#make\" target=\"_blank\" rel=\"noopener\">http://golang.org/pkg/builtin/#make</a> 这儿看到它，它的定义比 new 多了一个参数，返回值也不同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func make(Type, size IntegerType) Type</span><br></pre></td></tr></table></figure>\n<p>官方文档对于它的描述是：</p>\n<blockquote>\n<p>内建函数 <code>make</code> 用来为 <code>slice</code>，<code>map</code> 或 <code>chan</code> 类型分配内存和初始化一个对象(注意：只能用在这三种类型上)\u0010，跟 <code>new</code> 类似，第一个参数也是一个类型而不是一个值，跟 <code>new</code> 不同的是，<code>make</code> 返回类型的引用而不是指针，而返回值也依赖于具体传入的类型，具体说明如下：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Slice: 第二个参数 size 指定了它的长度，它的容量和长度相同。</span><br><span class=\"line\">你可以传入第三个参数来指定不同的容量值，但必须不能比长度值小。</span><br><span class=\"line\">比如 make([]int, 0, 10)</span><br><span class=\"line\"></span><br><span class=\"line\">Map: 根据 size 大小来初始化分配内存，不过分配后的 map 长度为 0，如果 size 被忽略了，那么会在初始化分配内存时分配一个小尺寸的内存</span><br><span class=\"line\"></span><br><span class=\"line\">Channel: 管道缓冲区依据缓冲区容量被初始化。如果容量为 0 或者忽略容量，管道是没有缓冲区的</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>new</code> 的作用是初始化一个指向类型的指针(<code>*T</code>)，<code>make</code> 的作用是为 <code>slice</code>，<code>map</code> 或 <code>chan</code> 初始化并返回引用(T)。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Go 语言中的 new 和 make 一直是新手比较容易混淆的东西，咋一看很相似。不过解释两者之间的不同也非常容易。</p>\n<h2 id=\"new-的主要特性\"><a href=\"#new-的主要特性\" class=\"headerlink\" title=\"new 的主要特性\"></a>new 的主要特性</h2><p>首先 <code>new</code> 是内建函数，你可以从 <a href=\"http://golang.org/pkg/builtin/#new\" target=\"_blank\" rel=\"noopener\">http://golang.org/pkg/builtin/#new</a> 这儿看到它，它的定义也很简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func new(Type) *Type</span><br></pre></td></tr></table></figure>\n<p>官方文档对于它的描述是：</p>\n<blockquote>\n<p>内建函数 <code>new</code> 用来分配内存，它的第一个参数是一个类型，不是一个值，它的返回值是一个指向新分配类型零值的指针</p>\n</blockquote>\n<p>根据这段描述，我们可以自己实现一个类似 <code>new</code> 的功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func newInt() *int &#123;</span><br><span class=\"line\">  var i int</span><br><span class=\"line\">  return &amp;i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">someInt := newInt()</span><br></pre></td></tr></table></figure>\n<p>我们这个函数的功能跟 <code>someInt := new(int)</code> 一模一样。所以在我们自己定义 new 开头的函数时，出于约定也应该返回类型的指针。</p>\n<h2 id=\"make-的主要特性\"><a href=\"#make-的主要特性\" class=\"headerlink\" title=\"make 的主要特性\"></a>make 的主要特性</h2><p><code>make</code> 也是内建函数，你可以从 <a href=\"http://golang.org/pkg/builtin/#make\" target=\"_blank\" rel=\"noopener\">http://golang.org/pkg/builtin/#make</a> 这儿看到它，它的定义比 new 多了一个参数，返回值也不同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func make(Type, size IntegerType) Type</span><br></pre></td></tr></table></figure>\n<p>官方文档对于它的描述是：</p>\n<blockquote>\n<p>内建函数 <code>make</code> 用来为 <code>slice</code>，<code>map</code> 或 <code>chan</code> 类型分配内存和初始化一个对象(注意：只能用在这三种类型上)\u0010，跟 <code>new</code> 类似，第一个参数也是一个类型而不是一个值，跟 <code>new</code> 不同的是，<code>make</code> 返回类型的引用而不是指针，而返回值也依赖于具体传入的类型，具体说明如下：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Slice: 第二个参数 size 指定了它的长度，它的容量和长度相同。</span><br><span class=\"line\">你可以传入第三个参数来指定不同的容量值，但必须不能比长度值小。</span><br><span class=\"line\">比如 make([]int, 0, 10)</span><br><span class=\"line\"></span><br><span class=\"line\">Map: 根据 size 大小来初始化分配内存，不过分配后的 map 长度为 0，如果 size 被忽略了，那么会在初始化分配内存时分配一个小尺寸的内存</span><br><span class=\"line\"></span><br><span class=\"line\">Channel: 管道缓冲区依据缓冲区容量被初始化。如果容量为 0 或者忽略容量，管道是没有缓冲区的</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>new</code> 的作用是初始化一个指向类型的指针(<code>*T</code>)，<code>make</code> 的作用是为 <code>slice</code>，<code>map</code> 或 <code>chan</code> 初始化并返回引用(T)。</p>\n"},{"title":"Java老司机翻车系列-Java里方法的传值类型","date":"2016-09-08T13:41:05.000Z","_content":"\n> 从毕业到现在，换了几份工作，面了也不下十几家公司了。每次一份面试题总是少不了的。而每一份面试题里面也总少不了一种类型题目的身影，那就是方法参数值传递类型判断。像我如此自信，如此经验丰富的老司机，（夸自己不脸红，啊哈哈），那天高速行驶居然也翻了车。\n\n坐公交闲来无事，找了个APP看看面试的算法题，准备准备明年的重要面试。十道题下来，错了两道，其中有一道，java题，看了答案我还是觉得自己试对的，肯定是答案写错了（自信过了头），回到家之间上机把程序敲了一遍运行，结果还是我思考错了，有个地方思维出现了误差。\n\n题目很简单，就是给出下面这段小程序的运行结果：\n\n```java\n\nclass Value {\n    public int i = 15;\n}\n\npublic class Test_1 {\n    public static void main(String argv[]) {\n        Test_1 t = new Test_1();\n        t.first();\n    }\n\n    public void first() {\n        int i=5;\n        Value v = new Value();\n        v.i = 25;\n        second(v, i);\n        System.out.println(v.i);\n    }\n\n    public void second (Value v, int i) {\n        i = 0;\n        v.i = 20;\n        Value val = new Value();\n        v = val;\n        System.out.println(v.i + \" \"+i);\n    }\n}\n\n\n\n```\n\n我认为是 `15 0 15`,而正确答案是`15 0 20`，让我现在回过头去看，我也一定会给出正确的答案，但是当时就是脑子短路了一下。\n\n我的思维错误的关键就在与，我知道Value是对象，我知道java中对于对象传递的是引用，我认为传递的是v这个引用句柄本身，然后到了方法内，这个句柄被修改指向新的对象，新的对象i的值还是默认值15，所以得出答案`15 0 15`。\n\n但是正确的传递应该是，`second`方法自己有一个句柄，指向了传进来句柄指向的引用，相当于同时两个句柄指向了同一个引用，second方法中修改的只是新的句柄的引用。\n\n有时候我们认为我们已经再清楚不过的东西，再熟悉不过的原理，一不小心，也有让老司机翻车的可能性。\n\n俗话说，淹死的都是会水的。\n\n以此为戒。\n\nend.","source":"_posts/does-java-method-transmit-value-or-reference.md","raw":"---\ntitle: Java老司机翻车系列-Java里方法的传值类型\ndate: 2016-09-08 21:41:05\ntags:\n- java\ncategory:\n- java\n- 老司机翻车系列\n---\n\n> 从毕业到现在，换了几份工作，面了也不下十几家公司了。每次一份面试题总是少不了的。而每一份面试题里面也总少不了一种类型题目的身影，那就是方法参数值传递类型判断。像我如此自信，如此经验丰富的老司机，（夸自己不脸红，啊哈哈），那天高速行驶居然也翻了车。\n\n坐公交闲来无事，找了个APP看看面试的算法题，准备准备明年的重要面试。十道题下来，错了两道，其中有一道，java题，看了答案我还是觉得自己试对的，肯定是答案写错了（自信过了头），回到家之间上机把程序敲了一遍运行，结果还是我思考错了，有个地方思维出现了误差。\n\n题目很简单，就是给出下面这段小程序的运行结果：\n\n```java\n\nclass Value {\n    public int i = 15;\n}\n\npublic class Test_1 {\n    public static void main(String argv[]) {\n        Test_1 t = new Test_1();\n        t.first();\n    }\n\n    public void first() {\n        int i=5;\n        Value v = new Value();\n        v.i = 25;\n        second(v, i);\n        System.out.println(v.i);\n    }\n\n    public void second (Value v, int i) {\n        i = 0;\n        v.i = 20;\n        Value val = new Value();\n        v = val;\n        System.out.println(v.i + \" \"+i);\n    }\n}\n\n\n\n```\n\n我认为是 `15 0 15`,而正确答案是`15 0 20`，让我现在回过头去看，我也一定会给出正确的答案，但是当时就是脑子短路了一下。\n\n我的思维错误的关键就在与，我知道Value是对象，我知道java中对于对象传递的是引用，我认为传递的是v这个引用句柄本身，然后到了方法内，这个句柄被修改指向新的对象，新的对象i的值还是默认值15，所以得出答案`15 0 15`。\n\n但是正确的传递应该是，`second`方法自己有一个句柄，指向了传进来句柄指向的引用，相当于同时两个句柄指向了同一个引用，second方法中修改的只是新的句柄的引用。\n\n有时候我们认为我们已经再清楚不过的东西，再熟悉不过的原理，一不小心，也有让老司机翻车的可能性。\n\n俗话说，淹死的都是会水的。\n\n以此为戒。\n\nend.","slug":"does-java-method-transmit-value-or-reference","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgf1000s0a6tot6ig5u0","content":"<blockquote>\n<p>从毕业到现在，换了几份工作，面了也不下十几家公司了。每次一份面试题总是少不了的。而每一份面试题里面也总少不了一种类型题目的身影，那就是方法参数值传递类型判断。像我如此自信，如此经验丰富的老司机，（夸自己不脸红，啊哈哈），那天高速行驶居然也翻了车。</p>\n</blockquote>\n<p>坐公交闲来无事，找了个APP看看面试的算法题，准备准备明年的重要面试。十道题下来，错了两道，其中有一道，java题，看了答案我还是觉得自己试对的，肯定是答案写错了（自信过了头），回到家之间上机把程序敲了一遍运行，结果还是我思考错了，有个地方思维出现了误差。</p>\n<p>题目很简单，就是给出下面这段小程序的运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Value</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> i = <span class=\"number\">15</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test_1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String argv[])</span> </span>&#123;</span><br><span class=\"line\">        Test_1 t = <span class=\"keyword\">new</span> Test_1();</span><br><span class=\"line\">        t.first();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">first</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">5</span>;</span><br><span class=\"line\">        Value v = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">        v.i = <span class=\"number\">25</span>;</span><br><span class=\"line\">        second(v, i);</span><br><span class=\"line\">        System.out.println(v.i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">second</span> <span class=\"params\">(Value v, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        v.i = <span class=\"number\">20</span>;</span><br><span class=\"line\">        Value val = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">        v = val;</span><br><span class=\"line\">        System.out.println(v.i + <span class=\"string\">\" \"</span>+i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我认为是 <code>15 0 15</code>,而正确答案是<code>15 0 20</code>，让我现在回过头去看，我也一定会给出正确的答案，但是当时就是脑子短路了一下。</p>\n<p>我的思维错误的关键就在与，我知道Value是对象，我知道java中对于对象传递的是引用，我认为传递的是v这个引用句柄本身，然后到了方法内，这个句柄被修改指向新的对象，新的对象i的值还是默认值15，所以得出答案<code>15 0 15</code>。</p>\n<p>但是正确的传递应该是，<code>second</code>方法自己有一个句柄，指向了传进来句柄指向的引用，相当于同时两个句柄指向了同一个引用，second方法中修改的只是新的句柄的引用。</p>\n<p>有时候我们认为我们已经再清楚不过的东西，再熟悉不过的原理，一不小心，也有让老司机翻车的可能性。</p>\n<p>俗话说，淹死的都是会水的。</p>\n<p>以此为戒。</p>\n<p>end.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>从毕业到现在，换了几份工作，面了也不下十几家公司了。每次一份面试题总是少不了的。而每一份面试题里面也总少不了一种类型题目的身影，那就是方法参数值传递类型判断。像我如此自信，如此经验丰富的老司机，（夸自己不脸红，啊哈哈），那天高速行驶居然也翻了车。</p>\n</blockquote>\n<p>坐公交闲来无事，找了个APP看看面试的算法题，准备准备明年的重要面试。十道题下来，错了两道，其中有一道，java题，看了答案我还是觉得自己试对的，肯定是答案写错了（自信过了头），回到家之间上机把程序敲了一遍运行，结果还是我思考错了，有个地方思维出现了误差。</p>\n<p>题目很简单，就是给出下面这段小程序的运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Value</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> i = <span class=\"number\">15</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test_1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String argv[])</span> </span>&#123;</span><br><span class=\"line\">        Test_1 t = <span class=\"keyword\">new</span> Test_1();</span><br><span class=\"line\">        t.first();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">first</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">5</span>;</span><br><span class=\"line\">        Value v = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">        v.i = <span class=\"number\">25</span>;</span><br><span class=\"line\">        second(v, i);</span><br><span class=\"line\">        System.out.println(v.i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">second</span> <span class=\"params\">(Value v, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        v.i = <span class=\"number\">20</span>;</span><br><span class=\"line\">        Value val = <span class=\"keyword\">new</span> Value();</span><br><span class=\"line\">        v = val;</span><br><span class=\"line\">        System.out.println(v.i + <span class=\"string\">\" \"</span>+i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我认为是 <code>15 0 15</code>,而正确答案是<code>15 0 20</code>，让我现在回过头去看，我也一定会给出正确的答案，但是当时就是脑子短路了一下。</p>\n<p>我的思维错误的关键就在与，我知道Value是对象，我知道java中对于对象传递的是引用，我认为传递的是v这个引用句柄本身，然后到了方法内，这个句柄被修改指向新的对象，新的对象i的值还是默认值15，所以得出答案<code>15 0 15</code>。</p>\n<p>但是正确的传递应该是，<code>second</code>方法自己有一个句柄，指向了传进来句柄指向的引用，相当于同时两个句柄指向了同一个引用，second方法中修改的只是新的句柄的引用。</p>\n<p>有时候我们认为我们已经再清楚不过的东西，再熟悉不过的原理，一不小心，也有让老司机翻车的可能性。</p>\n<p>俗话说，淹死的都是会水的。</p>\n<p>以此为戒。</p>\n<p>end.</p>\n"},{"title":"git warning: LF will be replaced by CRLF in xxxx解决办法","date":"2016-05-01T14:49:44.000Z","_content":"这两天在家改用git的命令行bash工具了，在公司一直都是用smartgit，心血来潮也玩下bash.\n\n不过在使用的时候，好多警告真的是好烦，比如：\n\n在 git add xx.file 的时候，提示\n\n>warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX.\n\n大概好像是换行符转换的问题，网上搜了下可以直接关闭这种警告，这样干：\n\n>it config core.autocrlf  false\n\n然后就不会在有之前的那个警告啦。","source":"_posts/git-warning-LF-will-be-replaced-by-CRLF-in-xxxx解决办法.md","raw":"---\ntitle: 'git warning: LF will be replaced by CRLF in xxxx解决办法'\ndate: 2016-05-01 22:49:44\ntags:\n- git\ncategory:\n- git\n---\n这两天在家改用git的命令行bash工具了，在公司一直都是用smartgit，心血来潮也玩下bash.\n\n不过在使用的时候，好多警告真的是好烦，比如：\n\n在 git add xx.file 的时候，提示\n\n>warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX.\n\n大概好像是换行符转换的问题，网上搜了下可以直接关闭这种警告，这样干：\n\n>it config core.autocrlf  false\n\n然后就不会在有之前的那个警告啦。","slug":"git-warning-LF-will-be-replaced-by-CRLF-in-xxxx解决办法","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgf3000x0a6tsx8rgla6","content":"<p>这两天在家改用git的命令行bash工具了，在公司一直都是用smartgit，心血来潮也玩下bash.</p>\n<p>不过在使用的时候，好多警告真的是好烦，比如：</p>\n<p>在 git add xx.file 的时候，提示</p>\n<blockquote>\n<p>warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX.</p>\n</blockquote>\n<p>大概好像是换行符转换的问题，网上搜了下可以直接关闭这种警告，这样干：</p>\n<blockquote>\n<p>it config core.autocrlf  false</p>\n</blockquote>\n<p>然后就不会在有之前的那个警告啦。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这两天在家改用git的命令行bash工具了，在公司一直都是用smartgit，心血来潮也玩下bash.</p>\n<p>不过在使用的时候，好多警告真的是好烦，比如：</p>\n<p>在 git add xx.file 的时候，提示</p>\n<blockquote>\n<p>warning: LF will be replaced by CRLF in XXXXXXXXXXXXXX.</p>\n</blockquote>\n<p>大概好像是换行符转换的问题，网上搜了下可以直接关闭这种警告，这样干：</p>\n<blockquote>\n<p>it config core.autocrlf  false</p>\n</blockquote>\n<p>然后就不会在有之前的那个警告啦。</p>\n"},{"title":"史上最简单hexo博客搭建教程-4条命令搞定hexo！！","date":"2016-07-26T16:31:35.000Z","_content":"\n\n**四条命令搞定HEXO!!!**\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\ncnpm install nrm -g\n\nnrm use taobao\n\nnpm install -g hexo-cli\n```\n<!--more-->\n\n安装git和nodejs\n\ngit我本机已经装了\n\nnodejs直接官网下载，各种下一步\n\n使用hexo自带的命令安装超级慢，而且完全进行不下去\n\n搞了一早上，了解了下npm，找到了淘宝的镜像，使用淘宝镜像安装成功\n\n淘宝镜像直接google搜就有了，有安装教程，一条命令的事\n\n`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n最后把`npm`换成`cnpm`就行了\n\n安装hexo\n\n`cnpm install -g hexo-cli`\n\n使用了`cnpm`，hexo是安装成功了，但是在使用hexo时，`hexo init`命令执行又卡死\n\n开了VPN还是继续卡死\n\n猜测还是由于在使用默认的`npm`库，速度极慢导致的\n\n然后就找到了，`nrm`,神器！简直了！\n\n```\nnrm 是一个 NPM 源管理器，允许你快速地在如下 NPM 源间切换：\n\nnpm\ncnpm\nstrongloop\neuropean\naustralia\nnodejitsu\ntaobao\n```\n\n`npm install nrm -g`，安装`nrm`\n\n`nrm use taobao`，切到淘宝的npm镜像\n\n`nrm test`看各个节点npm的速度\n\n切换到淘宝的npm之后，`hexo init`总算成功了！！\n\n> **INFO  Start blogging with Hexo!**\n\n看到这句话，简直感动。\n\n在`hexo init`的目录下，执行`hexo server`命令启动hexo服务，cmd显示已经启动成功，默认是**4000**端口，直接在`http://localhost:4000/`访问\n\n然而并没有什么卵用，没有反应，有点奇怪\n\n想了下，猜是不是端口被占用了\n\n直接改成`hexo server -p 8080` 换成8080启动，访问成功了\n\n**hexo的服务这里有点坑，端口被占用了，居然都不报错，还显示启动正常**\n\n\n**错误：**\n\n```\nnpm ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"D:\\\\nodejs\\\\node.exe\" \"D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\" \"--production\"\nnpm ERR! node v4.4.7\nnpm ERR! npm  v2.15.8\n\nnpm ERR! shasum check failed for C:\\Users\\ji\\AppData\\Local\\Temp\\npm-4836-c38b7b62\\r.cnpmjs.org\\core-js\\download\\core-js-1.2.7.tgz\nnpm ERR! Expected: 652294c14651db28fa93bd2d5ff2983a4f08c636\nnpm ERR! Actual:   406449c7d0bd5bdbbaf0cb21cf233a20d53cc0b3\nnpm ERR! From:     http://r.cnpmjs.org/core-js/download/core-js-1.2.7.tgz\nnpm ERR!\nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     <https://github.com/npm/npm/issues>\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     E:\\hexo\\blog\\npm-debug.log\nWARN  Failed to install dependencies. Please run 'npm install' manually!\n\n```\n不能使用`cnpm`的源，`cnpm`下载的包貌似有问题，checksum对不上，切换成`taobao`的就OK，可以解决这个问题\n\n\n\n然后就是安装主题了\n\n我选择了`NEXT`主题\n\n> http://theme-next.iissnan.com/\n\n我喜欢简洁风格，这个主题第一眼就看上了，而且文档写的非常不错，很详细，作者还是个逗逼\n\n安装主题，直接安装这个主题的教程安装就可以了，很简单\n\n在你的blog目录下，使用下面命令：\n\n`git clone https://github.com/iissnan/hexo-theme-next themes/next`\n\ngit会clone `next`主题的文件到themes下面\n\n等clone结束，next主题就安装完了\n\n然后还需要到`blog`下的`_config.yml`文件里面，把theme这个参数改成next\n`theme: next`\n\n直接启动hexo，就可以看到next主题安装成功了\n\n至此，hexo的博客搭建就结束了\n\n鼓掌！！撒花！！\n\n***以上。***","source":"_posts/hexo-construct-from-zero-instruction.md","raw":"---\ntitle: 史上最简单hexo博客搭建教程-4条命令搞定hexo！！\ndate: 2016-07-27 00:31:35\ntags:\n- hexo\n- 博客\ncategory:\n- 博客\n---\n\n\n**四条命令搞定HEXO!!!**\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\ncnpm install nrm -g\n\nnrm use taobao\n\nnpm install -g hexo-cli\n```\n<!--more-->\n\n安装git和nodejs\n\ngit我本机已经装了\n\nnodejs直接官网下载，各种下一步\n\n使用hexo自带的命令安装超级慢，而且完全进行不下去\n\n搞了一早上，了解了下npm，找到了淘宝的镜像，使用淘宝镜像安装成功\n\n淘宝镜像直接google搜就有了，有安装教程，一条命令的事\n\n`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n最后把`npm`换成`cnpm`就行了\n\n安装hexo\n\n`cnpm install -g hexo-cli`\n\n使用了`cnpm`，hexo是安装成功了，但是在使用hexo时，`hexo init`命令执行又卡死\n\n开了VPN还是继续卡死\n\n猜测还是由于在使用默认的`npm`库，速度极慢导致的\n\n然后就找到了，`nrm`,神器！简直了！\n\n```\nnrm 是一个 NPM 源管理器，允许你快速地在如下 NPM 源间切换：\n\nnpm\ncnpm\nstrongloop\neuropean\naustralia\nnodejitsu\ntaobao\n```\n\n`npm install nrm -g`，安装`nrm`\n\n`nrm use taobao`，切到淘宝的npm镜像\n\n`nrm test`看各个节点npm的速度\n\n切换到淘宝的npm之后，`hexo init`总算成功了！！\n\n> **INFO  Start blogging with Hexo!**\n\n看到这句话，简直感动。\n\n在`hexo init`的目录下，执行`hexo server`命令启动hexo服务，cmd显示已经启动成功，默认是**4000**端口，直接在`http://localhost:4000/`访问\n\n然而并没有什么卵用，没有反应，有点奇怪\n\n想了下，猜是不是端口被占用了\n\n直接改成`hexo server -p 8080` 换成8080启动，访问成功了\n\n**hexo的服务这里有点坑，端口被占用了，居然都不报错，还显示启动正常**\n\n\n**错误：**\n\n```\nnpm ERR! Windows_NT 6.1.7601\nnpm ERR! argv \"D:\\\\nodejs\\\\node.exe\" \"D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\" \"--production\"\nnpm ERR! node v4.4.7\nnpm ERR! npm  v2.15.8\n\nnpm ERR! shasum check failed for C:\\Users\\ji\\AppData\\Local\\Temp\\npm-4836-c38b7b62\\r.cnpmjs.org\\core-js\\download\\core-js-1.2.7.tgz\nnpm ERR! Expected: 652294c14651db28fa93bd2d5ff2983a4f08c636\nnpm ERR! Actual:   406449c7d0bd5bdbbaf0cb21cf233a20d53cc0b3\nnpm ERR! From:     http://r.cnpmjs.org/core-js/download/core-js-1.2.7.tgz\nnpm ERR!\nnpm ERR! If you need help, you may report this error at:\nnpm ERR!     <https://github.com/npm/npm/issues>\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     E:\\hexo\\blog\\npm-debug.log\nWARN  Failed to install dependencies. Please run 'npm install' manually!\n\n```\n不能使用`cnpm`的源，`cnpm`下载的包貌似有问题，checksum对不上，切换成`taobao`的就OK，可以解决这个问题\n\n\n\n然后就是安装主题了\n\n我选择了`NEXT`主题\n\n> http://theme-next.iissnan.com/\n\n我喜欢简洁风格，这个主题第一眼就看上了，而且文档写的非常不错，很详细，作者还是个逗逼\n\n安装主题，直接安装这个主题的教程安装就可以了，很简单\n\n在你的blog目录下，使用下面命令：\n\n`git clone https://github.com/iissnan/hexo-theme-next themes/next`\n\ngit会clone `next`主题的文件到themes下面\n\n等clone结束，next主题就安装完了\n\n然后还需要到`blog`下的`_config.yml`文件里面，把theme这个参数改成next\n`theme: next`\n\n直接启动hexo，就可以看到next主题安装成功了\n\n至此，hexo的博客搭建就结束了\n\n鼓掌！！撒花！！\n\n***以上。***","slug":"hexo-construct-from-zero-instruction","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgf500100a6tvx3ftis2","content":"<p><strong>四条命令搞定HEXO!!!</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install nrm -g</span><br><span class=\"line\"></span><br><span class=\"line\">nrm use taobao</span><br><span class=\"line\"></span><br><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>安装git和nodejs</p>\n<p>git我本机已经装了</p>\n<p>nodejs直接官网下载，各种下一步</p>\n<p>使用hexo自带的命令安装超级慢，而且完全进行不下去</p>\n<p>搞了一早上，了解了下npm，找到了淘宝的镜像，使用淘宝镜像安装成功</p>\n<p>淘宝镜像直接google搜就有了，有安装教程，一条命令的事</p>\n<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n<p>最后把<code>npm</code>换成<code>cnpm</code>就行了</p>\n<p>安装hexo</p>\n<p><code>cnpm install -g hexo-cli</code></p>\n<p>使用了<code>cnpm</code>，hexo是安装成功了，但是在使用hexo时，<code>hexo init</code>命令执行又卡死</p>\n<p>开了VPN还是继续卡死</p>\n<p>猜测还是由于在使用默认的<code>npm</code>库，速度极慢导致的</p>\n<p>然后就找到了，<code>nrm</code>,神器！简直了！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm 是一个 NPM 源管理器，允许你快速地在如下 NPM 源间切换：</span><br><span class=\"line\"></span><br><span class=\"line\">npm</span><br><span class=\"line\">cnpm</span><br><span class=\"line\">strongloop</span><br><span class=\"line\">european</span><br><span class=\"line\">australia</span><br><span class=\"line\">nodejitsu</span><br><span class=\"line\">taobao</span><br></pre></td></tr></table></figure>\n<p><code>npm install nrm -g</code>，安装<code>nrm</code></p>\n<p><code>nrm use taobao</code>，切到淘宝的npm镜像</p>\n<p><code>nrm test</code>看各个节点npm的速度</p>\n<p>切换到淘宝的npm之后，<code>hexo init</code>总算成功了！！</p>\n<blockquote>\n<p><strong>INFO  Start blogging with Hexo!</strong></p>\n</blockquote>\n<p>看到这句话，简直感动。</p>\n<p>在<code>hexo init</code>的目录下，执行<code>hexo server</code>命令启动hexo服务，cmd显示已经启动成功，默认是<strong>4000</strong>端口，直接在<code>http://localhost:4000/</code>访问</p>\n<p>然而并没有什么卵用，没有反应，有点奇怪</p>\n<p>想了下，猜是不是端口被占用了</p>\n<p>直接改成<code>hexo server -p 8080</code> 换成8080启动，访问成功了</p>\n<p><strong>hexo的服务这里有点坑，端口被占用了，居然都不报错，还显示启动正常</strong></p>\n<p><strong>错误：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! Windows_NT 6.1.7601</span><br><span class=\"line\">npm ERR! argv &quot;D:\\\\nodejs\\\\node.exe&quot; &quot;D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot; &quot;install&quot; &quot;--production&quot;</span><br><span class=\"line\">npm ERR! node v4.4.7</span><br><span class=\"line\">npm ERR! npm  v2.15.8</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! shasum check failed for C:\\Users\\ji\\AppData\\Local\\Temp\\npm-4836-c38b7b62\\r.cnpmjs.org\\core-js\\download\\core-js-1.2.7.tgz</span><br><span class=\"line\">npm ERR! Expected: 652294c14651db28fa93bd2d5ff2983a4f08c636</span><br><span class=\"line\">npm ERR! Actual:   406449c7d0bd5bdbbaf0cb21cf233a20d53cc0b3</span><br><span class=\"line\">npm ERR! From:     http://r.cnpmjs.org/core-js/download/core-js-1.2.7.tgz</span><br><span class=\"line\">npm ERR!</span><br><span class=\"line\">npm ERR! If you need help, you may report this error at:</span><br><span class=\"line\">npm ERR!     &lt;https://github.com/npm/npm/issues&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! Please include the following file with any support request:</span><br><span class=\"line\">npm ERR!     E:\\hexo\\blog\\npm-debug.log</span><br><span class=\"line\">WARN  Failed to install dependencies. Please run &apos;npm install&apos; manually!</span><br></pre></td></tr></table></figure>\n<p>不能使用<code>cnpm</code>的源，<code>cnpm</code>下载的包貌似有问题，checksum对不上，切换成<code>taobao</code>的就OK，可以解决这个问题</p>\n<p>然后就是安装主题了</p>\n<p>我选择了<code>NEXT</code>主题</p>\n<blockquote>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/</a></p>\n</blockquote>\n<p>我喜欢简洁风格，这个主题第一眼就看上了，而且文档写的非常不错，很详细，作者还是个逗逼</p>\n<p>安装主题，直接安装这个主题的教程安装就可以了，很简单</p>\n<p>在你的blog目录下，使用下面命令：</p>\n<p><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p>\n<p>git会clone <code>next</code>主题的文件到themes下面</p>\n<p>等clone结束，next主题就安装完了</p>\n<p>然后还需要到<code>blog</code>下的<code>_config.yml</code>文件里面，把theme这个参数改成next<br><code>theme: next</code></p>\n<p>直接启动hexo，就可以看到next主题安装成功了</p>\n<p>至此，hexo的博客搭建就结束了</p>\n<p>鼓掌！！撒花！！</p>\n<p><strong><em>以上。</em></strong></p>\n","site":{"data":{}},"excerpt":"<p><strong>四条命令搞定HEXO!!!</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"></span><br><span class=\"line\">cnpm install nrm -g</span><br><span class=\"line\"></span><br><span class=\"line\">nrm use taobao</span><br><span class=\"line\"></span><br><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>","more":"<p>安装git和nodejs</p>\n<p>git我本机已经装了</p>\n<p>nodejs直接官网下载，各种下一步</p>\n<p>使用hexo自带的命令安装超级慢，而且完全进行不下去</p>\n<p>搞了一早上，了解了下npm，找到了淘宝的镜像，使用淘宝镜像安装成功</p>\n<p>淘宝镜像直接google搜就有了，有安装教程，一条命令的事</p>\n<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n<p>最后把<code>npm</code>换成<code>cnpm</code>就行了</p>\n<p>安装hexo</p>\n<p><code>cnpm install -g hexo-cli</code></p>\n<p>使用了<code>cnpm</code>，hexo是安装成功了，但是在使用hexo时，<code>hexo init</code>命令执行又卡死</p>\n<p>开了VPN还是继续卡死</p>\n<p>猜测还是由于在使用默认的<code>npm</code>库，速度极慢导致的</p>\n<p>然后就找到了，<code>nrm</code>,神器！简直了！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nrm 是一个 NPM 源管理器，允许你快速地在如下 NPM 源间切换：</span><br><span class=\"line\"></span><br><span class=\"line\">npm</span><br><span class=\"line\">cnpm</span><br><span class=\"line\">strongloop</span><br><span class=\"line\">european</span><br><span class=\"line\">australia</span><br><span class=\"line\">nodejitsu</span><br><span class=\"line\">taobao</span><br></pre></td></tr></table></figure>\n<p><code>npm install nrm -g</code>，安装<code>nrm</code></p>\n<p><code>nrm use taobao</code>，切到淘宝的npm镜像</p>\n<p><code>nrm test</code>看各个节点npm的速度</p>\n<p>切换到淘宝的npm之后，<code>hexo init</code>总算成功了！！</p>\n<blockquote>\n<p><strong>INFO  Start blogging with Hexo!</strong></p>\n</blockquote>\n<p>看到这句话，简直感动。</p>\n<p>在<code>hexo init</code>的目录下，执行<code>hexo server</code>命令启动hexo服务，cmd显示已经启动成功，默认是<strong>4000</strong>端口，直接在<code>http://localhost:4000/</code>访问</p>\n<p>然而并没有什么卵用，没有反应，有点奇怪</p>\n<p>想了下，猜是不是端口被占用了</p>\n<p>直接改成<code>hexo server -p 8080</code> 换成8080启动，访问成功了</p>\n<p><strong>hexo的服务这里有点坑，端口被占用了，居然都不报错，还显示启动正常</strong></p>\n<p><strong>错误：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! Windows_NT 6.1.7601</span><br><span class=\"line\">npm ERR! argv &quot;D:\\\\nodejs\\\\node.exe&quot; &quot;D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot; &quot;install&quot; &quot;--production&quot;</span><br><span class=\"line\">npm ERR! node v4.4.7</span><br><span class=\"line\">npm ERR! npm  v2.15.8</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! shasum check failed for C:\\Users\\ji\\AppData\\Local\\Temp\\npm-4836-c38b7b62\\r.cnpmjs.org\\core-js\\download\\core-js-1.2.7.tgz</span><br><span class=\"line\">npm ERR! Expected: 652294c14651db28fa93bd2d5ff2983a4f08c636</span><br><span class=\"line\">npm ERR! Actual:   406449c7d0bd5bdbbaf0cb21cf233a20d53cc0b3</span><br><span class=\"line\">npm ERR! From:     http://r.cnpmjs.org/core-js/download/core-js-1.2.7.tgz</span><br><span class=\"line\">npm ERR!</span><br><span class=\"line\">npm ERR! If you need help, you may report this error at:</span><br><span class=\"line\">npm ERR!     &lt;https://github.com/npm/npm/issues&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! Please include the following file with any support request:</span><br><span class=\"line\">npm ERR!     E:\\hexo\\blog\\npm-debug.log</span><br><span class=\"line\">WARN  Failed to install dependencies. Please run &apos;npm install&apos; manually!</span><br></pre></td></tr></table></figure>\n<p>不能使用<code>cnpm</code>的源，<code>cnpm</code>下载的包貌似有问题，checksum对不上，切换成<code>taobao</code>的就OK，可以解决这个问题</p>\n<p>然后就是安装主题了</p>\n<p>我选择了<code>NEXT</code>主题</p>\n<blockquote>\n<p><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">http://theme-next.iissnan.com/</a></p>\n</blockquote>\n<p>我喜欢简洁风格，这个主题第一眼就看上了，而且文档写的非常不错，很详细，作者还是个逗逼</p>\n<p>安装主题，直接安装这个主题的教程安装就可以了，很简单</p>\n<p>在你的blog目录下，使用下面命令：</p>\n<p><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></p>\n<p>git会clone <code>next</code>主题的文件到themes下面</p>\n<p>等clone结束，next主题就安装完了</p>\n<p>然后还需要到<code>blog</code>下的<code>_config.yml</code>文件里面，把theme这个参数改成next<br><code>theme: next</code></p>\n<p>直接启动hexo，就可以看到next主题安装成功了</p>\n<p>至此，hexo的博客搭建就结束了</p>\n<p>鼓掌！！撒花！！</p>\n<p><strong><em>以上。</em></strong></p>"},{"title":"配置安装PHP开发环境，使用NGINX和PHP-FPM","date":"2016-10-30T07:26:43.000Z","_content":"\n> 虽然不是专门做php开发的，但是偶尔也会用到一下php，这时候有一个稳定的php开发环境还是挺重要的。而且我又是一个比较有技术洁癖的人，直接什么打包好的，一键安装的东西，WAMP之类的工具，我实在是不怎么喜欢用。最后还是选择花些时间，了解下PHP，了解下nginx结合php的运行方式，什么是CGI，什么是fast-cgi，什么是php-fpm。\n\n<!-- more -->\n\n# 名词解释\n\n首先php本身，一开始也是一个解释型语言，也就是说，php的解释器会对于php的代码一行一行进行解释，然后返回结果。\n\n我们到php的官方网站下载下来的php，包含了php运行需要的，核心程序。里面会有类似于`jdk`里面的java.exe，这样的程序，php下面叫php.exe（感觉我自己也是在废话）。（当然，我现在指的是windows平台下）\n\n使用`php.exe`就可以解释运行php代码。不过问题来了，我们使用PHP都是在`web`环境，用来处理`http`请求，用这个php.exe怎么处理http请求。这时候就要说到`CGI`这个东西了。`公共网关接口`，定义了web请求应该如何交互，换句话说，实现了这个接口，就可以处理网络的HTTP请求。PHP下面里面的`php-cgi.exe`就实现了这个接口，也就可以处理web请求了。这个程序也像一个服务器，监听在某个端口，等着web服务器，比如`nginx`，接收到web请求，就转发给`php-cgi`去处理。处理完，返回结果给web服务器。这样整个web请求，对于`.php`后缀的web请求，就处理完了。对于`.html,js,css`，这些请求是不会转发过来的，这些静态资源请求在web服务器就已经处理完了。\n\n那知道了`php-cgi`是什么了，那`fast-cgi`又是什么呢？`php-cgi`实现了`cgi`接口，可以处理web请求，但是cgi进程，同时只能处理一个web请求，被占用了，那后面的web请求全都阻塞了。这明显不行啊。后来就出现了`fast-cgi`，一种新的网关接口，这种网关接口使用一个总的`管家进程`来给手下的工作进程转发请求，实际处理全部交给手下的工作进程去处理，只要资源足够，可以起无数个工作进程，当然并发能力也就上去了。`PHP-FPM`就是实现了这个模式和接口，在某年某月某日，（具体日期参考官网）已经被php官方接纳为官方的一种实现。简单来说就是，用`php-fpm`可以提供web请求的并发处理数。\n\n> 温馨提示：对于windows版本的php，只有php-cgi，没有php-fpm。（不知道是不是这个php-cgi就是fpm，没查到什么资料，我只能认为没有）所以生产环境，还是建议上linux的。\n\n# PHP安装\n\n## windows\n\n这个不说了，直接官网下载，启动使用`./php-cgi.exe -b :9000`，让cgi启动，绑定在9000端口\n\n## linux\n\n可以选择yum安装，一条命令搞定。但是那样安装下来，最后文件夹路径都是默认的，我不怎么喜欢，还是自己编译比较好。\n\nwget拉源码包，解压\n\n安装命令：\n`./configure --prefix=/usr/local/php5 --enable-fpm --with-mysql`\n\n报错的话，都是依赖没有，缺什么yum装什么就可以了\n\n看到下面的图，就安装成功了\n\n![php安装成功](/images/配置安装PHP开发环境/1.png)\n\n打开 php.ini:\nvim /usr/local/php/php.ini\n\n定位到 cgi.fix_pathinfo= 并将其修改为如下所示：\ncgi.fix_pathinfo=0\n\n# 安装nginx\n\n## windows\n\n也是一样，直接下载，找到`nginx.exe`，在命令行`./nginx.exe`,就可以启动了\n\n## linux\n\n也是下载源码包，缺什么依赖就用yum装什么依赖\n\n安装命令：\n`./configure --prefix=/usr/local/nginx --with-http_ssl_module`\n\n\nnginx配置示例：\n```\n    server {\n        listen       8080;\n        server_name  localhost;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        location ~ \\.php$ {\n            root           html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n    }\n\n```\n\nfastcgi_param  SCRIPT_FILENAME 一定要把/scripts,改成$document_root,否则会出现找不到文件,404错误。","source":"_posts/how-to-setup-PHP-and-NGINX.md","raw":"---\ntitle: 配置安装PHP开发环境，使用NGINX和PHP-FPM\ndate: 2016-10-30 15:26:43\ntags:\n- php\n- web\ncategory:\n- php\n---\n\n> 虽然不是专门做php开发的，但是偶尔也会用到一下php，这时候有一个稳定的php开发环境还是挺重要的。而且我又是一个比较有技术洁癖的人，直接什么打包好的，一键安装的东西，WAMP之类的工具，我实在是不怎么喜欢用。最后还是选择花些时间，了解下PHP，了解下nginx结合php的运行方式，什么是CGI，什么是fast-cgi，什么是php-fpm。\n\n<!-- more -->\n\n# 名词解释\n\n首先php本身，一开始也是一个解释型语言，也就是说，php的解释器会对于php的代码一行一行进行解释，然后返回结果。\n\n我们到php的官方网站下载下来的php，包含了php运行需要的，核心程序。里面会有类似于`jdk`里面的java.exe，这样的程序，php下面叫php.exe（感觉我自己也是在废话）。（当然，我现在指的是windows平台下）\n\n使用`php.exe`就可以解释运行php代码。不过问题来了，我们使用PHP都是在`web`环境，用来处理`http`请求，用这个php.exe怎么处理http请求。这时候就要说到`CGI`这个东西了。`公共网关接口`，定义了web请求应该如何交互，换句话说，实现了这个接口，就可以处理网络的HTTP请求。PHP下面里面的`php-cgi.exe`就实现了这个接口，也就可以处理web请求了。这个程序也像一个服务器，监听在某个端口，等着web服务器，比如`nginx`，接收到web请求，就转发给`php-cgi`去处理。处理完，返回结果给web服务器。这样整个web请求，对于`.php`后缀的web请求，就处理完了。对于`.html,js,css`，这些请求是不会转发过来的，这些静态资源请求在web服务器就已经处理完了。\n\n那知道了`php-cgi`是什么了，那`fast-cgi`又是什么呢？`php-cgi`实现了`cgi`接口，可以处理web请求，但是cgi进程，同时只能处理一个web请求，被占用了，那后面的web请求全都阻塞了。这明显不行啊。后来就出现了`fast-cgi`，一种新的网关接口，这种网关接口使用一个总的`管家进程`来给手下的工作进程转发请求，实际处理全部交给手下的工作进程去处理，只要资源足够，可以起无数个工作进程，当然并发能力也就上去了。`PHP-FPM`就是实现了这个模式和接口，在某年某月某日，（具体日期参考官网）已经被php官方接纳为官方的一种实现。简单来说就是，用`php-fpm`可以提供web请求的并发处理数。\n\n> 温馨提示：对于windows版本的php，只有php-cgi，没有php-fpm。（不知道是不是这个php-cgi就是fpm，没查到什么资料，我只能认为没有）所以生产环境，还是建议上linux的。\n\n# PHP安装\n\n## windows\n\n这个不说了，直接官网下载，启动使用`./php-cgi.exe -b :9000`，让cgi启动，绑定在9000端口\n\n## linux\n\n可以选择yum安装，一条命令搞定。但是那样安装下来，最后文件夹路径都是默认的，我不怎么喜欢，还是自己编译比较好。\n\nwget拉源码包，解压\n\n安装命令：\n`./configure --prefix=/usr/local/php5 --enable-fpm --with-mysql`\n\n报错的话，都是依赖没有，缺什么yum装什么就可以了\n\n看到下面的图，就安装成功了\n\n![php安装成功](/images/配置安装PHP开发环境/1.png)\n\n打开 php.ini:\nvim /usr/local/php/php.ini\n\n定位到 cgi.fix_pathinfo= 并将其修改为如下所示：\ncgi.fix_pathinfo=0\n\n# 安装nginx\n\n## windows\n\n也是一样，直接下载，找到`nginx.exe`，在命令行`./nginx.exe`,就可以启动了\n\n## linux\n\n也是下载源码包，缺什么依赖就用yum装什么依赖\n\n安装命令：\n`./configure --prefix=/usr/local/nginx --with-http_ssl_module`\n\n\nnginx配置示例：\n```\n    server {\n        listen       8080;\n        server_name  localhost;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        location ~ \\.php$ {\n            root           html;\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n    }\n\n```\n\nfastcgi_param  SCRIPT_FILENAME 一定要把/scripts,改成$document_root,否则会出现找不到文件,404错误。","slug":"how-to-setup-PHP-and-NGINX","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgf600150a6tze7ynb0f","content":"<blockquote>\n<p>虽然不是专门做php开发的，但是偶尔也会用到一下php，这时候有一个稳定的php开发环境还是挺重要的。而且我又是一个比较有技术洁癖的人，直接什么打包好的，一键安装的东西，WAMP之类的工具，我实在是不怎么喜欢用。最后还是选择花些时间，了解下PHP，了解下nginx结合php的运行方式，什么是CGI，什么是fast-cgi，什么是php-fpm。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h1><p>首先php本身，一开始也是一个解释型语言，也就是说，php的解释器会对于php的代码一行一行进行解释，然后返回结果。</p>\n<p>我们到php的官方网站下载下来的php，包含了php运行需要的，核心程序。里面会有类似于<code>jdk</code>里面的java.exe，这样的程序，php下面叫php.exe（感觉我自己也是在废话）。（当然，我现在指的是windows平台下）</p>\n<p>使用<code>php.exe</code>就可以解释运行php代码。不过问题来了，我们使用PHP都是在<code>web</code>环境，用来处理<code>http</code>请求，用这个php.exe怎么处理http请求。这时候就要说到<code>CGI</code>这个东西了。<code>公共网关接口</code>，定义了web请求应该如何交互，换句话说，实现了这个接口，就可以处理网络的HTTP请求。PHP下面里面的<code>php-cgi.exe</code>就实现了这个接口，也就可以处理web请求了。这个程序也像一个服务器，监听在某个端口，等着web服务器，比如<code>nginx</code>，接收到web请求，就转发给<code>php-cgi</code>去处理。处理完，返回结果给web服务器。这样整个web请求，对于<code>.php</code>后缀的web请求，就处理完了。对于<code>.html,js,css</code>，这些请求是不会转发过来的，这些静态资源请求在web服务器就已经处理完了。</p>\n<p>那知道了<code>php-cgi</code>是什么了，那<code>fast-cgi</code>又是什么呢？<code>php-cgi</code>实现了<code>cgi</code>接口，可以处理web请求，但是cgi进程，同时只能处理一个web请求，被占用了，那后面的web请求全都阻塞了。这明显不行啊。后来就出现了<code>fast-cgi</code>，一种新的网关接口，这种网关接口使用一个总的<code>管家进程</code>来给手下的工作进程转发请求，实际处理全部交给手下的工作进程去处理，只要资源足够，可以起无数个工作进程，当然并发能力也就上去了。<code>PHP-FPM</code>就是实现了这个模式和接口，在某年某月某日，（具体日期参考官网）已经被php官方接纳为官方的一种实现。简单来说就是，用<code>php-fpm</code>可以提供web请求的并发处理数。</p>\n<blockquote>\n<p>温馨提示：对于windows版本的php，只有php-cgi，没有php-fpm。（不知道是不是这个php-cgi就是fpm，没查到什么资料，我只能认为没有）所以生产环境，还是建议上linux的。</p>\n</blockquote>\n<h1 id=\"PHP安装\"><a href=\"#PHP安装\" class=\"headerlink\" title=\"PHP安装\"></a>PHP安装</h1><h2 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h2><p>这个不说了，直接官网下载，启动使用<code>./php-cgi.exe -b :9000</code>，让cgi启动，绑定在9000端口</p>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><p>可以选择yum安装，一条命令搞定。但是那样安装下来，最后文件夹路径都是默认的，我不怎么喜欢，还是自己编译比较好。</p>\n<p>wget拉源码包，解压</p>\n<p>安装命令：<br><code>./configure --prefix=/usr/local/php5 --enable-fpm --with-mysql</code></p>\n<p>报错的话，都是依赖没有，缺什么yum装什么就可以了</p>\n<p>看到下面的图，就安装成功了</p>\n<p><img src=\"/images/配置安装PHP开发环境/1.png\" alt=\"php安装成功\"></p>\n<p>打开 php.ini:<br>vim /usr/local/php/php.ini</p>\n<p>定位到 cgi.fix_pathinfo= 并将其修改为如下所示：<br>cgi.fix_pathinfo=0</p>\n<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h1><h2 id=\"windows-1\"><a href=\"#windows-1\" class=\"headerlink\" title=\"windows\"></a>windows</h2><p>也是一样，直接下载，找到<code>nginx.exe</code>，在命令行<code>./nginx.exe</code>,就可以启动了</p>\n<h2 id=\"linux-1\"><a href=\"#linux-1\" class=\"headerlink\" title=\"linux\"></a>linux</h2><p>也是下载源码包，缺什么依赖就用yum装什么依赖</p>\n<p>安装命令：<br><code>./configure --prefix=/usr/local/nginx --with-http_ssl_module</code></p>\n<p>nginx配置示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       8080;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">        root           html;</span><br><span class=\"line\">        fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        fastcgi_index  index.php;</span><br><span class=\"line\">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class=\"line\">        include        fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>fastcgi_param  SCRIPT_FILENAME 一定要把/scripts,改成$document_root,否则会出现找不到文件,404错误。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>虽然不是专门做php开发的，但是偶尔也会用到一下php，这时候有一个稳定的php开发环境还是挺重要的。而且我又是一个比较有技术洁癖的人，直接什么打包好的，一键安装的东西，WAMP之类的工具，我实在是不怎么喜欢用。最后还是选择花些时间，了解下PHP，了解下nginx结合php的运行方式，什么是CGI，什么是fast-cgi，什么是php-fpm。</p>\n</blockquote>","more":"<h1 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h1><p>首先php本身，一开始也是一个解释型语言，也就是说，php的解释器会对于php的代码一行一行进行解释，然后返回结果。</p>\n<p>我们到php的官方网站下载下来的php，包含了php运行需要的，核心程序。里面会有类似于<code>jdk</code>里面的java.exe，这样的程序，php下面叫php.exe（感觉我自己也是在废话）。（当然，我现在指的是windows平台下）</p>\n<p>使用<code>php.exe</code>就可以解释运行php代码。不过问题来了，我们使用PHP都是在<code>web</code>环境，用来处理<code>http</code>请求，用这个php.exe怎么处理http请求。这时候就要说到<code>CGI</code>这个东西了。<code>公共网关接口</code>，定义了web请求应该如何交互，换句话说，实现了这个接口，就可以处理网络的HTTP请求。PHP下面里面的<code>php-cgi.exe</code>就实现了这个接口，也就可以处理web请求了。这个程序也像一个服务器，监听在某个端口，等着web服务器，比如<code>nginx</code>，接收到web请求，就转发给<code>php-cgi</code>去处理。处理完，返回结果给web服务器。这样整个web请求，对于<code>.php</code>后缀的web请求，就处理完了。对于<code>.html,js,css</code>，这些请求是不会转发过来的，这些静态资源请求在web服务器就已经处理完了。</p>\n<p>那知道了<code>php-cgi</code>是什么了，那<code>fast-cgi</code>又是什么呢？<code>php-cgi</code>实现了<code>cgi</code>接口，可以处理web请求，但是cgi进程，同时只能处理一个web请求，被占用了，那后面的web请求全都阻塞了。这明显不行啊。后来就出现了<code>fast-cgi</code>，一种新的网关接口，这种网关接口使用一个总的<code>管家进程</code>来给手下的工作进程转发请求，实际处理全部交给手下的工作进程去处理，只要资源足够，可以起无数个工作进程，当然并发能力也就上去了。<code>PHP-FPM</code>就是实现了这个模式和接口，在某年某月某日，（具体日期参考官网）已经被php官方接纳为官方的一种实现。简单来说就是，用<code>php-fpm</code>可以提供web请求的并发处理数。</p>\n<blockquote>\n<p>温馨提示：对于windows版本的php，只有php-cgi，没有php-fpm。（不知道是不是这个php-cgi就是fpm，没查到什么资料，我只能认为没有）所以生产环境，还是建议上linux的。</p>\n</blockquote>\n<h1 id=\"PHP安装\"><a href=\"#PHP安装\" class=\"headerlink\" title=\"PHP安装\"></a>PHP安装</h1><h2 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h2><p>这个不说了，直接官网下载，启动使用<code>./php-cgi.exe -b :9000</code>，让cgi启动，绑定在9000端口</p>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><p>可以选择yum安装，一条命令搞定。但是那样安装下来，最后文件夹路径都是默认的，我不怎么喜欢，还是自己编译比较好。</p>\n<p>wget拉源码包，解压</p>\n<p>安装命令：<br><code>./configure --prefix=/usr/local/php5 --enable-fpm --with-mysql</code></p>\n<p>报错的话，都是依赖没有，缺什么yum装什么就可以了</p>\n<p>看到下面的图，就安装成功了</p>\n<p><img src=\"/images/配置安装PHP开发环境/1.png\" alt=\"php安装成功\"></p>\n<p>打开 php.ini:<br>vim /usr/local/php/php.ini</p>\n<p>定位到 cgi.fix_pathinfo= 并将其修改为如下所示：<br>cgi.fix_pathinfo=0</p>\n<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h1><h2 id=\"windows-1\"><a href=\"#windows-1\" class=\"headerlink\" title=\"windows\"></a>windows</h2><p>也是一样，直接下载，找到<code>nginx.exe</code>，在命令行<code>./nginx.exe</code>,就可以启动了</p>\n<h2 id=\"linux-1\"><a href=\"#linux-1\" class=\"headerlink\" title=\"linux\"></a>linux</h2><p>也是下载源码包，缺什么依赖就用yum装什么依赖</p>\n<p>安装命令：<br><code>./configure --prefix=/usr/local/nginx --with-http_ssl_module</code></p>\n<p>nginx配置示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       8080;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">    location = /50x.html &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~ \\.php$ &#123;</span><br><span class=\"line\">        root           html;</span><br><span class=\"line\">        fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">        fastcgi_index  index.php;</span><br><span class=\"line\">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class=\"line\">        include        fastcgi_params;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>fastcgi_param  SCRIPT_FILENAME 一定要把/scripts,改成$document_root,否则会出现找不到文件,404错误。</p>"},{"title":"判断假币比真币重还是轻？","date":"2016-08-27T08:11:46.000Z","_content":"\n## 更轻或者更重？\n\n> 你有n>2个外观相似的硬币和一个没有砝码的天平。其中一枚为假币，但并不知道它比真币重还是轻。设计一个 θ(1)的算法来确定假币比真币重还是轻。\n\n<!-- more-->\n\n看《算法设计与分析基础》，习题2.2里面的一道题，还挺有意思的。\n\n问题第一眼看上去并不算难，很快就能想出一些解法。\n\n## 第一种解法\n\n直观上，既然只有一枚假币，那其他都是真币，那其他真币，随便拿两个放在天平上，肯定天平是平衡的。如果不平衡，那里面一定有一个是假币。\n\n根据上面的想法：\n\n```\n随意从n>2中取出两枚硬币，分别为y1,y2\n\nif y1=y2 \n\t//y1和y2相等，那么y1，y2都是真币\n\twhile(true) {\n\t\t//再从所有硬币中取出一枚硬币y3\n\t\tif y1=y3\n\t\t\tcontinue\n\t\telse if y1>y2\n\t\t\t//假币更轻\n\t\t\tbreak\n\t\telse\n\t\t\t//假币更重\n\t\t\tbreak\n\t}\nelse \n\t//再从所有硬币中取出一枚硬币y3\n\tif y1=y3\n\t\t//y2就是假币\n\tif y1!=y3\n\t\t//y1就是假币\n\n```\n第一种解法，显然是一个`O(n)`时间复杂度的算法，最差情况下，比较到最后一个硬币才能发现假币。当然，最好情况，可以只需要两次。不过依然是一个`O(n)`时间复杂度的算法，并不符合题目的要求。\n\n不过，这是一种直观的解法，研究一个算法，就普通人来说，没法做到像大牛一般，一下就能想到很合适，很优雅的算法。可能就是从最粗暴的`暴力硬撸`算法开始，不过在这思考中间，有可能就能想到更好的思路。我一开始学习算法，做算法题时，就很有挫败感，感觉看别人的答案，都是很精妙的解法，甚至连代码都写的很`优雅`，都是`十行java搞定xxx`，`一行python解决xxx`，不过这背后付出了多少努力，我们是看不见的。记得在 [霸王别姬][1]里面有一幕，小赖子看到唱京戏的名角儿，底下人声鼎沸，叫好声一片，小豆子抹着眼泪大哭：“我什么时候能成角儿啊？这得挨多少打呀？”\n\n写远了。\n\n\n## 第二种解法\n\n要想做到`θ(1)`的时间复杂度，那必须在固定步骤中就能解出结果，那就必然不能在某一个硬币上面纠结，如果一个一个去比较，那必定是要到`O(n)`的。既然不能一个一个，那就一堆一堆咯？这是我当时最直观的想法。一堆一堆怎么比较？\n\n### 分成两堆\n\n如果`n%2=0`，把n分成两等份，必然一堆重，一堆轻，然而好像没什么卵用，没法确认假币轻还是重，因为我们不知道假币在哪堆。\n\n灵感来了，我们要怎么知道假币在哪堆呢？\n\n### 分成三堆\n\n分成三堆，假币一定会在其中一堆里面，那其他两堆都是真币，两堆同样数量的真币重量也一定相等！确定了两堆真币，和一堆含有一个假币的，这样就变的很简单了！两堆真币拿出和假币堆一样数量的真币，和假币堆一比较，轻重的结果就出来了！\n\n关键点：\n- 分成三堆，其中两堆加起来一定要**大于或者等于**余下的那一堆，否则最后没法做比较\n- 三堆加起来等于全部的硬币数量，不要剩余什么零头，否则就多了可能性，自然算法的步骤就增多了\n\n那三堆到底可以分成多大？其实根据上面两个关键点已经可以推出来了\n\n\n$$ f(n)= \\begin{cases} 2x+y=n \\newline 2x>=y \\end{cases} $$\n\n\n\n由于 **n** 是已经确定的，其实就是解一个2元一次方程，求出**x**,**y**的范围，也就知道怎么分配堆的大小了\n\n数学真奇妙o(￣▽￣)d\n\n今天这道题就写这么多啦~\n\n白了个白~\n\n\n[1]: https://movie.douban.com/subject/1291546/","source":"_posts/how-to-confirm-a-fake-coin-lighter-or-weighter-than-true-coin.md","raw":"---\ntitle: 判断假币比真币重还是轻？\ndate: 2016-08-27 16:11:46\ntags:\n- 算法\ncategory:\n- 算法\n---\n\n## 更轻或者更重？\n\n> 你有n>2个外观相似的硬币和一个没有砝码的天平。其中一枚为假币，但并不知道它比真币重还是轻。设计一个 θ(1)的算法来确定假币比真币重还是轻。\n\n<!-- more-->\n\n看《算法设计与分析基础》，习题2.2里面的一道题，还挺有意思的。\n\n问题第一眼看上去并不算难，很快就能想出一些解法。\n\n## 第一种解法\n\n直观上，既然只有一枚假币，那其他都是真币，那其他真币，随便拿两个放在天平上，肯定天平是平衡的。如果不平衡，那里面一定有一个是假币。\n\n根据上面的想法：\n\n```\n随意从n>2中取出两枚硬币，分别为y1,y2\n\nif y1=y2 \n\t//y1和y2相等，那么y1，y2都是真币\n\twhile(true) {\n\t\t//再从所有硬币中取出一枚硬币y3\n\t\tif y1=y3\n\t\t\tcontinue\n\t\telse if y1>y2\n\t\t\t//假币更轻\n\t\t\tbreak\n\t\telse\n\t\t\t//假币更重\n\t\t\tbreak\n\t}\nelse \n\t//再从所有硬币中取出一枚硬币y3\n\tif y1=y3\n\t\t//y2就是假币\n\tif y1!=y3\n\t\t//y1就是假币\n\n```\n第一种解法，显然是一个`O(n)`时间复杂度的算法，最差情况下，比较到最后一个硬币才能发现假币。当然，最好情况，可以只需要两次。不过依然是一个`O(n)`时间复杂度的算法，并不符合题目的要求。\n\n不过，这是一种直观的解法，研究一个算法，就普通人来说，没法做到像大牛一般，一下就能想到很合适，很优雅的算法。可能就是从最粗暴的`暴力硬撸`算法开始，不过在这思考中间，有可能就能想到更好的思路。我一开始学习算法，做算法题时，就很有挫败感，感觉看别人的答案，都是很精妙的解法，甚至连代码都写的很`优雅`，都是`十行java搞定xxx`，`一行python解决xxx`，不过这背后付出了多少努力，我们是看不见的。记得在 [霸王别姬][1]里面有一幕，小赖子看到唱京戏的名角儿，底下人声鼎沸，叫好声一片，小豆子抹着眼泪大哭：“我什么时候能成角儿啊？这得挨多少打呀？”\n\n写远了。\n\n\n## 第二种解法\n\n要想做到`θ(1)`的时间复杂度，那必须在固定步骤中就能解出结果，那就必然不能在某一个硬币上面纠结，如果一个一个去比较，那必定是要到`O(n)`的。既然不能一个一个，那就一堆一堆咯？这是我当时最直观的想法。一堆一堆怎么比较？\n\n### 分成两堆\n\n如果`n%2=0`，把n分成两等份，必然一堆重，一堆轻，然而好像没什么卵用，没法确认假币轻还是重，因为我们不知道假币在哪堆。\n\n灵感来了，我们要怎么知道假币在哪堆呢？\n\n### 分成三堆\n\n分成三堆，假币一定会在其中一堆里面，那其他两堆都是真币，两堆同样数量的真币重量也一定相等！确定了两堆真币，和一堆含有一个假币的，这样就变的很简单了！两堆真币拿出和假币堆一样数量的真币，和假币堆一比较，轻重的结果就出来了！\n\n关键点：\n- 分成三堆，其中两堆加起来一定要**大于或者等于**余下的那一堆，否则最后没法做比较\n- 三堆加起来等于全部的硬币数量，不要剩余什么零头，否则就多了可能性，自然算法的步骤就增多了\n\n那三堆到底可以分成多大？其实根据上面两个关键点已经可以推出来了\n\n\n$$ f(n)= \\begin{cases} 2x+y=n \\newline 2x>=y \\end{cases} $$\n\n\n\n由于 **n** 是已经确定的，其实就是解一个2元一次方程，求出**x**,**y**的范围，也就知道怎么分配堆的大小了\n\n数学真奇妙o(￣▽￣)d\n\n今天这道题就写这么多啦~\n\n白了个白~\n\n\n[1]: https://movie.douban.com/subject/1291546/","slug":"how-to-confirm-a-fake-coin-lighter-or-weighter-than-true-coin","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgf700170a6trcabd6x7","content":"<h2 id=\"更轻或者更重？\"><a href=\"#更轻或者更重？\" class=\"headerlink\" title=\"更轻或者更重？\"></a>更轻或者更重？</h2><blockquote>\n<p>你有n&gt;2个外观相似的硬币和一个没有砝码的天平。其中一枚为假币，但并不知道它比真币重还是轻。设计一个 θ(1)的算法来确定假币比真币重还是轻。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>看《算法设计与分析基础》，习题2.2里面的一道题，还挺有意思的。</p>\n<p>问题第一眼看上去并不算难，很快就能想出一些解法。</p>\n<h2 id=\"第一种解法\"><a href=\"#第一种解法\" class=\"headerlink\" title=\"第一种解法\"></a>第一种解法</h2><p>直观上，既然只有一枚假币，那其他都是真币，那其他真币，随便拿两个放在天平上，肯定天平是平衡的。如果不平衡，那里面一定有一个是假币。</p>\n<p>根据上面的想法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">随意从n&gt;2中取出两枚硬币，分别为y1,y2</span><br><span class=\"line\"></span><br><span class=\"line\">if y1=y2 </span><br><span class=\"line\">\t//y1和y2相等，那么y1，y2都是真币</span><br><span class=\"line\">\twhile(true) &#123;</span><br><span class=\"line\">\t\t//再从所有硬币中取出一枚硬币y3</span><br><span class=\"line\">\t\tif y1=y3</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\telse if y1&gt;y2</span><br><span class=\"line\">\t\t\t//假币更轻</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t//假币更重</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">else </span><br><span class=\"line\">\t//再从所有硬币中取出一枚硬币y3</span><br><span class=\"line\">\tif y1=y3</span><br><span class=\"line\">\t\t//y2就是假币</span><br><span class=\"line\">\tif y1!=y3</span><br><span class=\"line\">\t\t//y1就是假币</span><br></pre></td></tr></table></figure>\n<p>第一种解法，显然是一个<code>O(n)</code>时间复杂度的算法，最差情况下，比较到最后一个硬币才能发现假币。当然，最好情况，可以只需要两次。不过依然是一个<code>O(n)</code>时间复杂度的算法，并不符合题目的要求。</p>\n<p>不过，这是一种直观的解法，研究一个算法，就普通人来说，没法做到像大牛一般，一下就能想到很合适，很优雅的算法。可能就是从最粗暴的<code>暴力硬撸</code>算法开始，不过在这思考中间，有可能就能想到更好的思路。我一开始学习算法，做算法题时，就很有挫败感，感觉看别人的答案，都是很精妙的解法，甚至连代码都写的很<code>优雅</code>，都是<code>十行java搞定xxx</code>，<code>一行python解决xxx</code>，不过这背后付出了多少努力，我们是看不见的。记得在 <a href=\"https://movie.douban.com/subject/1291546/\" target=\"_blank\" rel=\"noopener\">霸王别姬</a>里面有一幕，小赖子看到唱京戏的名角儿，底下人声鼎沸，叫好声一片，小豆子抹着眼泪大哭：“我什么时候能成角儿啊？这得挨多少打呀？”</p>\n<p>写远了。</p>\n<h2 id=\"第二种解法\"><a href=\"#第二种解法\" class=\"headerlink\" title=\"第二种解法\"></a>第二种解法</h2><p>要想做到<code>θ(1)</code>的时间复杂度，那必须在固定步骤中就能解出结果，那就必然不能在某一个硬币上面纠结，如果一个一个去比较，那必定是要到<code>O(n)</code>的。既然不能一个一个，那就一堆一堆咯？这是我当时最直观的想法。一堆一堆怎么比较？</p>\n<h3 id=\"分成两堆\"><a href=\"#分成两堆\" class=\"headerlink\" title=\"分成两堆\"></a>分成两堆</h3><p>如果<code>n%2=0</code>，把n分成两等份，必然一堆重，一堆轻，然而好像没什么卵用，没法确认假币轻还是重，因为我们不知道假币在哪堆。</p>\n<p>灵感来了，我们要怎么知道假币在哪堆呢？</p>\n<h3 id=\"分成三堆\"><a href=\"#分成三堆\" class=\"headerlink\" title=\"分成三堆\"></a>分成三堆</h3><p>分成三堆，假币一定会在其中一堆里面，那其他两堆都是真币，两堆同样数量的真币重量也一定相等！确定了两堆真币，和一堆含有一个假币的，这样就变的很简单了！两堆真币拿出和假币堆一样数量的真币，和假币堆一比较，轻重的结果就出来了！</p>\n<p>关键点：</p>\n<ul>\n<li>分成三堆，其中两堆加起来一定要<strong>大于或者等于</strong>余下的那一堆，否则最后没法做比较</li>\n<li>三堆加起来等于全部的硬币数量，不要剩余什么零头，否则就多了可能性，自然算法的步骤就增多了</li>\n</ul>\n<p>那三堆到底可以分成多大？其实根据上面两个关键点已经可以推出来了</p>\n<p>$$ f(n)= \\begin{cases} 2x+y=n \\newline 2x&gt;=y \\end{cases} $$</p>\n<p>由于 <strong>n</strong> 是已经确定的，其实就是解一个2元一次方程，求出<strong>x</strong>,<strong>y</strong>的范围，也就知道怎么分配堆的大小了</p>\n<p>数学真奇妙o(￣▽￣)d</p>\n<p>今天这道题就写这么多啦~</p>\n<p>白了个白~</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"更轻或者更重？\"><a href=\"#更轻或者更重？\" class=\"headerlink\" title=\"更轻或者更重？\"></a>更轻或者更重？</h2><blockquote>\n<p>你有n&gt;2个外观相似的硬币和一个没有砝码的天平。其中一枚为假币，但并不知道它比真币重还是轻。设计一个 θ(1)的算法来确定假币比真币重还是轻。</p>\n</blockquote>","more":"<p>看《算法设计与分析基础》，习题2.2里面的一道题，还挺有意思的。</p>\n<p>问题第一眼看上去并不算难，很快就能想出一些解法。</p>\n<h2 id=\"第一种解法\"><a href=\"#第一种解法\" class=\"headerlink\" title=\"第一种解法\"></a>第一种解法</h2><p>直观上，既然只有一枚假币，那其他都是真币，那其他真币，随便拿两个放在天平上，肯定天平是平衡的。如果不平衡，那里面一定有一个是假币。</p>\n<p>根据上面的想法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">随意从n&gt;2中取出两枚硬币，分别为y1,y2</span><br><span class=\"line\"></span><br><span class=\"line\">if y1=y2 </span><br><span class=\"line\">\t//y1和y2相等，那么y1，y2都是真币</span><br><span class=\"line\">\twhile(true) &#123;</span><br><span class=\"line\">\t\t//再从所有硬币中取出一枚硬币y3</span><br><span class=\"line\">\t\tif y1=y3</span><br><span class=\"line\">\t\t\tcontinue</span><br><span class=\"line\">\t\telse if y1&gt;y2</span><br><span class=\"line\">\t\t\t//假币更轻</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t\t//假币更重</span><br><span class=\"line\">\t\t\tbreak</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">else </span><br><span class=\"line\">\t//再从所有硬币中取出一枚硬币y3</span><br><span class=\"line\">\tif y1=y3</span><br><span class=\"line\">\t\t//y2就是假币</span><br><span class=\"line\">\tif y1!=y3</span><br><span class=\"line\">\t\t//y1就是假币</span><br></pre></td></tr></table></figure>\n<p>第一种解法，显然是一个<code>O(n)</code>时间复杂度的算法，最差情况下，比较到最后一个硬币才能发现假币。当然，最好情况，可以只需要两次。不过依然是一个<code>O(n)</code>时间复杂度的算法，并不符合题目的要求。</p>\n<p>不过，这是一种直观的解法，研究一个算法，就普通人来说，没法做到像大牛一般，一下就能想到很合适，很优雅的算法。可能就是从最粗暴的<code>暴力硬撸</code>算法开始，不过在这思考中间，有可能就能想到更好的思路。我一开始学习算法，做算法题时，就很有挫败感，感觉看别人的答案，都是很精妙的解法，甚至连代码都写的很<code>优雅</code>，都是<code>十行java搞定xxx</code>，<code>一行python解决xxx</code>，不过这背后付出了多少努力，我们是看不见的。记得在 <a href=\"https://movie.douban.com/subject/1291546/\" target=\"_blank\" rel=\"noopener\">霸王别姬</a>里面有一幕，小赖子看到唱京戏的名角儿，底下人声鼎沸，叫好声一片，小豆子抹着眼泪大哭：“我什么时候能成角儿啊？这得挨多少打呀？”</p>\n<p>写远了。</p>\n<h2 id=\"第二种解法\"><a href=\"#第二种解法\" class=\"headerlink\" title=\"第二种解法\"></a>第二种解法</h2><p>要想做到<code>θ(1)</code>的时间复杂度，那必须在固定步骤中就能解出结果，那就必然不能在某一个硬币上面纠结，如果一个一个去比较，那必定是要到<code>O(n)</code>的。既然不能一个一个，那就一堆一堆咯？这是我当时最直观的想法。一堆一堆怎么比较？</p>\n<h3 id=\"分成两堆\"><a href=\"#分成两堆\" class=\"headerlink\" title=\"分成两堆\"></a>分成两堆</h3><p>如果<code>n%2=0</code>，把n分成两等份，必然一堆重，一堆轻，然而好像没什么卵用，没法确认假币轻还是重，因为我们不知道假币在哪堆。</p>\n<p>灵感来了，我们要怎么知道假币在哪堆呢？</p>\n<h3 id=\"分成三堆\"><a href=\"#分成三堆\" class=\"headerlink\" title=\"分成三堆\"></a>分成三堆</h3><p>分成三堆，假币一定会在其中一堆里面，那其他两堆都是真币，两堆同样数量的真币重量也一定相等！确定了两堆真币，和一堆含有一个假币的，这样就变的很简单了！两堆真币拿出和假币堆一样数量的真币，和假币堆一比较，轻重的结果就出来了！</p>\n<p>关键点：</p>\n<ul>\n<li>分成三堆，其中两堆加起来一定要<strong>大于或者等于</strong>余下的那一堆，否则最后没法做比较</li>\n<li>三堆加起来等于全部的硬币数量，不要剩余什么零头，否则就多了可能性，自然算法的步骤就增多了</li>\n</ul>\n<p>那三堆到底可以分成多大？其实根据上面两个关键点已经可以推出来了</p>\n<p>$$ f(n)= \\begin{cases} 2x+y=n \\newline 2x&gt;=y \\end{cases} $$</p>\n<p>由于 <strong>n</strong> 是已经确定的，其实就是解一个2元一次方程，求出<strong>x</strong>,<strong>y</strong>的范围，也就知道怎么分配堆的大小了</p>\n<p>数学真奇妙o(￣▽￣)d</p>\n<p>今天这道题就写这么多啦~</p>\n<p>白了个白~</p>"},{"title":"如何在Markdown中方便快速的插入图片？","date":"2016-08-20T04:13:12.000Z","_content":"\n> 有时候我写Markdown格式的文档时，不管是记录博客，还是在工作中写文档，经常都会需要插入图片。毕竟现在都流行，无图无真相。一图胜千言。不过，要怎么方便快速的在Markdown里面插入图片，最近我还真的是研究了下。\n\n# 使用简书写Markdown\n\n虽然我自己没有在`简书`写博客，但是`简书`还真是支持的挺好的，很方便。可以直接在文章中，使用`CTRL C+V`，复制粘贴到文章中，`简书`会自己保存到图床，并生成链接，生成Markdown的语法。\n\n# 使用马克飞象\n\n马克飞象也支持`CTRL C+V`的方式插入图片，不过，需要付费成为会员，才能使用这个功能。\n\n# 使用自己的博客\n\n使用`hexo`等类似的对Markdown支持比较好的博客，强烈不建议使用`Wordpress`，真心对Markdown支持不好，我试过网上各种解决方案，都是`辣鸡`。\n直接在博客中建个文件夹存放文章图片，使用时上传到服务器，在文章中直接引用。\n引用的方式就是md的语法，`![]()`\n\n# 使用第三方图床（推荐）\n\n这是一种比较方便简单的方法，使用第三方的图床，直接上传图片到第三方，然后拿到图片的`URL`，在md中直接引用这个`URL`\n\n图床我推荐两个：\n\n## GitHub（推荐）\n\n著名同性交友网站，程序员交友网站，`GitHub`\n\n在`GitHub`上创建个放图片的仓库，然后把图片通过`git`上传上去就好了\n\n然后我们进到仓库里，进到图片的文件下，可以看到一个`Download`的按钮\n\n直接点击，会直接在新窗口打开这张图片，复制地址栏的`URL`就可以了\n\n或者，直接在`Download`按钮上，鼠标右键，`复制链接地址`（我是chrome浏览器，其他浏览器也都差不多，会有这么一个选项），直接粘贴就是图片地址了\n\n![复制链接地址](/images/如何在Markdown中方便快速的插入图片/1.png)\n\n大家可以直接用我的库试试，访问下面的`github`地址\n\n> https://github.com/yaoboss/photo-hosting/blob/master/images/dogeAndFish.jpg\n\n**大家也可以直接`fork`我的库去用，不用自己新建**\n\n\n## SM.MS\n\n> https://sm.ms/\n\n这是`V2EX`[^1]上一个用户说自己服务器资源太多，有点浪费，就做了一个免费的图床，分享给大家使用\n\n速度很快，挺不错的，用法也很简单，大家点进去就知道了，非常简单\n\n不过我主要是担心稳定性，毕竟是个人维护，不知道哪天不能用，就蛋疼了，所有图都会失效\n\n所以，大家的博客图片最好都在`GitHub`进行备份，以防丢失\n\n\n## 七牛\n\n还看到很多人推荐`七牛`，不过我自己没有去试，大家可以试试\n\n七牛现在业务线也是蛮多的\n\n## 微博\n\n微博也可以提供图床的访问，也有一部分人推荐\n\n\n\n\n\n\n\n\n\n\n[^1]: V2EX是一个互联网自由分享社区，很多高质量内容，曾经因为敏感内容被墙。后重新开放。> *http://www.v2ex.com/*","source":"_posts/how-to-insert-a-image-in-markdown.md","raw":"---\ntitle: 如何在Markdown中方便快速的插入图片？\ndate: 2016-08-20 12:13:12\ntags:\n- Markdown\n- 好用图床\ncategory:\n- Markdown\n\n---\n\n> 有时候我写Markdown格式的文档时，不管是记录博客，还是在工作中写文档，经常都会需要插入图片。毕竟现在都流行，无图无真相。一图胜千言。不过，要怎么方便快速的在Markdown里面插入图片，最近我还真的是研究了下。\n\n# 使用简书写Markdown\n\n虽然我自己没有在`简书`写博客，但是`简书`还真是支持的挺好的，很方便。可以直接在文章中，使用`CTRL C+V`，复制粘贴到文章中，`简书`会自己保存到图床，并生成链接，生成Markdown的语法。\n\n# 使用马克飞象\n\n马克飞象也支持`CTRL C+V`的方式插入图片，不过，需要付费成为会员，才能使用这个功能。\n\n# 使用自己的博客\n\n使用`hexo`等类似的对Markdown支持比较好的博客，强烈不建议使用`Wordpress`，真心对Markdown支持不好，我试过网上各种解决方案，都是`辣鸡`。\n直接在博客中建个文件夹存放文章图片，使用时上传到服务器，在文章中直接引用。\n引用的方式就是md的语法，`![]()`\n\n# 使用第三方图床（推荐）\n\n这是一种比较方便简单的方法，使用第三方的图床，直接上传图片到第三方，然后拿到图片的`URL`，在md中直接引用这个`URL`\n\n图床我推荐两个：\n\n## GitHub（推荐）\n\n著名同性交友网站，程序员交友网站，`GitHub`\n\n在`GitHub`上创建个放图片的仓库，然后把图片通过`git`上传上去就好了\n\n然后我们进到仓库里，进到图片的文件下，可以看到一个`Download`的按钮\n\n直接点击，会直接在新窗口打开这张图片，复制地址栏的`URL`就可以了\n\n或者，直接在`Download`按钮上，鼠标右键，`复制链接地址`（我是chrome浏览器，其他浏览器也都差不多，会有这么一个选项），直接粘贴就是图片地址了\n\n![复制链接地址](/images/如何在Markdown中方便快速的插入图片/1.png)\n\n大家可以直接用我的库试试，访问下面的`github`地址\n\n> https://github.com/yaoboss/photo-hosting/blob/master/images/dogeAndFish.jpg\n\n**大家也可以直接`fork`我的库去用，不用自己新建**\n\n\n## SM.MS\n\n> https://sm.ms/\n\n这是`V2EX`[^1]上一个用户说自己服务器资源太多，有点浪费，就做了一个免费的图床，分享给大家使用\n\n速度很快，挺不错的，用法也很简单，大家点进去就知道了，非常简单\n\n不过我主要是担心稳定性，毕竟是个人维护，不知道哪天不能用，就蛋疼了，所有图都会失效\n\n所以，大家的博客图片最好都在`GitHub`进行备份，以防丢失\n\n\n## 七牛\n\n还看到很多人推荐`七牛`，不过我自己没有去试，大家可以试试\n\n七牛现在业务线也是蛮多的\n\n## 微博\n\n微博也可以提供图床的访问，也有一部分人推荐\n\n\n\n\n\n\n\n\n\n\n[^1]: V2EX是一个互联网自由分享社区，很多高质量内容，曾经因为敏感内容被墙。后重新开放。> *http://www.v2ex.com/*","slug":"how-to-insert-a-image-in-markdown","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgf8001a0a6tdku8oed9","content":"<blockquote>\n<p>有时候我写Markdown格式的文档时，不管是记录博客，还是在工作中写文档，经常都会需要插入图片。毕竟现在都流行，无图无真相。一图胜千言。不过，要怎么方便快速的在Markdown里面插入图片，最近我还真的是研究了下。</p>\n</blockquote>\n<h1 id=\"使用简书写Markdown\"><a href=\"#使用简书写Markdown\" class=\"headerlink\" title=\"使用简书写Markdown\"></a>使用简书写Markdown</h1><p>虽然我自己没有在<code>简书</code>写博客，但是<code>简书</code>还真是支持的挺好的，很方便。可以直接在文章中，使用<code>CTRL C+V</code>，复制粘贴到文章中，<code>简书</code>会自己保存到图床，并生成链接，生成Markdown的语法。</p>\n<h1 id=\"使用马克飞象\"><a href=\"#使用马克飞象\" class=\"headerlink\" title=\"使用马克飞象\"></a>使用马克飞象</h1><p>马克飞象也支持<code>CTRL C+V</code>的方式插入图片，不过，需要付费成为会员，才能使用这个功能。</p>\n<h1 id=\"使用自己的博客\"><a href=\"#使用自己的博客\" class=\"headerlink\" title=\"使用自己的博客\"></a>使用自己的博客</h1><p>使用<code>hexo</code>等类似的对Markdown支持比较好的博客，强烈不建议使用<code>Wordpress</code>，真心对Markdown支持不好，我试过网上各种解决方案，都是<code>辣鸡</code>。<br>直接在博客中建个文件夹存放文章图片，使用时上传到服务器，在文章中直接引用。<br>引用的方式就是md的语法，<code>![]()</code></p>\n<h1 id=\"使用第三方图床（推荐）\"><a href=\"#使用第三方图床（推荐）\" class=\"headerlink\" title=\"使用第三方图床（推荐）\"></a>使用第三方图床（推荐）</h1><p>这是一种比较方便简单的方法，使用第三方的图床，直接上传图片到第三方，然后拿到图片的<code>URL</code>，在md中直接引用这个<code>URL</code></p>\n<p>图床我推荐两个：</p>\n<h2 id=\"GitHub（推荐）\"><a href=\"#GitHub（推荐）\" class=\"headerlink\" title=\"GitHub（推荐）\"></a>GitHub（推荐）</h2><p>著名同性交友网站，程序员交友网站，<code>GitHub</code></p>\n<p>在<code>GitHub</code>上创建个放图片的仓库，然后把图片通过<code>git</code>上传上去就好了</p>\n<p>然后我们进到仓库里，进到图片的文件下，可以看到一个<code>Download</code>的按钮</p>\n<p>直接点击，会直接在新窗口打开这张图片，复制地址栏的<code>URL</code>就可以了</p>\n<p>或者，直接在<code>Download</code>按钮上，鼠标右键，<code>复制链接地址</code>（我是chrome浏览器，其他浏览器也都差不多，会有这么一个选项），直接粘贴就是图片地址了</p>\n<p><img src=\"/images/如何在Markdown中方便快速的插入图片/1.png\" alt=\"复制链接地址\"></p>\n<p>大家可以直接用我的库试试，访问下面的<code>github</code>地址</p>\n<blockquote>\n<p><a href=\"https://github.com/yaoboss/photo-hosting/blob/master/images/dogeAndFish.jpg\" target=\"_blank\" rel=\"noopener\">https://github.com/yaoboss/photo-hosting/blob/master/images/dogeAndFish.jpg</a></p>\n</blockquote>\n<p><strong>大家也可以直接<code>fork</code>我的库去用，不用自己新建</strong></p>\n<h2 id=\"SM-MS\"><a href=\"#SM-MS\" class=\"headerlink\" title=\"SM.MS\"></a>SM.MS</h2><blockquote>\n<p><a href=\"https://sm.ms/\" target=\"_blank\" rel=\"noopener\">https://sm.ms/</a></p>\n</blockquote>\n<p>这是<code>V2EX</code>[^1]上一个用户说自己服务器资源太多，有点浪费，就做了一个免费的图床，分享给大家使用</p>\n<p>速度很快，挺不错的，用法也很简单，大家点进去就知道了，非常简单</p>\n<p>不过我主要是担心稳定性，毕竟是个人维护，不知道哪天不能用，就蛋疼了，所有图都会失效</p>\n<p>所以，大家的博客图片最好都在<code>GitHub</code>进行备份，以防丢失</p>\n<h2 id=\"七牛\"><a href=\"#七牛\" class=\"headerlink\" title=\"七牛\"></a>七牛</h2><p>还看到很多人推荐<code>七牛</code>，不过我自己没有去试，大家可以试试</p>\n<p>七牛现在业务线也是蛮多的</p>\n<h2 id=\"微博\"><a href=\"#微博\" class=\"headerlink\" title=\"微博\"></a>微博</h2><p>微博也可以提供图床的访问，也有一部分人推荐</p>\n<p>[^1]: V2EX是一个互联网自由分享社区，很多高质量内容，曾经因为敏感内容被墙。后重新开放。&gt; <em><a href=\"http://www.v2ex.com/\" target=\"_blank\" rel=\"noopener\">http://www.v2ex.com/</a></em></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>有时候我写Markdown格式的文档时，不管是记录博客，还是在工作中写文档，经常都会需要插入图片。毕竟现在都流行，无图无真相。一图胜千言。不过，要怎么方便快速的在Markdown里面插入图片，最近我还真的是研究了下。</p>\n</blockquote>\n<h1 id=\"使用简书写Markdown\"><a href=\"#使用简书写Markdown\" class=\"headerlink\" title=\"使用简书写Markdown\"></a>使用简书写Markdown</h1><p>虽然我自己没有在<code>简书</code>写博客，但是<code>简书</code>还真是支持的挺好的，很方便。可以直接在文章中，使用<code>CTRL C+V</code>，复制粘贴到文章中，<code>简书</code>会自己保存到图床，并生成链接，生成Markdown的语法。</p>\n<h1 id=\"使用马克飞象\"><a href=\"#使用马克飞象\" class=\"headerlink\" title=\"使用马克飞象\"></a>使用马克飞象</h1><p>马克飞象也支持<code>CTRL C+V</code>的方式插入图片，不过，需要付费成为会员，才能使用这个功能。</p>\n<h1 id=\"使用自己的博客\"><a href=\"#使用自己的博客\" class=\"headerlink\" title=\"使用自己的博客\"></a>使用自己的博客</h1><p>使用<code>hexo</code>等类似的对Markdown支持比较好的博客，强烈不建议使用<code>Wordpress</code>，真心对Markdown支持不好，我试过网上各种解决方案，都是<code>辣鸡</code>。<br>直接在博客中建个文件夹存放文章图片，使用时上传到服务器，在文章中直接引用。<br>引用的方式就是md的语法，<code>![]()</code></p>\n<h1 id=\"使用第三方图床（推荐）\"><a href=\"#使用第三方图床（推荐）\" class=\"headerlink\" title=\"使用第三方图床（推荐）\"></a>使用第三方图床（推荐）</h1><p>这是一种比较方便简单的方法，使用第三方的图床，直接上传图片到第三方，然后拿到图片的<code>URL</code>，在md中直接引用这个<code>URL</code></p>\n<p>图床我推荐两个：</p>\n<h2 id=\"GitHub（推荐）\"><a href=\"#GitHub（推荐）\" class=\"headerlink\" title=\"GitHub（推荐）\"></a>GitHub（推荐）</h2><p>著名同性交友网站，程序员交友网站，<code>GitHub</code></p>\n<p>在<code>GitHub</code>上创建个放图片的仓库，然后把图片通过<code>git</code>上传上去就好了</p>\n<p>然后我们进到仓库里，进到图片的文件下，可以看到一个<code>Download</code>的按钮</p>\n<p>直接点击，会直接在新窗口打开这张图片，复制地址栏的<code>URL</code>就可以了</p>\n<p>或者，直接在<code>Download</code>按钮上，鼠标右键，<code>复制链接地址</code>（我是chrome浏览器，其他浏览器也都差不多，会有这么一个选项），直接粘贴就是图片地址了</p>\n<p><img src=\"/images/如何在Markdown中方便快速的插入图片/1.png\" alt=\"复制链接地址\"></p>\n<p>大家可以直接用我的库试试，访问下面的<code>github</code>地址</p>\n<blockquote>\n<p><a href=\"https://github.com/yaoboss/photo-hosting/blob/master/images/dogeAndFish.jpg\" target=\"_blank\" rel=\"noopener\">https://github.com/yaoboss/photo-hosting/blob/master/images/dogeAndFish.jpg</a></p>\n</blockquote>\n<p><strong>大家也可以直接<code>fork</code>我的库去用，不用自己新建</strong></p>\n<h2 id=\"SM-MS\"><a href=\"#SM-MS\" class=\"headerlink\" title=\"SM.MS\"></a>SM.MS</h2><blockquote>\n<p><a href=\"https://sm.ms/\" target=\"_blank\" rel=\"noopener\">https://sm.ms/</a></p>\n</blockquote>\n<p>这是<code>V2EX</code>[^1]上一个用户说自己服务器资源太多，有点浪费，就做了一个免费的图床，分享给大家使用</p>\n<p>速度很快，挺不错的，用法也很简单，大家点进去就知道了，非常简单</p>\n<p>不过我主要是担心稳定性，毕竟是个人维护，不知道哪天不能用，就蛋疼了，所有图都会失效</p>\n<p>所以，大家的博客图片最好都在<code>GitHub</code>进行备份，以防丢失</p>\n<h2 id=\"七牛\"><a href=\"#七牛\" class=\"headerlink\" title=\"七牛\"></a>七牛</h2><p>还看到很多人推荐<code>七牛</code>，不过我自己没有去试，大家可以试试</p>\n<p>七牛现在业务线也是蛮多的</p>\n<h2 id=\"微博\"><a href=\"#微博\" class=\"headerlink\" title=\"微博\"></a>微博</h2><p>微博也可以提供图床的访问，也有一部分人推荐</p>\n<p>[^1]: V2EX是一个互联网自由分享社区，很多高质量内容，曾经因为敏感内容被墙。后重新开放。&gt; <em><a href=\"http://www.v2ex.com/\" target=\"_blank\" rel=\"noopener\">http://www.v2ex.com/</a></em></p>\n"},{"title":"mysql的时间格式化","date":"2016-08-15T03:56:26.000Z","_content":"\n\n# mysql时间格式化\n\n*转载请注明：姚老板的黑店*\n> www.yaoboss.me\n\n> 在我们的日常开发中，经常会涉及到一些时间相关的操作，比如说，要根据一个时间维度去查询某些数据，或者指定一个时间点去查询数据。这些都会涉及到时间的比较操作，等于，大于，小于，这时候，我们到底在表中源数据选取什么格式来保存时间，就变的尤为重要了，这关系到我们后面查询数据的便利性，以及mysql查询的性能开销。\n\n1.\n我们平时开发中，最简单的方式莫过于直接保存一个时间戳了，也就是一个`UNIX_TIME`格式的时间戳，也就是一个10位的以`秒`为单位的数字，这是最简单的方式，在各种语言中都提供了简单的API支持。\n\n**java**\n\n```java\nSystem.getCurrentMillis(); //要注意，java这里获取的是毫秒级时间，最后要“/1000”\n```\n\n**go**\n\n```go\ntime.Now().Unix()\n```\n\n直接将这个时间保存到mysql，这是最简单的一种记录时间戳的方式。统计查询时也非常简单，直接是数字的比较，速度也非常快。\n\n==特别注意：==这里有很多老的教程，或者是文章，或者是视频课程，大学课本，都会教mysql里面保存时间，时间`timestamp`类型，但是，这真的过时了，`timestamp`在实际工作中，基本没用到过，上面这种直接记录秒级的时间戳，要方便太多。\n\n2.\n上面的处理方式，已瞒足大多数业务场景，但是，当我们碰到一些特殊的需求，针对某一天的维度，或者是某个月份，或者是某个年份，那我们存储的时候就要存某年，某月，某日。\n\n在mysql中，我们使用`varchar`字符串类型存储这种时间格式，比如：`2015-06-01`,像这种类型的时间字符串，mysql是支持直接比较大小的，也就是说我们可以写下面这种sql语句：\n\n```sql\nselect * from table where time >= '2015-06-01' and time <= '2016-06-01'\n```\n上面的sql语句可以查出，这一年间，15年6月1号到16年6月1号的数据。\n\n所以，如果使用这种格式，我们在程序中就使用程序中的代码，对时间进行格式化后，再保存到数据库。\n\n比如go代码可以这么写：\n```go\ntime.Now().Format(\"2006-01-02\") //注意：这里go的格式化字符串比较特别，必须使用2006年1月2号这个日期，据说是go诞生的日期\n\ntime.Date(timeTime.Year(), timeTime.Month(), timeTime.Day(), 24, 0, 0, 0, timeTime.Location()).Unix()\n//根据指定日期构造time对象\n```\n\n3.\n如果你的项目代码中已经保存了`unix_time`类型的时间戳，你又想对其进行日期的比较，这里也可以使用mysql中的自带函数，进行字段格式化。\n\n- 将`unix_time`转为日期格式：\n```sql\nFROM_UNIXTIME(unix_timestamp)\n```\n\n- 将时间戳转为日期格式，并按照指定格式格式化：\n```sql\nDATE_FORMAT(date,format)\n\nDATE_FORMAT(FROM_UNIXTIME(unix_timestamp),'%m-%d-%Y')\n```\n对于支持的格式，直接搜索date_formate函数就可以搜到了。\n\n- 还可以直接获取，年月日\n```\nyear( FROM_UNIXTIME( unix_timestamp ) )\nmonth( FROM_UNIXTIME( unix_timestamp ) )\nweek( FROM_UNIXTIME( unix_timestamp ) )\n\n```","source":"_posts/mysql-time-formate.md","raw":"---\ntitle: mysql的时间格式化\ndate: 2016-08-15 11:56:26\ntags:\n- mysql\ncategory:\n- mysql\n---\n\n\n# mysql时间格式化\n\n*转载请注明：姚老板的黑店*\n> www.yaoboss.me\n\n> 在我们的日常开发中，经常会涉及到一些时间相关的操作，比如说，要根据一个时间维度去查询某些数据，或者指定一个时间点去查询数据。这些都会涉及到时间的比较操作，等于，大于，小于，这时候，我们到底在表中源数据选取什么格式来保存时间，就变的尤为重要了，这关系到我们后面查询数据的便利性，以及mysql查询的性能开销。\n\n1.\n我们平时开发中，最简单的方式莫过于直接保存一个时间戳了，也就是一个`UNIX_TIME`格式的时间戳，也就是一个10位的以`秒`为单位的数字，这是最简单的方式，在各种语言中都提供了简单的API支持。\n\n**java**\n\n```java\nSystem.getCurrentMillis(); //要注意，java这里获取的是毫秒级时间，最后要“/1000”\n```\n\n**go**\n\n```go\ntime.Now().Unix()\n```\n\n直接将这个时间保存到mysql，这是最简单的一种记录时间戳的方式。统计查询时也非常简单，直接是数字的比较，速度也非常快。\n\n==特别注意：==这里有很多老的教程，或者是文章，或者是视频课程，大学课本，都会教mysql里面保存时间，时间`timestamp`类型，但是，这真的过时了，`timestamp`在实际工作中，基本没用到过，上面这种直接记录秒级的时间戳，要方便太多。\n\n2.\n上面的处理方式，已瞒足大多数业务场景，但是，当我们碰到一些特殊的需求，针对某一天的维度，或者是某个月份，或者是某个年份，那我们存储的时候就要存某年，某月，某日。\n\n在mysql中，我们使用`varchar`字符串类型存储这种时间格式，比如：`2015-06-01`,像这种类型的时间字符串，mysql是支持直接比较大小的，也就是说我们可以写下面这种sql语句：\n\n```sql\nselect * from table where time >= '2015-06-01' and time <= '2016-06-01'\n```\n上面的sql语句可以查出，这一年间，15年6月1号到16年6月1号的数据。\n\n所以，如果使用这种格式，我们在程序中就使用程序中的代码，对时间进行格式化后，再保存到数据库。\n\n比如go代码可以这么写：\n```go\ntime.Now().Format(\"2006-01-02\") //注意：这里go的格式化字符串比较特别，必须使用2006年1月2号这个日期，据说是go诞生的日期\n\ntime.Date(timeTime.Year(), timeTime.Month(), timeTime.Day(), 24, 0, 0, 0, timeTime.Location()).Unix()\n//根据指定日期构造time对象\n```\n\n3.\n如果你的项目代码中已经保存了`unix_time`类型的时间戳，你又想对其进行日期的比较，这里也可以使用mysql中的自带函数，进行字段格式化。\n\n- 将`unix_time`转为日期格式：\n```sql\nFROM_UNIXTIME(unix_timestamp)\n```\n\n- 将时间戳转为日期格式，并按照指定格式格式化：\n```sql\nDATE_FORMAT(date,format)\n\nDATE_FORMAT(FROM_UNIXTIME(unix_timestamp),'%m-%d-%Y')\n```\n对于支持的格式，直接搜索date_formate函数就可以搜到了。\n\n- 还可以直接获取，年月日\n```\nyear( FROM_UNIXTIME( unix_timestamp ) )\nmonth( FROM_UNIXTIME( unix_timestamp ) )\nweek( FROM_UNIXTIME( unix_timestamp ) )\n\n```","slug":"mysql-time-formate","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgf9001d0a6tr3exjdys","content":"<h1 id=\"mysql时间格式化\"><a href=\"#mysql时间格式化\" class=\"headerlink\" title=\"mysql时间格式化\"></a>mysql时间格式化</h1><p><em>转载请注明：姚老板的黑店</em></p>\n<blockquote>\n<p><a href=\"http://www.yaoboss.me\" target=\"_blank\" rel=\"noopener\">www.yaoboss.me</a></p>\n</blockquote>\n<blockquote>\n<p>在我们的日常开发中，经常会涉及到一些时间相关的操作，比如说，要根据一个时间维度去查询某些数据，或者指定一个时间点去查询数据。这些都会涉及到时间的比较操作，等于，大于，小于，这时候，我们到底在表中源数据选取什么格式来保存时间，就变的尤为重要了，这关系到我们后面查询数据的便利性，以及mysql查询的性能开销。</p>\n</blockquote>\n<p>1.<br>我们平时开发中，最简单的方式莫过于直接保存一个时间戳了，也就是一个<code>UNIX_TIME</code>格式的时间戳，也就是一个10位的以<code>秒</code>为单位的数字，这是最简单的方式，在各种语言中都提供了简单的API支持。</p>\n<p><strong>java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.getCurrentMillis(); <span class=\"comment\">//要注意，java这里获取的是毫秒级时间，最后要“/1000”</span></span><br></pre></td></tr></table></figure>\n<p><strong>go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.Now().Unix()</span><br></pre></td></tr></table></figure>\n<p>直接将这个时间保存到mysql，这是最简单的一种记录时间戳的方式。统计查询时也非常简单，直接是数字的比较，速度也非常快。</p>\n<p>==特别注意：==这里有很多老的教程，或者是文章，或者是视频课程，大学课本，都会教mysql里面保存时间，时间<code>timestamp</code>类型，但是，这真的过时了，<code>timestamp</code>在实际工作中，基本没用到过，上面这种直接记录秒级的时间戳，要方便太多。</p>\n<p>2.<br>上面的处理方式，已瞒足大多数业务场景，但是，当我们碰到一些特殊的需求，针对某一天的维度，或者是某个月份，或者是某个年份，那我们存储的时候就要存某年，某月，某日。</p>\n<p>在mysql中，我们使用<code>varchar</code>字符串类型存储这种时间格式，比如：<code>2015-06-01</code>,像这种类型的时间字符串，mysql是支持直接比较大小的，也就是说我们可以写下面这种sql语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> <span class=\"keyword\">time</span> &gt;= <span class=\"string\">'2015-06-01'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">time</span> &lt;= <span class=\"string\">'2016-06-01'</span></span><br></pre></td></tr></table></figure>\n<p>上面的sql语句可以查出，这一年间，15年6月1号到16年6月1号的数据。</p>\n<p>所以，如果使用这种格式，我们在程序中就使用程序中的代码，对时间进行格式化后，再保存到数据库。</p>\n<p>比如go代码可以这么写：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.Now().Format(<span class=\"string\">\"2006-01-02\"</span>) <span class=\"comment\">//注意：这里go的格式化字符串比较特别，必须使用2006年1月2号这个日期，据说是go诞生的日期</span></span><br><span class=\"line\"></span><br><span class=\"line\">time.Date(timeTime.Year(), timeTime.Month(), timeTime.Day(), <span class=\"number\">24</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, timeTime.Location()).Unix()</span><br><span class=\"line\"><span class=\"comment\">//根据指定日期构造time对象</span></span><br></pre></td></tr></table></figure></p>\n<p>3.<br>如果你的项目代码中已经保存了<code>unix_time</code>类型的时间戳，你又想对其进行日期的比较，这里也可以使用mysql中的自带函数，进行字段格式化。</p>\n<ul>\n<li><p>将<code>unix_time</code>转为日期格式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM_UNIXTIME(unix_timestamp)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将时间戳转为日期格式，并按照指定格式格式化：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATE_FORMAT(date,format)</span><br><span class=\"line\"></span><br><span class=\"line\">DATE_FORMAT(FROM_UNIXTIME(unix_timestamp),'%m-%d-%Y')</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>对于支持的格式，直接搜索date_formate函数就可以搜到了。</p>\n<ul>\n<li>还可以直接获取，年月日<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">year( FROM_UNIXTIME( unix_timestamp ) )</span><br><span class=\"line\">month( FROM_UNIXTIME( unix_timestamp ) )</span><br><span class=\"line\">week( FROM_UNIXTIME( unix_timestamp ) )</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mysql时间格式化\"><a href=\"#mysql时间格式化\" class=\"headerlink\" title=\"mysql时间格式化\"></a>mysql时间格式化</h1><p><em>转载请注明：姚老板的黑店</em></p>\n<blockquote>\n<p><a href=\"http://www.yaoboss.me\" target=\"_blank\" rel=\"noopener\">www.yaoboss.me</a></p>\n</blockquote>\n<blockquote>\n<p>在我们的日常开发中，经常会涉及到一些时间相关的操作，比如说，要根据一个时间维度去查询某些数据，或者指定一个时间点去查询数据。这些都会涉及到时间的比较操作，等于，大于，小于，这时候，我们到底在表中源数据选取什么格式来保存时间，就变的尤为重要了，这关系到我们后面查询数据的便利性，以及mysql查询的性能开销。</p>\n</blockquote>\n<p>1.<br>我们平时开发中，最简单的方式莫过于直接保存一个时间戳了，也就是一个<code>UNIX_TIME</code>格式的时间戳，也就是一个10位的以<code>秒</code>为单位的数字，这是最简单的方式，在各种语言中都提供了简单的API支持。</p>\n<p><strong>java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.getCurrentMillis(); <span class=\"comment\">//要注意，java这里获取的是毫秒级时间，最后要“/1000”</span></span><br></pre></td></tr></table></figure>\n<p><strong>go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.Now().Unix()</span><br></pre></td></tr></table></figure>\n<p>直接将这个时间保存到mysql，这是最简单的一种记录时间戳的方式。统计查询时也非常简单，直接是数字的比较，速度也非常快。</p>\n<p>==特别注意：==这里有很多老的教程，或者是文章，或者是视频课程，大学课本，都会教mysql里面保存时间，时间<code>timestamp</code>类型，但是，这真的过时了，<code>timestamp</code>在实际工作中，基本没用到过，上面这种直接记录秒级的时间戳，要方便太多。</p>\n<p>2.<br>上面的处理方式，已瞒足大多数业务场景，但是，当我们碰到一些特殊的需求，针对某一天的维度，或者是某个月份，或者是某个年份，那我们存储的时候就要存某年，某月，某日。</p>\n<p>在mysql中，我们使用<code>varchar</code>字符串类型存储这种时间格式，比如：<code>2015-06-01</code>,像这种类型的时间字符串，mysql是支持直接比较大小的，也就是说我们可以写下面这种sql语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> <span class=\"keyword\">time</span> &gt;= <span class=\"string\">'2015-06-01'</span> <span class=\"keyword\">and</span> <span class=\"keyword\">time</span> &lt;= <span class=\"string\">'2016-06-01'</span></span><br></pre></td></tr></table></figure>\n<p>上面的sql语句可以查出，这一年间，15年6月1号到16年6月1号的数据。</p>\n<p>所以，如果使用这种格式，我们在程序中就使用程序中的代码，对时间进行格式化后，再保存到数据库。</p>\n<p>比如go代码可以这么写：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.Now().Format(<span class=\"string\">\"2006-01-02\"</span>) <span class=\"comment\">//注意：这里go的格式化字符串比较特别，必须使用2006年1月2号这个日期，据说是go诞生的日期</span></span><br><span class=\"line\"></span><br><span class=\"line\">time.Date(timeTime.Year(), timeTime.Month(), timeTime.Day(), <span class=\"number\">24</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, timeTime.Location()).Unix()</span><br><span class=\"line\"><span class=\"comment\">//根据指定日期构造time对象</span></span><br></pre></td></tr></table></figure></p>\n<p>3.<br>如果你的项目代码中已经保存了<code>unix_time</code>类型的时间戳，你又想对其进行日期的比较，这里也可以使用mysql中的自带函数，进行字段格式化。</p>\n<ul>\n<li><p>将<code>unix_time</code>转为日期格式：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM_UNIXTIME(unix_timestamp)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将时间戳转为日期格式，并按照指定格式格式化：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DATE_FORMAT(date,format)</span><br><span class=\"line\"></span><br><span class=\"line\">DATE_FORMAT(FROM_UNIXTIME(unix_timestamp),'%m-%d-%Y')</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>对于支持的格式，直接搜索date_formate函数就可以搜到了。</p>\n<ul>\n<li>还可以直接获取，年月日<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">year( FROM_UNIXTIME( unix_timestamp ) )</span><br><span class=\"line\">month( FROM_UNIXTIME( unix_timestamp ) )</span><br><span class=\"line\">week( FROM_UNIXTIME( unix_timestamp ) )</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"mysql授权远程访问","date":"2016-07-24T13:36:24.000Z","_content":"\n```\nGRANT ALL PRIVILEGES ON *.* TO 'username'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;\n```","source":"_posts/mysql授权远程访问.md","raw":"---\ntitle: mysql授权远程访问\ndate: 2016-07-24 21:36:24\ntags: \n- linux\n- mysql\ncategory:\n- mysql\n---\n\n```\nGRANT ALL PRIVILEGES ON *.* TO 'username'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;\n```","slug":"mysql授权远程访问","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfa001e0a6t1uvsp4hx","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;username&apos;@&apos;%&apos; IDENTIFIED BY &apos;password&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;username&apos;@&apos;%&apos; IDENTIFIED BY &apos;password&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>"},{"title":"破解jar包直接修改class文件的方式","date":"2016-12-06T14:09:06.000Z","_content":"\n\n# 用到的工具\n\njd-gui\n> http://jd.benow.ca/\n\njclasslib \n> https://github.com/ingokegel/jclasslib\n\n# 怎么修改\n\njd-gui是用来反编译jar包的，通过jd-gui可以很清晰的看到整个jar包里的所有java文件，还可以进行类搜索等功能\n\njclasslib可以查看到class文件的二进制结构，可以直观看到常量区，方法区信息，jclasslib没法直接修改class文件，只能查看，但是在jclasslib的安装位置，有个lib文件夹，里面有可以用于修改class文件的工具类，换句话说，**我们修改class文件是需要自己写代码的，没法直接可视化的修改class文件代码**\n\n1. 可以通过jd-gui找到需要修改的代码位置，通过完整的代码结构，在jd-gui里面可以很轻松找到对应的类和方法\n2. 在jclasslib中找到对应的方法，跳转进相应需要修改的常量存储地址，找到对应地址\n3. 新建一个java项目，**把jclasslib的lib目录下的jar包拷贝进**来，然后参考下面的代码进行修改\n\n\n```java\npackage com.soap.api;\n\nimport java.io.*;\nimport org.gjt.jclasslib.io.ClassFileWriter;\nimport org.gjt.jclasslib.structures.ClassFile;\nimport org.gjt.jclasslib.structures.Constant;\nimport org.gjt.jclasslib.structures.constants.ConstantUtf8Info;\npublic class Test {\n\tpublic static void main(String[] args) throws Exception {\n\n\t\tString filePath = \"F:\\\\test\\\\ServerConfig.class\";\n\t\tFileInputStream fis = new FileInputStream(filePath);\n\n\t\tDataInput di = new DataInputStream(fis);\n\t\tClassFile cf = new ClassFile();\n\t\tcf.read(di);\n\t\tConstant[] infos = cf.getConstantPool();\n\n\t\tint count = infos.length;\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tif (infos[i] != null) {\n\t\t\t\tSystem.out.print(i);\n\t\t\t\tSystem.out.print(\" = \");\n\t\t\t\tSystem.out.print(infos[i].getVerbose());\n\t\t\t\tSystem.out.print(\" = \");\n\t\t\t\tSystem.out.println(infos[i].getVerbose());\n\t\t\t\tif(i == 204){\n\t\t\t\t\tConstantUtf8Info uInfo = (ConstantUtf8Info)infos[i];\n\t\t\t\t\tuInfo.setString(\"你好哇！李银河！\");\n\t\t\t\t\tinfos[i]=uInfo;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcf.setConstantPool(infos);\n\t\tfis.close();\n\t\tFile f = new File(filePath);\n\t\tClassFileWriter.writeToFile(f, cf);\n\t}\n}\n\n\n```\n\n\n","source":"_posts/modify-class-file-in-the-jar-of-java.md","raw":"---\ntitle: 破解jar包直接修改class文件的方式\ndate: 2016-12-06 22:09:06\ntags:\n- java\ncategory:\n- java\n---\n\n\n# 用到的工具\n\njd-gui\n> http://jd.benow.ca/\n\njclasslib \n> https://github.com/ingokegel/jclasslib\n\n# 怎么修改\n\njd-gui是用来反编译jar包的，通过jd-gui可以很清晰的看到整个jar包里的所有java文件，还可以进行类搜索等功能\n\njclasslib可以查看到class文件的二进制结构，可以直观看到常量区，方法区信息，jclasslib没法直接修改class文件，只能查看，但是在jclasslib的安装位置，有个lib文件夹，里面有可以用于修改class文件的工具类，换句话说，**我们修改class文件是需要自己写代码的，没法直接可视化的修改class文件代码**\n\n1. 可以通过jd-gui找到需要修改的代码位置，通过完整的代码结构，在jd-gui里面可以很轻松找到对应的类和方法\n2. 在jclasslib中找到对应的方法，跳转进相应需要修改的常量存储地址，找到对应地址\n3. 新建一个java项目，**把jclasslib的lib目录下的jar包拷贝进**来，然后参考下面的代码进行修改\n\n\n```java\npackage com.soap.api;\n\nimport java.io.*;\nimport org.gjt.jclasslib.io.ClassFileWriter;\nimport org.gjt.jclasslib.structures.ClassFile;\nimport org.gjt.jclasslib.structures.Constant;\nimport org.gjt.jclasslib.structures.constants.ConstantUtf8Info;\npublic class Test {\n\tpublic static void main(String[] args) throws Exception {\n\n\t\tString filePath = \"F:\\\\test\\\\ServerConfig.class\";\n\t\tFileInputStream fis = new FileInputStream(filePath);\n\n\t\tDataInput di = new DataInputStream(fis);\n\t\tClassFile cf = new ClassFile();\n\t\tcf.read(di);\n\t\tConstant[] infos = cf.getConstantPool();\n\n\t\tint count = infos.length;\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tif (infos[i] != null) {\n\t\t\t\tSystem.out.print(i);\n\t\t\t\tSystem.out.print(\" = \");\n\t\t\t\tSystem.out.print(infos[i].getVerbose());\n\t\t\t\tSystem.out.print(\" = \");\n\t\t\t\tSystem.out.println(infos[i].getVerbose());\n\t\t\t\tif(i == 204){\n\t\t\t\t\tConstantUtf8Info uInfo = (ConstantUtf8Info)infos[i];\n\t\t\t\t\tuInfo.setString(\"你好哇！李银河！\");\n\t\t\t\t\tinfos[i]=uInfo;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcf.setConstantPool(infos);\n\t\tfis.close();\n\t\tFile f = new File(filePath);\n\t\tClassFileWriter.writeToFile(f, cf);\n\t}\n}\n\n\n```\n\n\n","slug":"modify-class-file-in-the-jar-of-java","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfb001i0a6t9xtt8z8b","content":"<h1 id=\"用到的工具\"><a href=\"#用到的工具\" class=\"headerlink\" title=\"用到的工具\"></a>用到的工具</h1><p>jd-gui</p>\n<blockquote>\n<p><a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">http://jd.benow.ca/</a></p>\n</blockquote>\n<p>jclasslib </p>\n<blockquote>\n<p><a href=\"https://github.com/ingokegel/jclasslib\" target=\"_blank\" rel=\"noopener\">https://github.com/ingokegel/jclasslib</a></p>\n</blockquote>\n<h1 id=\"怎么修改\"><a href=\"#怎么修改\" class=\"headerlink\" title=\"怎么修改\"></a>怎么修改</h1><p>jd-gui是用来反编译jar包的，通过jd-gui可以很清晰的看到整个jar包里的所有java文件，还可以进行类搜索等功能</p>\n<p>jclasslib可以查看到class文件的二进制结构，可以直观看到常量区，方法区信息，jclasslib没法直接修改class文件，只能查看，但是在jclasslib的安装位置，有个lib文件夹，里面有可以用于修改class文件的工具类，换句话说，<strong>我们修改class文件是需要自己写代码的，没法直接可视化的修改class文件代码</strong></p>\n<ol>\n<li>可以通过jd-gui找到需要修改的代码位置，通过完整的代码结构，在jd-gui里面可以很轻松找到对应的类和方法</li>\n<li>在jclasslib中找到对应的方法，跳转进相应需要修改的常量存储地址，找到对应地址</li>\n<li>新建一个java项目，<strong>把jclasslib的lib目录下的jar包拷贝进</strong>来，然后参考下面的代码进行修改</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.soap.api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gjt.jclasslib.io.ClassFileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gjt.jclasslib.structures.ClassFile;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gjt.jclasslib.structures.Constant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gjt.jclasslib.structures.constants.ConstantUtf8Info;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString filePath = <span class=\"string\">\"F:\\\\test\\\\ServerConfig.class\"</span>;</span><br><span class=\"line\">\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tDataInput di = <span class=\"keyword\">new</span> DataInputStream(fis);</span><br><span class=\"line\">\t\tClassFile cf = <span class=\"keyword\">new</span> ClassFile();</span><br><span class=\"line\">\t\tcf.read(di);</span><br><span class=\"line\">\t\tConstant[] infos = cf.getConstantPool();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = infos.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (infos[i] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(i);</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\" = \"</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.print(infos[i].getVerbose());</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\" = \"</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(infos[i].getVerbose());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i == <span class=\"number\">204</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tConstantUtf8Info uInfo = (ConstantUtf8Info)infos[i];</span><br><span class=\"line\">\t\t\t\t\tuInfo.setString(<span class=\"string\">\"你好哇！李银河！\"</span>);</span><br><span class=\"line\">\t\t\t\t\tinfos[i]=uInfo;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcf.setConstantPool(infos);</span><br><span class=\"line\">\t\tfis.close();</span><br><span class=\"line\">\t\tFile f = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">\t\tClassFileWriter.writeToFile(f, cf);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"用到的工具\"><a href=\"#用到的工具\" class=\"headerlink\" title=\"用到的工具\"></a>用到的工具</h1><p>jd-gui</p>\n<blockquote>\n<p><a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">http://jd.benow.ca/</a></p>\n</blockquote>\n<p>jclasslib </p>\n<blockquote>\n<p><a href=\"https://github.com/ingokegel/jclasslib\" target=\"_blank\" rel=\"noopener\">https://github.com/ingokegel/jclasslib</a></p>\n</blockquote>\n<h1 id=\"怎么修改\"><a href=\"#怎么修改\" class=\"headerlink\" title=\"怎么修改\"></a>怎么修改</h1><p>jd-gui是用来反编译jar包的，通过jd-gui可以很清晰的看到整个jar包里的所有java文件，还可以进行类搜索等功能</p>\n<p>jclasslib可以查看到class文件的二进制结构，可以直观看到常量区，方法区信息，jclasslib没法直接修改class文件，只能查看，但是在jclasslib的安装位置，有个lib文件夹，里面有可以用于修改class文件的工具类，换句话说，<strong>我们修改class文件是需要自己写代码的，没法直接可视化的修改class文件代码</strong></p>\n<ol>\n<li>可以通过jd-gui找到需要修改的代码位置，通过完整的代码结构，在jd-gui里面可以很轻松找到对应的类和方法</li>\n<li>在jclasslib中找到对应的方法，跳转进相应需要修改的常量存储地址，找到对应地址</li>\n<li>新建一个java项目，<strong>把jclasslib的lib目录下的jar包拷贝进</strong>来，然后参考下面的代码进行修改</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.soap.api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gjt.jclasslib.io.ClassFileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gjt.jclasslib.structures.ClassFile;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gjt.jclasslib.structures.Constant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.gjt.jclasslib.structures.constants.ConstantUtf8Info;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString filePath = <span class=\"string\">\"F:\\\\test\\\\ServerConfig.class\"</span>;</span><br><span class=\"line\">\t\tFileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tDataInput di = <span class=\"keyword\">new</span> DataInputStream(fis);</span><br><span class=\"line\">\t\tClassFile cf = <span class=\"keyword\">new</span> ClassFile();</span><br><span class=\"line\">\t\tcf.read(di);</span><br><span class=\"line\">\t\tConstant[] infos = cf.getConstantPool();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = infos.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (infos[i] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(i);</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\" = \"</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.print(infos[i].getVerbose());</span><br><span class=\"line\">\t\t\t\tSystem.out.print(<span class=\"string\">\" = \"</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(infos[i].getVerbose());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i == <span class=\"number\">204</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tConstantUtf8Info uInfo = (ConstantUtf8Info)infos[i];</span><br><span class=\"line\">\t\t\t\t\tuInfo.setString(<span class=\"string\">\"你好哇！李银河！\"</span>);</span><br><span class=\"line\">\t\t\t\t\tinfos[i]=uInfo;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcf.setConstantPool(infos);</span><br><span class=\"line\">\t\tfis.close();</span><br><span class=\"line\">\t\tFile f = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">\t\tClassFileWriter.writeToFile(f, cf);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"ifconfig command not found","date":"2016-07-20T14:52:46.000Z","_content":"找不到ifconfig命令\n\n新安装的centos7，准备配置网络设置时，使用ifconfig命令，发现居然找不到命令，command not found\n\n问了下谷老师，看来linux也是更新了不少啊\n\nifconfig命令属于net-tools，但是centos7的默认minimal最小化安装中并没有安装net-tools\n\n而且net-tools现在属于被废弃的，官方已经不推荐使用\n所以有两种解决办法：\n1.当然就是直接安装net-tools, yum install net-tools\n\n2.使用 ip a，命令代替，官方也推荐这种做法\n如果需要看各种包流量情况，需要更详细的信息，可以使用\n\n```\n-s (-stats, -statistics) 这个参数\nip -s addr\n或者再加上人性化显示 -h\nip -s -h addr\n```","source":"_posts/ifconfig-command-not-found.md","raw":"---\ntitle: ifconfig command not found\ndate: 2016-07-20 22:52:46\ntags:\n- linux\ncategory:\n- linux\n---\n找不到ifconfig命令\n\n新安装的centos7，准备配置网络设置时，使用ifconfig命令，发现居然找不到命令，command not found\n\n问了下谷老师，看来linux也是更新了不少啊\n\nifconfig命令属于net-tools，但是centos7的默认minimal最小化安装中并没有安装net-tools\n\n而且net-tools现在属于被废弃的，官方已经不推荐使用\n所以有两种解决办法：\n1.当然就是直接安装net-tools, yum install net-tools\n\n2.使用 ip a，命令代替，官方也推荐这种做法\n如果需要看各种包流量情况，需要更详细的信息，可以使用\n\n```\n-s (-stats, -statistics) 这个参数\nip -s addr\n或者再加上人性化显示 -h\nip -s -h addr\n```","slug":"ifconfig-command-not-found","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfc001j0a6t4inpiud9","content":"<p>找不到ifconfig命令</p>\n<p>新安装的centos7，准备配置网络设置时，使用ifconfig命令，发现居然找不到命令，command not found</p>\n<p>问了下谷老师，看来linux也是更新了不少啊</p>\n<p>ifconfig命令属于net-tools，但是centos7的默认minimal最小化安装中并没有安装net-tools</p>\n<p>而且net-tools现在属于被废弃的，官方已经不推荐使用<br>所以有两种解决办法：<br>1.当然就是直接安装net-tools, yum install net-tools</p>\n<p>2.使用 ip a，命令代替，官方也推荐这种做法<br>如果需要看各种包流量情况，需要更详细的信息，可以使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-s (-stats, -statistics) 这个参数</span><br><span class=\"line\">ip -s addr</span><br><span class=\"line\">或者再加上人性化显示 -h</span><br><span class=\"line\">ip -s -h addr</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>找不到ifconfig命令</p>\n<p>新安装的centos7，准备配置网络设置时，使用ifconfig命令，发现居然找不到命令，command not found</p>\n<p>问了下谷老师，看来linux也是更新了不少啊</p>\n<p>ifconfig命令属于net-tools，但是centos7的默认minimal最小化安装中并没有安装net-tools</p>\n<p>而且net-tools现在属于被废弃的，官方已经不推荐使用<br>所以有两种解决办法：<br>1.当然就是直接安装net-tools, yum install net-tools</p>\n<p>2.使用 ip a，命令代替，官方也推荐这种做法<br>如果需要看各种包流量情况，需要更详细的信息，可以使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-s (-stats, -statistics) 这个参数</span><br><span class=\"line\">ip -s addr</span><br><span class=\"line\">或者再加上人性化显示 -h</span><br><span class=\"line\">ip -s -h addr</span><br></pre></td></tr></table></figure>"},{"title":"telnet退格删除快捷键","date":"2016-07-24T14:24:25.000Z","_content":"\n我们使用telnet时，经常输错字符，发现按退格键无效，只能是回车，然后重新敲这个命令，一直我还真的不知道是可以退格删除的，其实只要加上ctrl组合建就可以了。\n\nctrl+backspace: 退格删除字符\n\nctrl+]: 退出telnet客户端 或者敲 quit 命令也可以 不够感觉还是快捷键比较好用","source":"_posts/telnet退格删除快捷键.md","raw":"---\ntitle: telnet退格删除快捷键\ndate: 2016-07-24 22:24:25\ntags:\n- linux\n- xmanager\ncategory:\n- linux\n---\n\n我们使用telnet时，经常输错字符，发现按退格键无效，只能是回车，然后重新敲这个命令，一直我还真的不知道是可以退格删除的，其实只要加上ctrl组合建就可以了。\n\nctrl+backspace: 退格删除字符\n\nctrl+]: 退出telnet客户端 或者敲 quit 命令也可以 不够感觉还是快捷键比较好用","slug":"telnet退格删除快捷键","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfd001o0a6tp02pxbi3","content":"<p>我们使用telnet时，经常输错字符，发现按退格键无效，只能是回车，然后重新敲这个命令，一直我还真的不知道是可以退格删除的，其实只要加上ctrl组合建就可以了。</p>\n<p>ctrl+backspace: 退格删除字符</p>\n<p>ctrl+]: 退出telnet客户端 或者敲 quit 命令也可以 不够感觉还是快捷键比较好用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们使用telnet时，经常输错字符，发现按退格键无效，只能是回车，然后重新敲这个命令，一直我还真的不知道是可以退格删除的，其实只要加上ctrl组合建就可以了。</p>\n<p>ctrl+backspace: 退格删除字符</p>\n<p>ctrl+]: 退出telnet客户端 或者敲 quit 命令也可以 不够感觉还是快捷键比较好用</p>\n"},{"title":"由一只大闸蟹想到的基于tesseract-ocr的验证码识别","date":"2016-10-01T07:49:42.000Z","_content":"\n> 本来今年没打算吃大闸蟹，也就没买，说实话也不是特别好这口，剥起来还麻烦。碰巧朋友公司发了券，可以兑换八只，她有两张，也吃不完，遂要来一张。万万没想到，我几年最后还是吃上了大闸蟹。进入正题，朋友公司发的是礼品卡，兑换券，有一个卡号，和一个密码，到指定的网站上用这卡号和密码登录之后即可兑换，用快递发货。流程就是如此。拍照发我之后，卡号只有5位，密码是6位，我顿感兴奋，这可能性不多啊，密码只有6位，0-9的数字组合，总共10的6次方，也就是100万种可能性，直接写程序去请求的话，理论上完全可以破解，那就免费吃螃蟹啦！当然，我只是出于技术的兴奋点，利用漏洞去吃螃蟹，不合法，也不道德。（让我想起阿里月饼）由此，因为一只螃蟹，开始两天的技术之旅。\n\n<!-- more -->\n\n# 思路\n\n目标兑换网站是使用ASP的站点，在查看源码的过程中，发现应该是那种外包公司，或者是淘宝建站，源码里面还有广告，`xx建站`，说明这个公司完全没有自己的技术运维人员。\n\n从代码层面，就是简单的ASP页面。核心就是一个登入窗口，可以输入卡号，密码登录。然后有一个验证码，验证码为0-9的4个数字组成，关键就是这个验证码了。登录请求可以代码直接模拟，对某一个卡号重试100万次，应该不用100万次那么多，密码的构成应该不是完全随机，不过也都是一个重试的过程。只要目标站不挂掉 - -。后来测试虽然没挂，不过也是拒绝服务了，这是后话了。\n\n再看验证码，chrome `f12` 直接抓请求，发现这个验证码的生成居然是一个`asp`页面，因为没写过asp，所以还是第一次见这种做法。查看了下，服务端是根据一个生成算法，生成一个`bmp`位图数据，放在asp页面中返回。请求头直接就是`image/webp,image/*,*/*;q=0.8`，显示最后就是一张bmp图片。\n\n![验证码](/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/1.bmp)\n\n验证码中加入了一些噪点，而且每个数字的形状还有区别，像上面图中，两个8就不太一样，这让后面的识别也是难度大了很多。\n\n# 验证码识别\n\n一开始我想的比较简单，觉得肯定会有开源的库开源简单搞定这个问题，后面开始去写代码的时候，发现确实不是那么容易。\n\n## 获取验证码样本库\n\n做识别，肯定要先拿一些验证码样本库，不管是分析规律，还是测试识别成功率，肯定都是需要的。\n\n这个站点的验证码虽然是一个asp页面，但分析下不难得出，其实也就是把`bmp`的二进制数据写在了`asp`页面中，最后以bmp格式显示。这和你在电脑上把一个asp的文件改成bmp格式，然后查看，其实是一回事。\n\n这样就比较简单了，直接get请求拿到这个验证码，写到本地的bmp格式文件中，齐活！\n\n```\n    public void spiderAllCodeImage() {\n        for (int i=0; i<10000; i++) {\n            CloseableHttpClient client = HttpClients.createDefault();\n\n            //构造HTTP请求，使用java的httpclients\n            HttpGet request = new HttpGet(DZX_URL_CODE);\n//            request.setHeader(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\");\n            CloseableHttpResponse response = null;\n            try {\n                response = client.execute(request);\n            } catch (IOException e) {\n                e.printStackTrace();\n                return;\n            }\n\n        try {\n            byte[] imageByte = new byte[1024];\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            //从response中获取二进制数据\n            response.getEntity().writeTo(baos);\n            imageByte = baos.toByteArray();\n            //这段可以无视，本想做个缓存比较，后来发现不是很好用，动态代码生成的验证码都是不同的，只有在大量样本下，会出现重复\n            String md5 = DigestUtils.md5DigestAsHex(imageByte);\n            if (codeMd5Map.containsKey(md5)) {\n                System.out.println(new String(imageByte, \"utf-8\"));\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                continue;\n            } else {\n                codeMd5Map.put(md5, new String(imageByte, \"utf-8\"));\n            }\n            //写到本地\n            File file = new File(\"D:/codeimage/code\" + i + \".bmp\");\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(imageByte);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        }\n    }\n\n```\n我上面获取了10000张，不过中间目标服务器会出现`unable service`拒绝服务现象，获取不到那么多样本，不过也已经够用了\n\n## 识别引擎\n\n对于验证码的识别，我可以说是完全从0开始。一切都从`google`开始。这也是技术人员最重要的东西了，就是能学，能快速上手。东西是永远学不完的，技术也是在不断更替的，不可能学完所有的技术，但是等到用的时候，只要知道学习的方法，自己花点时间研究上手就行了。\n\n重在内功心法，招式啥的，会点一招鲜走遍天的就好。\n\n说多了。\n\n先搜，如何识别验证码，看了几篇文章，都提到了一个开源项目，`Tesseract-OCR`，有了方向，就容易一些了。直接开始去搜这个开源项目，看看怎么使用。我也就选择这个主流的识别引擎了。毕竟讨论的人多，生态就会比较丰富，问题也比较容易得到解决。\n\nTesseract-OCR，简单介绍下， `Tesseract是一个开源的OCR（Optical Character Recognition，光学字符识别）引擎，可以识别多种格式的图像文件并将其转换成文本，目前已支持60多种语言（包括中文）。 Tesseract最初由HP公司开发，后来由Google维护。`。\n\ngithub地址：\n> https://github.com/tesseract-ocr/tesseract\n\n## 引擎安装\n\n### windows安装版\n\n我使用的是windows，我在这只讲windows的，其他方式自己搜索下，不再赘述\n\ntesseract这个识别引擎，在windows下如果想直接使用的话，可以选择安装版，也就是`installer`的方式，像我们平常使用的软件一样\n\n寻找下载链接的过程比较曲折，因为有墙，好多地址都下不下来，我自己又有官网洁癖，喜欢一定要在官网下的东西，反正最终曲折的下载好\n\ntesseract更新速度较慢，如果你追求速度，直接使用我下面给的下载链接，最快。\n\n> http://download.csdn.net/detail/yzw19932010/9644501\n\n安装好以后，找到安装目录下的`tesseract.exe`，在**当前目录下**cmd命令模式下执行，\n\n`tesseract.exe doc\\eurotext.tif doc\\result`\n\n这条命令，使用识别引擎，识别`doc\\eurotext.tif`这个文件，结果写到`doc\\result`\n\n或者\n\n`tesseract.exe doc\\eurotext.tif doc\\result digits`\n\n加上`digits`参数，表示只识别数字\n\n还可以指定识别模式，`-psm`是识别模式，`-l`指定识别语言\n```\npagesegmode values are:\n0 = Orientation and script detection (OSD) only.\n1 = Automatic page segmentation with OSD.\n2 = Automatic page segmentation, but no OSD, or OCR\n3 = Fully automatic page segmentation, but no OSD. (Default)\n4 = Assume a single column of text of variable sizes.\n5 = Assume a single uniform block of vertically aligned text.\n6 = Assume a single uniform block of text.\n7 = Treat the image as a single text line.\n8 = Treat the image as a single word.\n9 = Treat the image as a single word in a circle.\n10 = Treat the image as a single character.\n-l lang and/or -psm pagesegmode must occur before anyconfigfile.\n\n```\n`D:\\Tesseract\\Tesseract-OCR>tesseract.exe doc\\newimage.bmp doc\\result -l eng -psm 7`\n\n### 代码支持\n\n上面这种模式当然还不够好，只有命令行，虽然说代码中也能调用，但是不够优雅。\n\ntesseract 原生好像只提供3个DLL给C或者C++调用，其他语言没有提供API支持\n\n不过，tesseract有很多`wrapper`，就是前人给我们包装好的，给各种语言使用的一个适配包\n\n原文地址：\n> https://github.com/tesseract-ocr/tesseract/wiki/AddOns#tesseract-wrappers\n\n可以到这里找你想使用的语言的`wrapper`\n\n我使用的是java，我这里就说java的了\n\n最方便的是直接使用`maven`获取\n```\n        <dependency>\n            <groupId>net.sourceforge.tess4j</groupId>\n            <artifactId>tess4j</artifactId>\n            <version>3.2.1</version>\n        </dependency>\n```\n不过这种方式，不包含需要使用到的`testdata`（引擎自带的一些识别需要的训练数据），运行会报错\n\n所以前面那个windows版本还是要下的，里面包含了所有的`testdata`\n\n推荐方式：直接到 tesseract 把其源码拉下来，在test包下面有很多例子，都是可以直接运行的，这样方式最快，最方便，testdata也有，直接引用这个源码也都可以\n\n\n# 图片处理\n\n引擎有了，API调用很简单，核心代码就两句\n\n```\n    @Test\n    public void testDoOCR_File() throws Exception {\n        logger.info(\"doOCR on a PNG image\");\n        //获取待识别图片的File对象\n        File imageFile = new File(this.testResourcesDataPath, \"eurotext.png\");\n        String expResult = \"The (quick) [brown] {fox} jumps!\\nOver the $43,456.78 <lazy> #90 dog\";\n        //获取Tesseract实例\n        ITesseract instance = instance = new Tesseract();\n        //设置testdata数据路径\n        instance.setDatapath(new File(datapath).getPath());\n        //识别，返回String的结果\n        String result = instance.doOCR(imageFile);\n        logger.info(result);\n        assertEquals(expResult, result.substring(0, expResult.length()));\n    }\n```\n\n但是对于我们上面的验证码，发现识别根本不正确，没法得到正确的结果\n\n> 特别是，代码识别，和cmd命令识别，结果还不一样，暂时没找到问题所在\n\n这时候，就需要图片处理了\n\n原图里面加入了太多的噪点，而且数字进行了扭曲，导致识别率极低，几乎是不可用\n\n网上很多方案采取的大都是，先切割，把每一个数字单独切割出来，然后去噪，进行二值化，灰度处理（因为处理引擎对于灰度图片识别较好）\n\n但是我要处理的这个验证码，每一个数字都不是完全的相同，有扭曲程度，如果进行切割，最后拿二进制数据进行比较，这个相似度的阈值很难确定，所以我还是倾向于识别引擎可以去帮我处理这些问题（不过，最后发现，我还是想太多，识别引擎没有这么智能，做不到这点）\n\n## 去除噪点+二值化处理+灰度处理\n\n对于这个图片的二值化处理比较简单\n\n我用`FastStone Capture`的取色工具看了下图片里的色值，发现去除噪点之后的图片都是一种颜色\n\n那就只要简单遍历图片的像素点，把主干的颜色全部设置成黑色就行了\n\n```\npackage sample.simple.service;\n\nimport org.springframework.stereotype.Service;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\n\n/**\n * Created by ji on 2016/10/1.\n */\n@Service\npublic class BmpService {\n\n    public void optimisedBmp(String bmpAbsolutePath) throws Exception {\n        File file = new File(bmpAbsolutePath);\n        BufferedImage bufferedImage = ImageIO.read(file);\n        BufferedImage newImage = removeInterference(bufferedImage);\n        File newImageFile = new File(\"D:\\\\codeimage\\\\newImage\\\\newimage.bmp\");\n        ImageIO.write(newImage, \"bmp\", newImageFile);\n    }\n\n    // 去除图像噪点\n    public static BufferedImage removeInterference(BufferedImage image)\n            throws Exception {\n        int width = image.getWidth();\n        int height = image.getHeight();\n        for (int x = 0; x < width; ++x) {\n            for (int y = 0; y < height; ++y) {\n                if (!isFontColor(image.getRGB(x, y))) {\n                    image.setRGB(x, y, Color.WHITE.getRGB());\n                }else {\n                    image.setRGB(x, y, Color.BLACK.getRGB());\n                }\n            }\n        }\n        return image;\n    }\n\n    // 使用工具找到主色的色值，得到R + G +B =340\n    private static boolean isFontColor(int colorInt) {\n        Color color = new Color(colorInt);\n\n        return color.getRed() + color.getGreen() + color.getBlue() == 340;\n    }\n}\n\n```\n代码写的比较乱，不过大概意思能看出来，就是去除噪点，加二值化\n\n这样处理完的图片像这样：\n\n![验证码](/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/2.bmp)\n\n再使用识别引擎试下，正确率提高了一些，但是，还没法做到完全正确。\n\n# 总结\n\n对于图像识别，真的是一门大学问，我一开始想的过于简单了。后面发现坑确实还是多，而且对于`计算机图像`技术要求较高，虽然有开源引擎，但是调教还是要求程序员有深厚的内功，对于我这种刚入门的菜鸟，最后的结局就是失败了，大闸蟹最后也没吃上了。哈哈~\n\n接下来还可以做的工作，包括 腐蚀， 滤波，主要还是对图片的处理\n\n不过，我感觉也可以有其他思路，不过实现起来比较复杂，涉及到很多机器学习的东西\n\n比如，可以切割拿到0-9个数字的一个二进制值，用来做原始数据，后面的待验证的都和原始数据进行比较，相似度最大的就认为是那个数字\n\n但是这个相似度的计算，有待考虑\n\n因为时间有限，只能暂时搁置\n\n也希望有大神可以不吝赐教，这种验证码的识别应该怎么做，最佳实践是什么\n\n\nps. 国庆第一天总算没浪费，干了一些事，学了点东西 ╰(￣▽￣)╭\n\n----\n\n# 参考文档\n\n参考过的一些文章，真心感谢前人的付出，技术人真的无私：\n\n提供了一种Tesseract-ocr样本训练方法，提供一种比较好的思路，后面我也会做尝试\n> http://blog.csdn.net/firehood_/article/details/8433077\n\n写了一个基于Tesseract-ocr做电表度数的识别项目的思考过程，很有参考价值\n> https://taozj.org/2016/07/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%BA%E4%BA%8ETesseract%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E7%A8%8B%E5%BA%8F/?utm_source=tuicool&utm_medium=referral\n\nJava 使用 Tess4J 进行 图片文字识别 笔记（API使用指导，如果使用JAVA的话，要看下）\n> https://my.oschina.net/zhouxiang/blog/161619\n\n> http://www.zhangrenhua.com/2016/05/26/Tesseract-OCR%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/\n\n没有使用tesseract的一种思路，其实就是基于相似度的,还包括切割\n> http://www.cnblogs.com/nayitian/p/3282862.html\n\ntesseract-ocr 文档页面\n> https://github.com/tesseract-ocr 文档页面/tesseract/wiki/AddOns#tesseract-wrappers\n\ntesseract4java\n> https://github.com/tesseract4java/tesseract4java\n\nEasyPR\n> https://github.com/liuruoze/EasyPR","source":"_posts/thinkings-from-crab.md","raw":"---\ntitle: 由一只大闸蟹想到的基于tesseract-ocr的验证码识别\ndate: 2016-10-01 15:49:42\ntags:\n- java\n- tesseract\n- 机器学习\ncategory:\n- java\n---\n\n> 本来今年没打算吃大闸蟹，也就没买，说实话也不是特别好这口，剥起来还麻烦。碰巧朋友公司发了券，可以兑换八只，她有两张，也吃不完，遂要来一张。万万没想到，我几年最后还是吃上了大闸蟹。进入正题，朋友公司发的是礼品卡，兑换券，有一个卡号，和一个密码，到指定的网站上用这卡号和密码登录之后即可兑换，用快递发货。流程就是如此。拍照发我之后，卡号只有5位，密码是6位，我顿感兴奋，这可能性不多啊，密码只有6位，0-9的数字组合，总共10的6次方，也就是100万种可能性，直接写程序去请求的话，理论上完全可以破解，那就免费吃螃蟹啦！当然，我只是出于技术的兴奋点，利用漏洞去吃螃蟹，不合法，也不道德。（让我想起阿里月饼）由此，因为一只螃蟹，开始两天的技术之旅。\n\n<!-- more -->\n\n# 思路\n\n目标兑换网站是使用ASP的站点，在查看源码的过程中，发现应该是那种外包公司，或者是淘宝建站，源码里面还有广告，`xx建站`，说明这个公司完全没有自己的技术运维人员。\n\n从代码层面，就是简单的ASP页面。核心就是一个登入窗口，可以输入卡号，密码登录。然后有一个验证码，验证码为0-9的4个数字组成，关键就是这个验证码了。登录请求可以代码直接模拟，对某一个卡号重试100万次，应该不用100万次那么多，密码的构成应该不是完全随机，不过也都是一个重试的过程。只要目标站不挂掉 - -。后来测试虽然没挂，不过也是拒绝服务了，这是后话了。\n\n再看验证码，chrome `f12` 直接抓请求，发现这个验证码的生成居然是一个`asp`页面，因为没写过asp，所以还是第一次见这种做法。查看了下，服务端是根据一个生成算法，生成一个`bmp`位图数据，放在asp页面中返回。请求头直接就是`image/webp,image/*,*/*;q=0.8`，显示最后就是一张bmp图片。\n\n![验证码](/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/1.bmp)\n\n验证码中加入了一些噪点，而且每个数字的形状还有区别，像上面图中，两个8就不太一样，这让后面的识别也是难度大了很多。\n\n# 验证码识别\n\n一开始我想的比较简单，觉得肯定会有开源的库开源简单搞定这个问题，后面开始去写代码的时候，发现确实不是那么容易。\n\n## 获取验证码样本库\n\n做识别，肯定要先拿一些验证码样本库，不管是分析规律，还是测试识别成功率，肯定都是需要的。\n\n这个站点的验证码虽然是一个asp页面，但分析下不难得出，其实也就是把`bmp`的二进制数据写在了`asp`页面中，最后以bmp格式显示。这和你在电脑上把一个asp的文件改成bmp格式，然后查看，其实是一回事。\n\n这样就比较简单了，直接get请求拿到这个验证码，写到本地的bmp格式文件中，齐活！\n\n```\n    public void spiderAllCodeImage() {\n        for (int i=0; i<10000; i++) {\n            CloseableHttpClient client = HttpClients.createDefault();\n\n            //构造HTTP请求，使用java的httpclients\n            HttpGet request = new HttpGet(DZX_URL_CODE);\n//            request.setHeader(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\");\n            CloseableHttpResponse response = null;\n            try {\n                response = client.execute(request);\n            } catch (IOException e) {\n                e.printStackTrace();\n                return;\n            }\n\n        try {\n            byte[] imageByte = new byte[1024];\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            //从response中获取二进制数据\n            response.getEntity().writeTo(baos);\n            imageByte = baos.toByteArray();\n            //这段可以无视，本想做个缓存比较，后来发现不是很好用，动态代码生成的验证码都是不同的，只有在大量样本下，会出现重复\n            String md5 = DigestUtils.md5DigestAsHex(imageByte);\n            if (codeMd5Map.containsKey(md5)) {\n                System.out.println(new String(imageByte, \"utf-8\"));\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                continue;\n            } else {\n                codeMd5Map.put(md5, new String(imageByte, \"utf-8\"));\n            }\n            //写到本地\n            File file = new File(\"D:/codeimage/code\" + i + \".bmp\");\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(imageByte);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        }\n    }\n\n```\n我上面获取了10000张，不过中间目标服务器会出现`unable service`拒绝服务现象，获取不到那么多样本，不过也已经够用了\n\n## 识别引擎\n\n对于验证码的识别，我可以说是完全从0开始。一切都从`google`开始。这也是技术人员最重要的东西了，就是能学，能快速上手。东西是永远学不完的，技术也是在不断更替的，不可能学完所有的技术，但是等到用的时候，只要知道学习的方法，自己花点时间研究上手就行了。\n\n重在内功心法，招式啥的，会点一招鲜走遍天的就好。\n\n说多了。\n\n先搜，如何识别验证码，看了几篇文章，都提到了一个开源项目，`Tesseract-OCR`，有了方向，就容易一些了。直接开始去搜这个开源项目，看看怎么使用。我也就选择这个主流的识别引擎了。毕竟讨论的人多，生态就会比较丰富，问题也比较容易得到解决。\n\nTesseract-OCR，简单介绍下， `Tesseract是一个开源的OCR（Optical Character Recognition，光学字符识别）引擎，可以识别多种格式的图像文件并将其转换成文本，目前已支持60多种语言（包括中文）。 Tesseract最初由HP公司开发，后来由Google维护。`。\n\ngithub地址：\n> https://github.com/tesseract-ocr/tesseract\n\n## 引擎安装\n\n### windows安装版\n\n我使用的是windows，我在这只讲windows的，其他方式自己搜索下，不再赘述\n\ntesseract这个识别引擎，在windows下如果想直接使用的话，可以选择安装版，也就是`installer`的方式，像我们平常使用的软件一样\n\n寻找下载链接的过程比较曲折，因为有墙，好多地址都下不下来，我自己又有官网洁癖，喜欢一定要在官网下的东西，反正最终曲折的下载好\n\ntesseract更新速度较慢，如果你追求速度，直接使用我下面给的下载链接，最快。\n\n> http://download.csdn.net/detail/yzw19932010/9644501\n\n安装好以后，找到安装目录下的`tesseract.exe`，在**当前目录下**cmd命令模式下执行，\n\n`tesseract.exe doc\\eurotext.tif doc\\result`\n\n这条命令，使用识别引擎，识别`doc\\eurotext.tif`这个文件，结果写到`doc\\result`\n\n或者\n\n`tesseract.exe doc\\eurotext.tif doc\\result digits`\n\n加上`digits`参数，表示只识别数字\n\n还可以指定识别模式，`-psm`是识别模式，`-l`指定识别语言\n```\npagesegmode values are:\n0 = Orientation and script detection (OSD) only.\n1 = Automatic page segmentation with OSD.\n2 = Automatic page segmentation, but no OSD, or OCR\n3 = Fully automatic page segmentation, but no OSD. (Default)\n4 = Assume a single column of text of variable sizes.\n5 = Assume a single uniform block of vertically aligned text.\n6 = Assume a single uniform block of text.\n7 = Treat the image as a single text line.\n8 = Treat the image as a single word.\n9 = Treat the image as a single word in a circle.\n10 = Treat the image as a single character.\n-l lang and/or -psm pagesegmode must occur before anyconfigfile.\n\n```\n`D:\\Tesseract\\Tesseract-OCR>tesseract.exe doc\\newimage.bmp doc\\result -l eng -psm 7`\n\n### 代码支持\n\n上面这种模式当然还不够好，只有命令行，虽然说代码中也能调用，但是不够优雅。\n\ntesseract 原生好像只提供3个DLL给C或者C++调用，其他语言没有提供API支持\n\n不过，tesseract有很多`wrapper`，就是前人给我们包装好的，给各种语言使用的一个适配包\n\n原文地址：\n> https://github.com/tesseract-ocr/tesseract/wiki/AddOns#tesseract-wrappers\n\n可以到这里找你想使用的语言的`wrapper`\n\n我使用的是java，我这里就说java的了\n\n最方便的是直接使用`maven`获取\n```\n        <dependency>\n            <groupId>net.sourceforge.tess4j</groupId>\n            <artifactId>tess4j</artifactId>\n            <version>3.2.1</version>\n        </dependency>\n```\n不过这种方式，不包含需要使用到的`testdata`（引擎自带的一些识别需要的训练数据），运行会报错\n\n所以前面那个windows版本还是要下的，里面包含了所有的`testdata`\n\n推荐方式：直接到 tesseract 把其源码拉下来，在test包下面有很多例子，都是可以直接运行的，这样方式最快，最方便，testdata也有，直接引用这个源码也都可以\n\n\n# 图片处理\n\n引擎有了，API调用很简单，核心代码就两句\n\n```\n    @Test\n    public void testDoOCR_File() throws Exception {\n        logger.info(\"doOCR on a PNG image\");\n        //获取待识别图片的File对象\n        File imageFile = new File(this.testResourcesDataPath, \"eurotext.png\");\n        String expResult = \"The (quick) [brown] {fox} jumps!\\nOver the $43,456.78 <lazy> #90 dog\";\n        //获取Tesseract实例\n        ITesseract instance = instance = new Tesseract();\n        //设置testdata数据路径\n        instance.setDatapath(new File(datapath).getPath());\n        //识别，返回String的结果\n        String result = instance.doOCR(imageFile);\n        logger.info(result);\n        assertEquals(expResult, result.substring(0, expResult.length()));\n    }\n```\n\n但是对于我们上面的验证码，发现识别根本不正确，没法得到正确的结果\n\n> 特别是，代码识别，和cmd命令识别，结果还不一样，暂时没找到问题所在\n\n这时候，就需要图片处理了\n\n原图里面加入了太多的噪点，而且数字进行了扭曲，导致识别率极低，几乎是不可用\n\n网上很多方案采取的大都是，先切割，把每一个数字单独切割出来，然后去噪，进行二值化，灰度处理（因为处理引擎对于灰度图片识别较好）\n\n但是我要处理的这个验证码，每一个数字都不是完全的相同，有扭曲程度，如果进行切割，最后拿二进制数据进行比较，这个相似度的阈值很难确定，所以我还是倾向于识别引擎可以去帮我处理这些问题（不过，最后发现，我还是想太多，识别引擎没有这么智能，做不到这点）\n\n## 去除噪点+二值化处理+灰度处理\n\n对于这个图片的二值化处理比较简单\n\n我用`FastStone Capture`的取色工具看了下图片里的色值，发现去除噪点之后的图片都是一种颜色\n\n那就只要简单遍历图片的像素点，把主干的颜色全部设置成黑色就行了\n\n```\npackage sample.simple.service;\n\nimport org.springframework.stereotype.Service;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\n\n/**\n * Created by ji on 2016/10/1.\n */\n@Service\npublic class BmpService {\n\n    public void optimisedBmp(String bmpAbsolutePath) throws Exception {\n        File file = new File(bmpAbsolutePath);\n        BufferedImage bufferedImage = ImageIO.read(file);\n        BufferedImage newImage = removeInterference(bufferedImage);\n        File newImageFile = new File(\"D:\\\\codeimage\\\\newImage\\\\newimage.bmp\");\n        ImageIO.write(newImage, \"bmp\", newImageFile);\n    }\n\n    // 去除图像噪点\n    public static BufferedImage removeInterference(BufferedImage image)\n            throws Exception {\n        int width = image.getWidth();\n        int height = image.getHeight();\n        for (int x = 0; x < width; ++x) {\n            for (int y = 0; y < height; ++y) {\n                if (!isFontColor(image.getRGB(x, y))) {\n                    image.setRGB(x, y, Color.WHITE.getRGB());\n                }else {\n                    image.setRGB(x, y, Color.BLACK.getRGB());\n                }\n            }\n        }\n        return image;\n    }\n\n    // 使用工具找到主色的色值，得到R + G +B =340\n    private static boolean isFontColor(int colorInt) {\n        Color color = new Color(colorInt);\n\n        return color.getRed() + color.getGreen() + color.getBlue() == 340;\n    }\n}\n\n```\n代码写的比较乱，不过大概意思能看出来，就是去除噪点，加二值化\n\n这样处理完的图片像这样：\n\n![验证码](/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/2.bmp)\n\n再使用识别引擎试下，正确率提高了一些，但是，还没法做到完全正确。\n\n# 总结\n\n对于图像识别，真的是一门大学问，我一开始想的过于简单了。后面发现坑确实还是多，而且对于`计算机图像`技术要求较高，虽然有开源引擎，但是调教还是要求程序员有深厚的内功，对于我这种刚入门的菜鸟，最后的结局就是失败了，大闸蟹最后也没吃上了。哈哈~\n\n接下来还可以做的工作，包括 腐蚀， 滤波，主要还是对图片的处理\n\n不过，我感觉也可以有其他思路，不过实现起来比较复杂，涉及到很多机器学习的东西\n\n比如，可以切割拿到0-9个数字的一个二进制值，用来做原始数据，后面的待验证的都和原始数据进行比较，相似度最大的就认为是那个数字\n\n但是这个相似度的计算，有待考虑\n\n因为时间有限，只能暂时搁置\n\n也希望有大神可以不吝赐教，这种验证码的识别应该怎么做，最佳实践是什么\n\n\nps. 国庆第一天总算没浪费，干了一些事，学了点东西 ╰(￣▽￣)╭\n\n----\n\n# 参考文档\n\n参考过的一些文章，真心感谢前人的付出，技术人真的无私：\n\n提供了一种Tesseract-ocr样本训练方法，提供一种比较好的思路，后面我也会做尝试\n> http://blog.csdn.net/firehood_/article/details/8433077\n\n写了一个基于Tesseract-ocr做电表度数的识别项目的思考过程，很有参考价值\n> https://taozj.org/2016/07/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%BA%E4%BA%8ETesseract%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E7%A8%8B%E5%BA%8F/?utm_source=tuicool&utm_medium=referral\n\nJava 使用 Tess4J 进行 图片文字识别 笔记（API使用指导，如果使用JAVA的话，要看下）\n> https://my.oschina.net/zhouxiang/blog/161619\n\n> http://www.zhangrenhua.com/2016/05/26/Tesseract-OCR%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/\n\n没有使用tesseract的一种思路，其实就是基于相似度的,还包括切割\n> http://www.cnblogs.com/nayitian/p/3282862.html\n\ntesseract-ocr 文档页面\n> https://github.com/tesseract-ocr 文档页面/tesseract/wiki/AddOns#tesseract-wrappers\n\ntesseract4java\n> https://github.com/tesseract4java/tesseract4java\n\nEasyPR\n> https://github.com/liuruoze/EasyPR","slug":"thinkings-from-crab","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfe001q0a6togy8g7ft","content":"<blockquote>\n<p>本来今年没打算吃大闸蟹，也就没买，说实话也不是特别好这口，剥起来还麻烦。碰巧朋友公司发了券，可以兑换八只，她有两张，也吃不完，遂要来一张。万万没想到，我几年最后还是吃上了大闸蟹。进入正题，朋友公司发的是礼品卡，兑换券，有一个卡号，和一个密码，到指定的网站上用这卡号和密码登录之后即可兑换，用快递发货。流程就是如此。拍照发我之后，卡号只有5位，密码是6位，我顿感兴奋，这可能性不多啊，密码只有6位，0-9的数字组合，总共10的6次方，也就是100万种可能性，直接写程序去请求的话，理论上完全可以破解，那就免费吃螃蟹啦！当然，我只是出于技术的兴奋点，利用漏洞去吃螃蟹，不合法，也不道德。（让我想起阿里月饼）由此，因为一只螃蟹，开始两天的技术之旅。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>目标兑换网站是使用ASP的站点，在查看源码的过程中，发现应该是那种外包公司，或者是淘宝建站，源码里面还有广告，<code>xx建站</code>，说明这个公司完全没有自己的技术运维人员。</p>\n<p>从代码层面，就是简单的ASP页面。核心就是一个登入窗口，可以输入卡号，密码登录。然后有一个验证码，验证码为0-9的4个数字组成，关键就是这个验证码了。登录请求可以代码直接模拟，对某一个卡号重试100万次，应该不用100万次那么多，密码的构成应该不是完全随机，不过也都是一个重试的过程。只要目标站不挂掉 - -。后来测试虽然没挂，不过也是拒绝服务了，这是后话了。</p>\n<p>再看验证码，chrome <code>f12</code> 直接抓请求，发现这个验证码的生成居然是一个<code>asp</code>页面，因为没写过asp，所以还是第一次见这种做法。查看了下，服务端是根据一个生成算法，生成一个<code>bmp</code>位图数据，放在asp页面中返回。请求头直接就是<code>image/webp,image/*,*/*;q=0.8</code>，显示最后就是一张bmp图片。</p>\n<p><img src=\"/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/1.bmp\" alt=\"验证码\"></p>\n<p>验证码中加入了一些噪点，而且每个数字的形状还有区别，像上面图中，两个8就不太一样，这让后面的识别也是难度大了很多。</p>\n<h1 id=\"验证码识别\"><a href=\"#验证码识别\" class=\"headerlink\" title=\"验证码识别\"></a>验证码识别</h1><p>一开始我想的比较简单，觉得肯定会有开源的库开源简单搞定这个问题，后面开始去写代码的时候，发现确实不是那么容易。</p>\n<h2 id=\"获取验证码样本库\"><a href=\"#获取验证码样本库\" class=\"headerlink\" title=\"获取验证码样本库\"></a>获取验证码样本库</h2><p>做识别，肯定要先拿一些验证码样本库，不管是分析规律，还是测试识别成功率，肯定都是需要的。</p>\n<p>这个站点的验证码虽然是一个asp页面，但分析下不难得出，其实也就是把<code>bmp</code>的二进制数据写在了<code>asp</code>页面中，最后以bmp格式显示。这和你在电脑上把一个asp的文件改成bmp格式，然后查看，其实是一回事。</p>\n<p>这样就比较简单了，直接get请求拿到这个验证码，写到本地的bmp格式文件中，齐活！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    public void spiderAllCodeImage() &#123;</span><br><span class=\"line\">        for (int i=0; i&lt;10000; i++) &#123;</span><br><span class=\"line\">            CloseableHttpClient client = HttpClients.createDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">            //构造HTTP请求，使用java的httpclients</span><br><span class=\"line\">            HttpGet request = new HttpGet(DZX_URL_CODE);</span><br><span class=\"line\">//            request.setHeader(&quot;Accept&quot;, &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;);</span><br><span class=\"line\">            CloseableHttpResponse response = null;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                response = client.execute(request);</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            byte[] imageByte = new byte[1024];</span><br><span class=\"line\">            ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">            //从response中获取二进制数据</span><br><span class=\"line\">            response.getEntity().writeTo(baos);</span><br><span class=\"line\">            imageByte = baos.toByteArray();</span><br><span class=\"line\">            //这段可以无视，本想做个缓存比较，后来发现不是很好用，动态代码生成的验证码都是不同的，只有在大量样本下，会出现重复</span><br><span class=\"line\">            String md5 = DigestUtils.md5DigestAsHex(imageByte);</span><br><span class=\"line\">            if (codeMd5Map.containsKey(md5)) &#123;</span><br><span class=\"line\">                System.out.println(new String(imageByte, &quot;utf-8&quot;));</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(1000);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                continue;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                codeMd5Map.put(md5, new String(imageByte, &quot;utf-8&quot;));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //写到本地</span><br><span class=\"line\">            File file = new File(&quot;D:/codeimage/code&quot; + i + &quot;.bmp&quot;);</span><br><span class=\"line\">            FileOutputStream fos = new FileOutputStream(file);</span><br><span class=\"line\">            fos.write(imageByte);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我上面获取了10000张，不过中间目标服务器会出现<code>unable service</code>拒绝服务现象，获取不到那么多样本，不过也已经够用了</p>\n<h2 id=\"识别引擎\"><a href=\"#识别引擎\" class=\"headerlink\" title=\"识别引擎\"></a>识别引擎</h2><p>对于验证码的识别，我可以说是完全从0开始。一切都从<code>google</code>开始。这也是技术人员最重要的东西了，就是能学，能快速上手。东西是永远学不完的，技术也是在不断更替的，不可能学完所有的技术，但是等到用的时候，只要知道学习的方法，自己花点时间研究上手就行了。</p>\n<p>重在内功心法，招式啥的，会点一招鲜走遍天的就好。</p>\n<p>说多了。</p>\n<p>先搜，如何识别验证码，看了几篇文章，都提到了一个开源项目，<code>Tesseract-OCR</code>，有了方向，就容易一些了。直接开始去搜这个开源项目，看看怎么使用。我也就选择这个主流的识别引擎了。毕竟讨论的人多，生态就会比较丰富，问题也比较容易得到解决。</p>\n<p>Tesseract-OCR，简单介绍下， <code>Tesseract是一个开源的OCR（Optical Character Recognition，光学字符识别）引擎，可以识别多种格式的图像文件并将其转换成文本，目前已支持60多种语言（包括中文）。 Tesseract最初由HP公司开发，后来由Google维护。</code>。</p>\n<p>github地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\" rel=\"noopener\">https://github.com/tesseract-ocr/tesseract</a></p>\n</blockquote>\n<h2 id=\"引擎安装\"><a href=\"#引擎安装\" class=\"headerlink\" title=\"引擎安装\"></a>引擎安装</h2><h3 id=\"windows安装版\"><a href=\"#windows安装版\" class=\"headerlink\" title=\"windows安装版\"></a>windows安装版</h3><p>我使用的是windows，我在这只讲windows的，其他方式自己搜索下，不再赘述</p>\n<p>tesseract这个识别引擎，在windows下如果想直接使用的话，可以选择安装版，也就是<code>installer</code>的方式，像我们平常使用的软件一样</p>\n<p>寻找下载链接的过程比较曲折，因为有墙，好多地址都下不下来，我自己又有官网洁癖，喜欢一定要在官网下的东西，反正最终曲折的下载好</p>\n<p>tesseract更新速度较慢，如果你追求速度，直接使用我下面给的下载链接，最快。</p>\n<blockquote>\n<p><a href=\"http://download.csdn.net/detail/yzw19932010/9644501\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/detail/yzw19932010/9644501</a></p>\n</blockquote>\n<p>安装好以后，找到安装目录下的<code>tesseract.exe</code>，在<strong>当前目录下</strong>cmd命令模式下执行，</p>\n<p><code>tesseract.exe doc\\eurotext.tif doc\\result</code></p>\n<p>这条命令，使用识别引擎，识别<code>doc\\eurotext.tif</code>这个文件，结果写到<code>doc\\result</code></p>\n<p>或者</p>\n<p><code>tesseract.exe doc\\eurotext.tif doc\\result digits</code></p>\n<p>加上<code>digits</code>参数，表示只识别数字</p>\n<p>还可以指定识别模式，<code>-psm</code>是识别模式，<code>-l</code>指定识别语言<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pagesegmode values are:</span><br><span class=\"line\">0 = Orientation and script detection (OSD) only.</span><br><span class=\"line\">1 = Automatic page segmentation with OSD.</span><br><span class=\"line\">2 = Automatic page segmentation, but no OSD, or OCR</span><br><span class=\"line\">3 = Fully automatic page segmentation, but no OSD. (Default)</span><br><span class=\"line\">4 = Assume a single column of text of variable sizes.</span><br><span class=\"line\">5 = Assume a single uniform block of vertically aligned text.</span><br><span class=\"line\">6 = Assume a single uniform block of text.</span><br><span class=\"line\">7 = Treat the image as a single text line.</span><br><span class=\"line\">8 = Treat the image as a single word.</span><br><span class=\"line\">9 = Treat the image as a single word in a circle.</span><br><span class=\"line\">10 = Treat the image as a single character.</span><br><span class=\"line\">-l lang and/or -psm pagesegmode must occur before anyconfigfile.</span><br></pre></td></tr></table></figure></p>\n<p><code>D:\\Tesseract\\Tesseract-OCR&gt;tesseract.exe doc\\newimage.bmp doc\\result -l eng -psm 7</code></p>\n<h3 id=\"代码支持\"><a href=\"#代码支持\" class=\"headerlink\" title=\"代码支持\"></a>代码支持</h3><p>上面这种模式当然还不够好，只有命令行，虽然说代码中也能调用，但是不够优雅。</p>\n<p>tesseract 原生好像只提供3个DLL给C或者C++调用，其他语言没有提供API支持</p>\n<p>不过，tesseract有很多<code>wrapper</code>，就是前人给我们包装好的，给各种语言使用的一个适配包</p>\n<p>原文地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/tesseract-ocr/tesseract/wiki/AddOns#tesseract-wrappers\" target=\"_blank\" rel=\"noopener\">https://github.com/tesseract-ocr/tesseract/wiki/AddOns#tesseract-wrappers</a></p>\n</blockquote>\n<p>可以到这里找你想使用的语言的<code>wrapper</code></p>\n<p>我使用的是java，我这里就说java的了</p>\n<p>最方便的是直接使用<code>maven</code>获取<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;net.sourceforge.tess4j&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;tess4j&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>不过这种方式，不包含需要使用到的<code>testdata</code>（引擎自带的一些识别需要的训练数据），运行会报错</p>\n<p>所以前面那个windows版本还是要下的，里面包含了所有的<code>testdata</code></p>\n<p>推荐方式：直接到 tesseract 把其源码拉下来，在test包下面有很多例子，都是可以直接运行的，这样方式最快，最方便，testdata也有，直接引用这个源码也都可以</p>\n<h1 id=\"图片处理\"><a href=\"#图片处理\" class=\"headerlink\" title=\"图片处理\"></a>图片处理</h1><p>引擎有了，API调用很简单，核心代码就两句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testDoOCR_File() throws Exception &#123;</span><br><span class=\"line\">    logger.info(&quot;doOCR on a PNG image&quot;);</span><br><span class=\"line\">    //获取待识别图片的File对象</span><br><span class=\"line\">    File imageFile = new File(this.testResourcesDataPath, &quot;eurotext.png&quot;);</span><br><span class=\"line\">    String expResult = &quot;The (quick) [brown] &#123;fox&#125; jumps!\\nOver the $43,456.78 &lt;lazy&gt; #90 dog&quot;;</span><br><span class=\"line\">    //获取Tesseract实例</span><br><span class=\"line\">    ITesseract instance = instance = new Tesseract();</span><br><span class=\"line\">    //设置testdata数据路径</span><br><span class=\"line\">    instance.setDatapath(new File(datapath).getPath());</span><br><span class=\"line\">    //识别，返回String的结果</span><br><span class=\"line\">    String result = instance.doOCR(imageFile);</span><br><span class=\"line\">    logger.info(result);</span><br><span class=\"line\">    assertEquals(expResult, result.substring(0, expResult.length()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是对于我们上面的验证码，发现识别根本不正确，没法得到正确的结果</p>\n<blockquote>\n<p>特别是，代码识别，和cmd命令识别，结果还不一样，暂时没找到问题所在</p>\n</blockquote>\n<p>这时候，就需要图片处理了</p>\n<p>原图里面加入了太多的噪点，而且数字进行了扭曲，导致识别率极低，几乎是不可用</p>\n<p>网上很多方案采取的大都是，先切割，把每一个数字单独切割出来，然后去噪，进行二值化，灰度处理（因为处理引擎对于灰度图片识别较好）</p>\n<p>但是我要处理的这个验证码，每一个数字都不是完全的相同，有扭曲程度，如果进行切割，最后拿二进制数据进行比较，这个相似度的阈值很难确定，所以我还是倾向于识别引擎可以去帮我处理这些问题（不过，最后发现，我还是想太多，识别引擎没有这么智能，做不到这点）</p>\n<h2 id=\"去除噪点-二值化处理-灰度处理\"><a href=\"#去除噪点-二值化处理-灰度处理\" class=\"headerlink\" title=\"去除噪点+二值化处理+灰度处理\"></a>去除噪点+二值化处理+灰度处理</h2><p>对于这个图片的二值化处理比较简单</p>\n<p>我用<code>FastStone Capture</code>的取色工具看了下图片里的色值，发现去除噪点之后的图片都是一种颜色</p>\n<p>那就只要简单遍历图片的像素点，把主干的颜色全部设置成黑色就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package sample.simple.service;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.imageio.ImageIO;</span><br><span class=\"line\">import java.awt.*;</span><br><span class=\"line\">import java.awt.image.BufferedImage;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by ji on 2016/10/1.</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class BmpService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void optimisedBmp(String bmpAbsolutePath) throws Exception &#123;</span><br><span class=\"line\">        File file = new File(bmpAbsolutePath);</span><br><span class=\"line\">        BufferedImage bufferedImage = ImageIO.read(file);</span><br><span class=\"line\">        BufferedImage newImage = removeInterference(bufferedImage);</span><br><span class=\"line\">        File newImageFile = new File(&quot;D:\\\\codeimage\\\\newImage\\\\newimage.bmp&quot;);</span><br><span class=\"line\">        ImageIO.write(newImage, &quot;bmp&quot;, newImageFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 去除图像噪点</span><br><span class=\"line\">    public static BufferedImage removeInterference(BufferedImage image)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\">        int width = image.getWidth();</span><br><span class=\"line\">        int height = image.getHeight();</span><br><span class=\"line\">        for (int x = 0; x &lt; width; ++x) &#123;</span><br><span class=\"line\">            for (int y = 0; y &lt; height; ++y) &#123;</span><br><span class=\"line\">                if (!isFontColor(image.getRGB(x, y))) &#123;</span><br><span class=\"line\">                    image.setRGB(x, y, Color.WHITE.getRGB());</span><br><span class=\"line\">                &#125;else &#123;</span><br><span class=\"line\">                    image.setRGB(x, y, Color.BLACK.getRGB());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 使用工具找到主色的色值，得到R + G +B =340</span><br><span class=\"line\">    private static boolean isFontColor(int colorInt) &#123;</span><br><span class=\"line\">        Color color = new Color(colorInt);</span><br><span class=\"line\"></span><br><span class=\"line\">        return color.getRed() + color.getGreen() + color.getBlue() == 340;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码写的比较乱，不过大概意思能看出来，就是去除噪点，加二值化</p>\n<p>这样处理完的图片像这样：</p>\n<p><img src=\"/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/2.bmp\" alt=\"验证码\"></p>\n<p>再使用识别引擎试下，正确率提高了一些，但是，还没法做到完全正确。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于图像识别，真的是一门大学问，我一开始想的过于简单了。后面发现坑确实还是多，而且对于<code>计算机图像</code>技术要求较高，虽然有开源引擎，但是调教还是要求程序员有深厚的内功，对于我这种刚入门的菜鸟，最后的结局就是失败了，大闸蟹最后也没吃上了。哈哈~</p>\n<p>接下来还可以做的工作，包括 腐蚀， 滤波，主要还是对图片的处理</p>\n<p>不过，我感觉也可以有其他思路，不过实现起来比较复杂，涉及到很多机器学习的东西</p>\n<p>比如，可以切割拿到0-9个数字的一个二进制值，用来做原始数据，后面的待验证的都和原始数据进行比较，相似度最大的就认为是那个数字</p>\n<p>但是这个相似度的计算，有待考虑</p>\n<p>因为时间有限，只能暂时搁置</p>\n<p>也希望有大神可以不吝赐教，这种验证码的识别应该怎么做，最佳实践是什么</p>\n<p>ps. 国庆第一天总算没浪费，干了一些事，学了点东西 ╰(￣▽￣)╭</p>\n<hr>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p>参考过的一些文章，真心感谢前人的付出，技术人真的无私：</p>\n<p>提供了一种Tesseract-ocr样本训练方法，提供一种比较好的思路，后面我也会做尝试</p>\n<blockquote>\n<p><a href=\"http://blog.csdn.net/firehood_/article/details/8433077\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/firehood_/article/details/8433077</a></p>\n</blockquote>\n<p>写了一个基于Tesseract-ocr做电表度数的识别项目的思考过程，很有参考价值</p>\n<blockquote>\n<p><a href=\"https://taozj.org/2016/07/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%BA%E4%BA%8ETesseract%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E7%A8%8B%E5%BA%8F/?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">https://taozj.org/2016/07/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%BA%E4%BA%8ETesseract%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E7%A8%8B%E5%BA%8F/?utm_source=tuicool&amp;utm_medium=referral</a></p>\n</blockquote>\n<p>Java 使用 Tess4J 进行 图片文字识别 笔记（API使用指导，如果使用JAVA的话，要看下）</p>\n<blockquote>\n<p><a href=\"https://my.oschina.net/zhouxiang/blog/161619\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/zhouxiang/blog/161619</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.zhangrenhua.com/2016/05/26/Tesseract-OCR%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/\" target=\"_blank\" rel=\"noopener\">http://www.zhangrenhua.com/2016/05/26/Tesseract-OCR%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/</a></p>\n</blockquote>\n<p>没有使用tesseract的一种思路，其实就是基于相似度的,还包括切割</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/nayitian/p/3282862.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/nayitian/p/3282862.html</a></p>\n</blockquote>\n<p>tesseract-ocr 文档页面</p>\n<blockquote>\n<p><a href=\"https://github.com/tesseract-ocr\" target=\"_blank\" rel=\"noopener\">https://github.com/tesseract-ocr</a> 文档页面/tesseract/wiki/AddOns#tesseract-wrappers</p>\n</blockquote>\n<p>tesseract4java</p>\n<blockquote>\n<p><a href=\"https://github.com/tesseract4java/tesseract4java\" target=\"_blank\" rel=\"noopener\">https://github.com/tesseract4java/tesseract4java</a></p>\n</blockquote>\n<p>EasyPR</p>\n<blockquote>\n<p><a href=\"https://github.com/liuruoze/EasyPR\" target=\"_blank\" rel=\"noopener\">https://github.com/liuruoze/EasyPR</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本来今年没打算吃大闸蟹，也就没买，说实话也不是特别好这口，剥起来还麻烦。碰巧朋友公司发了券，可以兑换八只，她有两张，也吃不完，遂要来一张。万万没想到，我几年最后还是吃上了大闸蟹。进入正题，朋友公司发的是礼品卡，兑换券，有一个卡号，和一个密码，到指定的网站上用这卡号和密码登录之后即可兑换，用快递发货。流程就是如此。拍照发我之后，卡号只有5位，密码是6位，我顿感兴奋，这可能性不多啊，密码只有6位，0-9的数字组合，总共10的6次方，也就是100万种可能性，直接写程序去请求的话，理论上完全可以破解，那就免费吃螃蟹啦！当然，我只是出于技术的兴奋点，利用漏洞去吃螃蟹，不合法，也不道德。（让我想起阿里月饼）由此，因为一只螃蟹，开始两天的技术之旅。</p>\n</blockquote>","more":"<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>目标兑换网站是使用ASP的站点，在查看源码的过程中，发现应该是那种外包公司，或者是淘宝建站，源码里面还有广告，<code>xx建站</code>，说明这个公司完全没有自己的技术运维人员。</p>\n<p>从代码层面，就是简单的ASP页面。核心就是一个登入窗口，可以输入卡号，密码登录。然后有一个验证码，验证码为0-9的4个数字组成，关键就是这个验证码了。登录请求可以代码直接模拟，对某一个卡号重试100万次，应该不用100万次那么多，密码的构成应该不是完全随机，不过也都是一个重试的过程。只要目标站不挂掉 - -。后来测试虽然没挂，不过也是拒绝服务了，这是后话了。</p>\n<p>再看验证码，chrome <code>f12</code> 直接抓请求，发现这个验证码的生成居然是一个<code>asp</code>页面，因为没写过asp，所以还是第一次见这种做法。查看了下，服务端是根据一个生成算法，生成一个<code>bmp</code>位图数据，放在asp页面中返回。请求头直接就是<code>image/webp,image/*,*/*;q=0.8</code>，显示最后就是一张bmp图片。</p>\n<p><img src=\"/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/1.bmp\" alt=\"验证码\"></p>\n<p>验证码中加入了一些噪点，而且每个数字的形状还有区别，像上面图中，两个8就不太一样，这让后面的识别也是难度大了很多。</p>\n<h1 id=\"验证码识别\"><a href=\"#验证码识别\" class=\"headerlink\" title=\"验证码识别\"></a>验证码识别</h1><p>一开始我想的比较简单，觉得肯定会有开源的库开源简单搞定这个问题，后面开始去写代码的时候，发现确实不是那么容易。</p>\n<h2 id=\"获取验证码样本库\"><a href=\"#获取验证码样本库\" class=\"headerlink\" title=\"获取验证码样本库\"></a>获取验证码样本库</h2><p>做识别，肯定要先拿一些验证码样本库，不管是分析规律，还是测试识别成功率，肯定都是需要的。</p>\n<p>这个站点的验证码虽然是一个asp页面，但分析下不难得出，其实也就是把<code>bmp</code>的二进制数据写在了<code>asp</code>页面中，最后以bmp格式显示。这和你在电脑上把一个asp的文件改成bmp格式，然后查看，其实是一回事。</p>\n<p>这样就比较简单了，直接get请求拿到这个验证码，写到本地的bmp格式文件中，齐活！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    public void spiderAllCodeImage() &#123;</span><br><span class=\"line\">        for (int i=0; i&lt;10000; i++) &#123;</span><br><span class=\"line\">            CloseableHttpClient client = HttpClients.createDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">            //构造HTTP请求，使用java的httpclients</span><br><span class=\"line\">            HttpGet request = new HttpGet(DZX_URL_CODE);</span><br><span class=\"line\">//            request.setHeader(&quot;Accept&quot;, &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;);</span><br><span class=\"line\">            CloseableHttpResponse response = null;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                response = client.execute(request);</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            byte[] imageByte = new byte[1024];</span><br><span class=\"line\">            ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">            //从response中获取二进制数据</span><br><span class=\"line\">            response.getEntity().writeTo(baos);</span><br><span class=\"line\">            imageByte = baos.toByteArray();</span><br><span class=\"line\">            //这段可以无视，本想做个缓存比较，后来发现不是很好用，动态代码生成的验证码都是不同的，只有在大量样本下，会出现重复</span><br><span class=\"line\">            String md5 = DigestUtils.md5DigestAsHex(imageByte);</span><br><span class=\"line\">            if (codeMd5Map.containsKey(md5)) &#123;</span><br><span class=\"line\">                System.out.println(new String(imageByte, &quot;utf-8&quot;));</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    Thread.sleep(1000);</span><br><span class=\"line\">                &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                continue;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                codeMd5Map.put(md5, new String(imageByte, &quot;utf-8&quot;));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //写到本地</span><br><span class=\"line\">            File file = new File(&quot;D:/codeimage/code&quot; + i + &quot;.bmp&quot;);</span><br><span class=\"line\">            FileOutputStream fos = new FileOutputStream(file);</span><br><span class=\"line\">            fos.write(imageByte);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我上面获取了10000张，不过中间目标服务器会出现<code>unable service</code>拒绝服务现象，获取不到那么多样本，不过也已经够用了</p>\n<h2 id=\"识别引擎\"><a href=\"#识别引擎\" class=\"headerlink\" title=\"识别引擎\"></a>识别引擎</h2><p>对于验证码的识别，我可以说是完全从0开始。一切都从<code>google</code>开始。这也是技术人员最重要的东西了，就是能学，能快速上手。东西是永远学不完的，技术也是在不断更替的，不可能学完所有的技术，但是等到用的时候，只要知道学习的方法，自己花点时间研究上手就行了。</p>\n<p>重在内功心法，招式啥的，会点一招鲜走遍天的就好。</p>\n<p>说多了。</p>\n<p>先搜，如何识别验证码，看了几篇文章，都提到了一个开源项目，<code>Tesseract-OCR</code>，有了方向，就容易一些了。直接开始去搜这个开源项目，看看怎么使用。我也就选择这个主流的识别引擎了。毕竟讨论的人多，生态就会比较丰富，问题也比较容易得到解决。</p>\n<p>Tesseract-OCR，简单介绍下， <code>Tesseract是一个开源的OCR（Optical Character Recognition，光学字符识别）引擎，可以识别多种格式的图像文件并将其转换成文本，目前已支持60多种语言（包括中文）。 Tesseract最初由HP公司开发，后来由Google维护。</code>。</p>\n<p>github地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/tesseract-ocr/tesseract\" target=\"_blank\" rel=\"noopener\">https://github.com/tesseract-ocr/tesseract</a></p>\n</blockquote>\n<h2 id=\"引擎安装\"><a href=\"#引擎安装\" class=\"headerlink\" title=\"引擎安装\"></a>引擎安装</h2><h3 id=\"windows安装版\"><a href=\"#windows安装版\" class=\"headerlink\" title=\"windows安装版\"></a>windows安装版</h3><p>我使用的是windows，我在这只讲windows的，其他方式自己搜索下，不再赘述</p>\n<p>tesseract这个识别引擎，在windows下如果想直接使用的话，可以选择安装版，也就是<code>installer</code>的方式，像我们平常使用的软件一样</p>\n<p>寻找下载链接的过程比较曲折，因为有墙，好多地址都下不下来，我自己又有官网洁癖，喜欢一定要在官网下的东西，反正最终曲折的下载好</p>\n<p>tesseract更新速度较慢，如果你追求速度，直接使用我下面给的下载链接，最快。</p>\n<blockquote>\n<p><a href=\"http://download.csdn.net/detail/yzw19932010/9644501\" target=\"_blank\" rel=\"noopener\">http://download.csdn.net/detail/yzw19932010/9644501</a></p>\n</blockquote>\n<p>安装好以后，找到安装目录下的<code>tesseract.exe</code>，在<strong>当前目录下</strong>cmd命令模式下执行，</p>\n<p><code>tesseract.exe doc\\eurotext.tif doc\\result</code></p>\n<p>这条命令，使用识别引擎，识别<code>doc\\eurotext.tif</code>这个文件，结果写到<code>doc\\result</code></p>\n<p>或者</p>\n<p><code>tesseract.exe doc\\eurotext.tif doc\\result digits</code></p>\n<p>加上<code>digits</code>参数，表示只识别数字</p>\n<p>还可以指定识别模式，<code>-psm</code>是识别模式，<code>-l</code>指定识别语言<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pagesegmode values are:</span><br><span class=\"line\">0 = Orientation and script detection (OSD) only.</span><br><span class=\"line\">1 = Automatic page segmentation with OSD.</span><br><span class=\"line\">2 = Automatic page segmentation, but no OSD, or OCR</span><br><span class=\"line\">3 = Fully automatic page segmentation, but no OSD. (Default)</span><br><span class=\"line\">4 = Assume a single column of text of variable sizes.</span><br><span class=\"line\">5 = Assume a single uniform block of vertically aligned text.</span><br><span class=\"line\">6 = Assume a single uniform block of text.</span><br><span class=\"line\">7 = Treat the image as a single text line.</span><br><span class=\"line\">8 = Treat the image as a single word.</span><br><span class=\"line\">9 = Treat the image as a single word in a circle.</span><br><span class=\"line\">10 = Treat the image as a single character.</span><br><span class=\"line\">-l lang and/or -psm pagesegmode must occur before anyconfigfile.</span><br></pre></td></tr></table></figure></p>\n<p><code>D:\\Tesseract\\Tesseract-OCR&gt;tesseract.exe doc\\newimage.bmp doc\\result -l eng -psm 7</code></p>\n<h3 id=\"代码支持\"><a href=\"#代码支持\" class=\"headerlink\" title=\"代码支持\"></a>代码支持</h3><p>上面这种模式当然还不够好，只有命令行，虽然说代码中也能调用，但是不够优雅。</p>\n<p>tesseract 原生好像只提供3个DLL给C或者C++调用，其他语言没有提供API支持</p>\n<p>不过，tesseract有很多<code>wrapper</code>，就是前人给我们包装好的，给各种语言使用的一个适配包</p>\n<p>原文地址：</p>\n<blockquote>\n<p><a href=\"https://github.com/tesseract-ocr/tesseract/wiki/AddOns#tesseract-wrappers\" target=\"_blank\" rel=\"noopener\">https://github.com/tesseract-ocr/tesseract/wiki/AddOns#tesseract-wrappers</a></p>\n</blockquote>\n<p>可以到这里找你想使用的语言的<code>wrapper</code></p>\n<p>我使用的是java，我这里就说java的了</p>\n<p>最方便的是直接使用<code>maven</code>获取<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;net.sourceforge.tess4j&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;tess4j&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>不过这种方式，不包含需要使用到的<code>testdata</code>（引擎自带的一些识别需要的训练数据），运行会报错</p>\n<p>所以前面那个windows版本还是要下的，里面包含了所有的<code>testdata</code></p>\n<p>推荐方式：直接到 tesseract 把其源码拉下来，在test包下面有很多例子，都是可以直接运行的，这样方式最快，最方便，testdata也有，直接引用这个源码也都可以</p>\n<h1 id=\"图片处理\"><a href=\"#图片处理\" class=\"headerlink\" title=\"图片处理\"></a>图片处理</h1><p>引擎有了，API调用很简单，核心代码就两句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void testDoOCR_File() throws Exception &#123;</span><br><span class=\"line\">    logger.info(&quot;doOCR on a PNG image&quot;);</span><br><span class=\"line\">    //获取待识别图片的File对象</span><br><span class=\"line\">    File imageFile = new File(this.testResourcesDataPath, &quot;eurotext.png&quot;);</span><br><span class=\"line\">    String expResult = &quot;The (quick) [brown] &#123;fox&#125; jumps!\\nOver the $43,456.78 &lt;lazy&gt; #90 dog&quot;;</span><br><span class=\"line\">    //获取Tesseract实例</span><br><span class=\"line\">    ITesseract instance = instance = new Tesseract();</span><br><span class=\"line\">    //设置testdata数据路径</span><br><span class=\"line\">    instance.setDatapath(new File(datapath).getPath());</span><br><span class=\"line\">    //识别，返回String的结果</span><br><span class=\"line\">    String result = instance.doOCR(imageFile);</span><br><span class=\"line\">    logger.info(result);</span><br><span class=\"line\">    assertEquals(expResult, result.substring(0, expResult.length()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是对于我们上面的验证码，发现识别根本不正确，没法得到正确的结果</p>\n<blockquote>\n<p>特别是，代码识别，和cmd命令识别，结果还不一样，暂时没找到问题所在</p>\n</blockquote>\n<p>这时候，就需要图片处理了</p>\n<p>原图里面加入了太多的噪点，而且数字进行了扭曲，导致识别率极低，几乎是不可用</p>\n<p>网上很多方案采取的大都是，先切割，把每一个数字单独切割出来，然后去噪，进行二值化，灰度处理（因为处理引擎对于灰度图片识别较好）</p>\n<p>但是我要处理的这个验证码，每一个数字都不是完全的相同，有扭曲程度，如果进行切割，最后拿二进制数据进行比较，这个相似度的阈值很难确定，所以我还是倾向于识别引擎可以去帮我处理这些问题（不过，最后发现，我还是想太多，识别引擎没有这么智能，做不到这点）</p>\n<h2 id=\"去除噪点-二值化处理-灰度处理\"><a href=\"#去除噪点-二值化处理-灰度处理\" class=\"headerlink\" title=\"去除噪点+二值化处理+灰度处理\"></a>去除噪点+二值化处理+灰度处理</h2><p>对于这个图片的二值化处理比较简单</p>\n<p>我用<code>FastStone Capture</code>的取色工具看了下图片里的色值，发现去除噪点之后的图片都是一种颜色</p>\n<p>那就只要简单遍历图片的像素点，把主干的颜色全部设置成黑色就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package sample.simple.service;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.imageio.ImageIO;</span><br><span class=\"line\">import java.awt.*;</span><br><span class=\"line\">import java.awt.image.BufferedImage;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Created by ji on 2016/10/1.</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class BmpService &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void optimisedBmp(String bmpAbsolutePath) throws Exception &#123;</span><br><span class=\"line\">        File file = new File(bmpAbsolutePath);</span><br><span class=\"line\">        BufferedImage bufferedImage = ImageIO.read(file);</span><br><span class=\"line\">        BufferedImage newImage = removeInterference(bufferedImage);</span><br><span class=\"line\">        File newImageFile = new File(&quot;D:\\\\codeimage\\\\newImage\\\\newimage.bmp&quot;);</span><br><span class=\"line\">        ImageIO.write(newImage, &quot;bmp&quot;, newImageFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 去除图像噪点</span><br><span class=\"line\">    public static BufferedImage removeInterference(BufferedImage image)</span><br><span class=\"line\">            throws Exception &#123;</span><br><span class=\"line\">        int width = image.getWidth();</span><br><span class=\"line\">        int height = image.getHeight();</span><br><span class=\"line\">        for (int x = 0; x &lt; width; ++x) &#123;</span><br><span class=\"line\">            for (int y = 0; y &lt; height; ++y) &#123;</span><br><span class=\"line\">                if (!isFontColor(image.getRGB(x, y))) &#123;</span><br><span class=\"line\">                    image.setRGB(x, y, Color.WHITE.getRGB());</span><br><span class=\"line\">                &#125;else &#123;</span><br><span class=\"line\">                    image.setRGB(x, y, Color.BLACK.getRGB());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 使用工具找到主色的色值，得到R + G +B =340</span><br><span class=\"line\">    private static boolean isFontColor(int colorInt) &#123;</span><br><span class=\"line\">        Color color = new Color(colorInt);</span><br><span class=\"line\"></span><br><span class=\"line\">        return color.getRed() + color.getGreen() + color.getBlue() == 340;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码写的比较乱，不过大概意思能看出来，就是去除噪点，加二值化</p>\n<p>这样处理完的图片像这样：</p>\n<p><img src=\"/images/由一只大闸蟹想到的基于tesseract-ocr的验证码识别/2.bmp\" alt=\"验证码\"></p>\n<p>再使用识别引擎试下，正确率提高了一些，但是，还没法做到完全正确。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于图像识别，真的是一门大学问，我一开始想的过于简单了。后面发现坑确实还是多，而且对于<code>计算机图像</code>技术要求较高，虽然有开源引擎，但是调教还是要求程序员有深厚的内功，对于我这种刚入门的菜鸟，最后的结局就是失败了，大闸蟹最后也没吃上了。哈哈~</p>\n<p>接下来还可以做的工作，包括 腐蚀， 滤波，主要还是对图片的处理</p>\n<p>不过，我感觉也可以有其他思路，不过实现起来比较复杂，涉及到很多机器学习的东西</p>\n<p>比如，可以切割拿到0-9个数字的一个二进制值，用来做原始数据，后面的待验证的都和原始数据进行比较，相似度最大的就认为是那个数字</p>\n<p>但是这个相似度的计算，有待考虑</p>\n<p>因为时间有限，只能暂时搁置</p>\n<p>也希望有大神可以不吝赐教，这种验证码的识别应该怎么做，最佳实践是什么</p>\n<p>ps. 国庆第一天总算没浪费，干了一些事，学了点东西 ╰(￣▽￣)╭</p>\n<hr>\n<h1 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h1><p>参考过的一些文章，真心感谢前人的付出，技术人真的无私：</p>\n<p>提供了一种Tesseract-ocr样本训练方法，提供一种比较好的思路，后面我也会做尝试</p>\n<blockquote>\n<p><a href=\"http://blog.csdn.net/firehood_/article/details/8433077\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/firehood_/article/details/8433077</a></p>\n</blockquote>\n<p>写了一个基于Tesseract-ocr做电表度数的识别项目的思考过程，很有参考价值</p>\n<blockquote>\n<p><a href=\"https://taozj.org/2016/07/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%BA%E4%BA%8ETesseract%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E7%A8%8B%E5%BA%8F/?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener\">https://taozj.org/2016/07/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%BA%E4%BA%8ETesseract%E7%9A%84%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E7%A8%8B%E5%BA%8F/?utm_source=tuicool&amp;utm_medium=referral</a></p>\n</blockquote>\n<p>Java 使用 Tess4J 进行 图片文字识别 笔记（API使用指导，如果使用JAVA的话，要看下）</p>\n<blockquote>\n<p><a href=\"https://my.oschina.net/zhouxiang/blog/161619\" target=\"_blank\" rel=\"noopener\">https://my.oschina.net/zhouxiang/blog/161619</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.zhangrenhua.com/2016/05/26/Tesseract-OCR%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/\" target=\"_blank\" rel=\"noopener\">http://www.zhangrenhua.com/2016/05/26/Tesseract-OCR%E5%9B%BE%E7%89%87%E8%AF%86%E5%88%AB/</a></p>\n</blockquote>\n<p>没有使用tesseract的一种思路，其实就是基于相似度的,还包括切割</p>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/nayitian/p/3282862.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/nayitian/p/3282862.html</a></p>\n</blockquote>\n<p>tesseract-ocr 文档页面</p>\n<blockquote>\n<p><a href=\"https://github.com/tesseract-ocr\" target=\"_blank\" rel=\"noopener\">https://github.com/tesseract-ocr</a> 文档页面/tesseract/wiki/AddOns#tesseract-wrappers</p>\n</blockquote>\n<p>tesseract4java</p>\n<blockquote>\n<p><a href=\"https://github.com/tesseract4java/tesseract4java\" target=\"_blank\" rel=\"noopener\">https://github.com/tesseract4java/tesseract4java</a></p>\n</blockquote>\n<p>EasyPR</p>\n<blockquote>\n<p><a href=\"https://github.com/liuruoze/EasyPR\" target=\"_blank\" rel=\"noopener\">https://github.com/liuruoze/EasyPR</a></p>\n</blockquote>"},{"title":"0的阶乘为什么等于1呢？","date":"2016-08-31T13:54:52.000Z","_content":"\n> 0! = 1\n\n那天看书，突然看到阶乘，然后书里在计算的时候，说\"按照规定，1的阶乘1!=1, 0的阶乘0!=1\"\n\n有时候我也挺爱钻牛角尖的，我就想，`为什么0的阶乘是1呢？感觉没法理解呢`\n\n然后就到网上去搜，看到一种解释方式，还是很好理解的~(～￣▽￣)～\n\n> 阶乘的一种实际意义是现实中事物的全排列组合的可能总数，对于一个东西，他的全排列只有一种，那对于0个东西，他的全排列也同样是只有一种。或者说，对于一个小球我们有1种取法，对于0个小球，我们也只有一种取法，就是不取咯。那0的阶乘也就是1咯\n","source":"_posts/why-does-0-equal-1.md","raw":"---\ntitle: 0的阶乘为什么等于1呢？\ndate: 2016-08-31 21:54:52\ntags:\n- 算法\ncategory:\n- 算法\n---\n\n> 0! = 1\n\n那天看书，突然看到阶乘，然后书里在计算的时候，说\"按照规定，1的阶乘1!=1, 0的阶乘0!=1\"\n\n有时候我也挺爱钻牛角尖的，我就想，`为什么0的阶乘是1呢？感觉没法理解呢`\n\n然后就到网上去搜，看到一种解释方式，还是很好理解的~(～￣▽￣)～\n\n> 阶乘的一种实际意义是现实中事物的全排列组合的可能总数，对于一个东西，他的全排列只有一种，那对于0个东西，他的全排列也同样是只有一种。或者说，对于一个小球我们有1种取法，对于0个小球，我们也只有一种取法，就是不取咯。那0的阶乘也就是1咯\n","slug":"why-does-0-equal-1","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfg001v0a6t04a8wmog","content":"<blockquote>\n<p>0! = 1</p>\n</blockquote>\n<p>那天看书，突然看到阶乘，然后书里在计算的时候，说”按照规定，1的阶乘1!=1, 0的阶乘0!=1”</p>\n<p>有时候我也挺爱钻牛角尖的，我就想，<code>为什么0的阶乘是1呢？感觉没法理解呢</code></p>\n<p>然后就到网上去搜，看到一种解释方式，还是很好理解的~(～￣▽￣)～</p>\n<blockquote>\n<p>阶乘的一种实际意义是现实中事物的全排列组合的可能总数，对于一个东西，他的全排列只有一种，那对于0个东西，他的全排列也同样是只有一种。或者说，对于一个小球我们有1种取法，对于0个小球，我们也只有一种取法，就是不取咯。那0的阶乘也就是1咯</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>0! = 1</p>\n</blockquote>\n<p>那天看书，突然看到阶乘，然后书里在计算的时候，说”按照规定，1的阶乘1!=1, 0的阶乘0!=1”</p>\n<p>有时候我也挺爱钻牛角尖的，我就想，<code>为什么0的阶乘是1呢？感觉没法理解呢</code></p>\n<p>然后就到网上去搜，看到一种解释方式，还是很好理解的~(～￣▽￣)～</p>\n<blockquote>\n<p>阶乘的一种实际意义是现实中事物的全排列组合的可能总数，对于一个东西，他的全排列只有一种，那对于0个东西，他的全排列也同样是只有一种。或者说，对于一个小球我们有1种取法，对于0个小球，我们也只有一种取法，就是不取咯。那0的阶乘也就是1咯</p>\n</blockquote>\n"},{"title":"什么是JSONP？关于前端的跨域问题","date":"2016-10-18T16:28:29.000Z","_content":"\n> 在我来到酷狗之前，一直做游戏开发。虽然是做页游，也一样是在浏览器访问，但是和传统的做web开发，还是有着很大的区别。导致我一开始的时候，在做酷狗LIVE项目时和前端配合的不是很好，当时还让前端来给我解释为什么要使用JSONP，因为那时我还第一次听到这个名词。哈哈。\n\n那么，到底什么是JSONP呢？\n\n<!-- more-->\n\n# 跨域\n\n抛开不解释跨域问题的讨论`JSONP`，都是耍流氓。\n\n凭胸而论，啊呸，平心而论，一开始我真的没理解为什么需要JSONP。JSONP是什么，很容易理解，但是为什么要用这种方式，我真的花了点时间才搞懂。原因就是网上大多文章就一句带过，解决跨域问题，但是没有很好的解释什么是跨域问题。像我这种对前端并不是特别擅长的人，就容易产生疑惑。\n\n\n什么是跨域？最简单的解释：\n> 我们部署网站都会有个域名去访问，比如 www.yaoboss.me，访问我的博客，这是我的网站的域名，也就是我的网站的域，当我在我网站域下面的页面中，要通过ajax请求去google的某个接口下面获取数据，那我访问的接口一定是http://www.google.com/xxxx/inteface/getXXX，那么谷歌接口所在的域就是，www.google.com，这样就是跨域了\n\n最早的网景公司定的浏览器规范规定了一个`同源策略`的安全协议，这个安全协议规定，一个网页中除了特殊的某些标签，`<script>,<img>`等，可以访问跨域的资源，其他的请求禁止访问跨域的资源。也就是说像我们上面那样，使用原生的`AJAX`去请求谷歌接口的数据，是获取不到数据的，JS会报错的。我们在浏览器的`console`里面，可能会看到这样的错误，`MLHttpRequest cannot load https://www.google.com/. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.`\n\n\n跨域的请求是一种合理的需求，我们无法避免的。在工作中，我们公司可能会有很多的域名，每个部门有自己的域名，业务线有业务线的域名。当需要互相调用时，就会有跨域问题。所以这时候就出现了`JSONP`,可以说是以一种`trick`的方式解决了跨域问题。那我们接下来就看看`JSONP`到底是什么。\n\n# JSONP\n\n```json\n\ncallbackFunction([\"customername1\",\"customername2\"])\n\n```\n\n上面代码段里面就是`JSONP`格式，你看他像什么？不就是一个JS方法调用么！传递了一个数组参数！\n\n没错，就是JS方法调用。这就是JSONP。我们就这样理解，就够了。至于什么`json padding`，不用管。术语而已，咱们就来实在的大实话。\n\n上面就是JSONP的真容。\n\n接下来我们说怎么用。\n\n前面有提到，`<script></script>`标签不受跨域限制，里面的`src`属性，可以从任何地方加载js文件。这个地方就可以做文章了，其实这个标签本质上就是对目标发起一个`GET`请求，将返回值作为一段脚本代码，作用于当前域。\n\n那我们完全可以在服务端做一个服务，返回一段拼装的JS代码，这样`script`标签获取到了，就当做JS代码执行了。\n\n思路走到这里，我们就可以想到，像上面那样，返回一个拼装的`回调JS代码`，我们在当前域再定义一个同名函数，那这样就和一个AJAX请求一样了。请求成功就回调本地一个函数方法，并在参数里面传入请求成功的返回值。这样，就是一个`JSONP`了，也就解决了跨域问题。\n\n下面是一个最简单的演示demo，借鉴了菜鸟教程的例子：\n\ntest.html\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>JSONP 实例</title>\n</head>\n<body>\n    <div id=\"divCustomers\"></div>\n    <script type=\"text/javascript\">\n\t\tfunction callbackFunction(result, methodName)\n        {\n            var html = '<ul>';\n            for(var i = 0; i < result.length; i++)\n            {\n                html += '<li>' + result[i] + '</li>';\n            }\n            html += '</ul>';\n            document.getElementById('divCustomers').innerHTML = html;\n        }\n\t</script>\n<script type=\"text/javascript\" src=\"http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=callbackFunction\"></script>\n<script src=\"//cdn.bootcss.com/jquery/3.1.1/jquery.min.js\"></script>\n<script type=\"text/javascript\">\n    \n\t//直接ajax请求google网站，如果你部署在google.com域之外，就会报错\n\t$.get(\"http://www.google.com/\");\n\n</script>\n\n</body>\n</html>\n\n```\n\njsonp.php\n\n```\n<?php\nheader('Content-type: application/json');\n//获取回调函数名\n$jsoncallback = htmlspecialchars($_REQUEST ['jsoncallback']);\n//json数据\n$json_data = '[\"customername1\",\"customername2\"]';\n//输出jsonp格式的数据\necho $jsoncallback . \"(\" . $json_data . \")\";\n?>\n\n```\n\n这个实验，你可以在本地分两个服务器部署，然后从一台调用另外一台。也可以在`hosts`里面配域名，模仿更真实的跨域场景。\n\n或者最简单，就部署上面的test.html，看看效果，然后分析下，基本就可以明白`JSONP`了。\n\n\n# 更好的使用JSONP\n\n我们当然不愿意每一个请求都去写一个`script`标签，好在我们有`jquery`\n\n我们使用`jquery`来调用`JSONP`请求将变得很简单：\n\n```\n\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>JSONP 实例</title>\n    <script src=\"http://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js\"></script>    \n</head>\n<body>\n<div id=\"divCustomers\"></div>\n<script>\n\n\t//就是getJSON方法,更详细的用法请参考API吧\n\t$.getJSON(\"http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=?\", function(data) {\n\t    \n\t    var html = '<ul>';\n\t    for(var i = 0; i < data.length; i++)\n\t    {\n\t        html += '<li>' + data[i] + '</li>';\n\t    }\n\t    html += '</ul>';\n\t    \n\t    $('#divCustomers').html(html); \n\t});\n</script>\n</body>\n</html>\n\n```\n\n\n# 不只是JSONP\n\n跨域的方式还有很多种，这里我们只说了JSONP这一种，最近好像还看到一种W3C支持的一种跨域方案，不过还没仔细去看，大家可以自己去搜搜","source":"_posts/what-is-jsonp.md","raw":"---\ntitle: 什么是JSONP？关于前端的跨域问题\ndate: 2016-10-19 00:28:29\ntags:\n- web技术\ncategory:\n- web技术\n---\n\n> 在我来到酷狗之前，一直做游戏开发。虽然是做页游，也一样是在浏览器访问，但是和传统的做web开发，还是有着很大的区别。导致我一开始的时候，在做酷狗LIVE项目时和前端配合的不是很好，当时还让前端来给我解释为什么要使用JSONP，因为那时我还第一次听到这个名词。哈哈。\n\n那么，到底什么是JSONP呢？\n\n<!-- more-->\n\n# 跨域\n\n抛开不解释跨域问题的讨论`JSONP`，都是耍流氓。\n\n凭胸而论，啊呸，平心而论，一开始我真的没理解为什么需要JSONP。JSONP是什么，很容易理解，但是为什么要用这种方式，我真的花了点时间才搞懂。原因就是网上大多文章就一句带过，解决跨域问题，但是没有很好的解释什么是跨域问题。像我这种对前端并不是特别擅长的人，就容易产生疑惑。\n\n\n什么是跨域？最简单的解释：\n> 我们部署网站都会有个域名去访问，比如 www.yaoboss.me，访问我的博客，这是我的网站的域名，也就是我的网站的域，当我在我网站域下面的页面中，要通过ajax请求去google的某个接口下面获取数据，那我访问的接口一定是http://www.google.com/xxxx/inteface/getXXX，那么谷歌接口所在的域就是，www.google.com，这样就是跨域了\n\n最早的网景公司定的浏览器规范规定了一个`同源策略`的安全协议，这个安全协议规定，一个网页中除了特殊的某些标签，`<script>,<img>`等，可以访问跨域的资源，其他的请求禁止访问跨域的资源。也就是说像我们上面那样，使用原生的`AJAX`去请求谷歌接口的数据，是获取不到数据的，JS会报错的。我们在浏览器的`console`里面，可能会看到这样的错误，`MLHttpRequest cannot load https://www.google.com/. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.`\n\n\n跨域的请求是一种合理的需求，我们无法避免的。在工作中，我们公司可能会有很多的域名，每个部门有自己的域名，业务线有业务线的域名。当需要互相调用时，就会有跨域问题。所以这时候就出现了`JSONP`,可以说是以一种`trick`的方式解决了跨域问题。那我们接下来就看看`JSONP`到底是什么。\n\n# JSONP\n\n```json\n\ncallbackFunction([\"customername1\",\"customername2\"])\n\n```\n\n上面代码段里面就是`JSONP`格式，你看他像什么？不就是一个JS方法调用么！传递了一个数组参数！\n\n没错，就是JS方法调用。这就是JSONP。我们就这样理解，就够了。至于什么`json padding`，不用管。术语而已，咱们就来实在的大实话。\n\n上面就是JSONP的真容。\n\n接下来我们说怎么用。\n\n前面有提到，`<script></script>`标签不受跨域限制，里面的`src`属性，可以从任何地方加载js文件。这个地方就可以做文章了，其实这个标签本质上就是对目标发起一个`GET`请求，将返回值作为一段脚本代码，作用于当前域。\n\n那我们完全可以在服务端做一个服务，返回一段拼装的JS代码，这样`script`标签获取到了，就当做JS代码执行了。\n\n思路走到这里，我们就可以想到，像上面那样，返回一个拼装的`回调JS代码`，我们在当前域再定义一个同名函数，那这样就和一个AJAX请求一样了。请求成功就回调本地一个函数方法，并在参数里面传入请求成功的返回值。这样，就是一个`JSONP`了，也就解决了跨域问题。\n\n下面是一个最简单的演示demo，借鉴了菜鸟教程的例子：\n\ntest.html\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title>JSONP 实例</title>\n</head>\n<body>\n    <div id=\"divCustomers\"></div>\n    <script type=\"text/javascript\">\n\t\tfunction callbackFunction(result, methodName)\n        {\n            var html = '<ul>';\n            for(var i = 0; i < result.length; i++)\n            {\n                html += '<li>' + result[i] + '</li>';\n            }\n            html += '</ul>';\n            document.getElementById('divCustomers').innerHTML = html;\n        }\n\t</script>\n<script type=\"text/javascript\" src=\"http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=callbackFunction\"></script>\n<script src=\"//cdn.bootcss.com/jquery/3.1.1/jquery.min.js\"></script>\n<script type=\"text/javascript\">\n    \n\t//直接ajax请求google网站，如果你部署在google.com域之外，就会报错\n\t$.get(\"http://www.google.com/\");\n\n</script>\n\n</body>\n</html>\n\n```\n\njsonp.php\n\n```\n<?php\nheader('Content-type: application/json');\n//获取回调函数名\n$jsoncallback = htmlspecialchars($_REQUEST ['jsoncallback']);\n//json数据\n$json_data = '[\"customername1\",\"customername2\"]';\n//输出jsonp格式的数据\necho $jsoncallback . \"(\" . $json_data . \")\";\n?>\n\n```\n\n这个实验，你可以在本地分两个服务器部署，然后从一台调用另外一台。也可以在`hosts`里面配域名，模仿更真实的跨域场景。\n\n或者最简单，就部署上面的test.html，看看效果，然后分析下，基本就可以明白`JSONP`了。\n\n\n# 更好的使用JSONP\n\n我们当然不愿意每一个请求都去写一个`script`标签，好在我们有`jquery`\n\n我们使用`jquery`来调用`JSONP`请求将变得很简单：\n\n```\n\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>JSONP 实例</title>\n    <script src=\"http://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js\"></script>    \n</head>\n<body>\n<div id=\"divCustomers\"></div>\n<script>\n\n\t//就是getJSON方法,更详细的用法请参考API吧\n\t$.getJSON(\"http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=?\", function(data) {\n\t    \n\t    var html = '<ul>';\n\t    for(var i = 0; i < data.length; i++)\n\t    {\n\t        html += '<li>' + data[i] + '</li>';\n\t    }\n\t    html += '</ul>';\n\t    \n\t    $('#divCustomers').html(html); \n\t});\n</script>\n</body>\n</html>\n\n```\n\n\n# 不只是JSONP\n\n跨域的方式还有很多种，这里我们只说了JSONP这一种，最近好像还看到一种W3C支持的一种跨域方案，不过还没仔细去看，大家可以自己去搜搜","slug":"what-is-jsonp","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfi001y0a6tuf2rrmox","content":"<blockquote>\n<p>在我来到酷狗之前，一直做游戏开发。虽然是做页游，也一样是在浏览器访问，但是和传统的做web开发，还是有着很大的区别。导致我一开始的时候，在做酷狗LIVE项目时和前端配合的不是很好，当时还让前端来给我解释为什么要使用JSONP，因为那时我还第一次听到这个名词。哈哈。</p>\n</blockquote>\n<p>那么，到底什么是JSONP呢？</p>\n<a id=\"more\"></a>\n<h1 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h1><p>抛开不解释跨域问题的讨论<code>JSONP</code>，都是耍流氓。</p>\n<p>凭胸而论，啊呸，平心而论，一开始我真的没理解为什么需要JSONP。JSONP是什么，很容易理解，但是为什么要用这种方式，我真的花了点时间才搞懂。原因就是网上大多文章就一句带过，解决跨域问题，但是没有很好的解释什么是跨域问题。像我这种对前端并不是特别擅长的人，就容易产生疑惑。</p>\n<p>什么是跨域？最简单的解释：</p>\n<blockquote>\n<p>我们部署网站都会有个域名去访问，比如 <a href=\"http://www.yaoboss.me，访问我的博客，这是我的网站的域名，也就是我的网站的域，当我在我网站域下面的页面中，要通过ajax请求去google的某个接口下面获取数据，那我访问的接口一定是http://www.google.com/xxxx/inteface/getXXX，那么谷歌接口所在的域就是，www.google.com，这样就是跨域了\" target=\"_blank\" rel=\"noopener\">www.yaoboss.me，访问我的博客，这是我的网站的域名，也就是我的网站的域，当我在我网站域下面的页面中，要通过ajax请求去google的某个接口下面获取数据，那我访问的接口一定是http://www.google.com/xxxx/inteface/getXXX，那么谷歌接口所在的域就是，www.google.com，这样就是跨域了</a></p>\n</blockquote>\n<p>最早的网景公司定的浏览器规范规定了一个<code>同源策略</code>的安全协议，这个安全协议规定，一个网页中除了特殊的某些标签，<code>&lt;script&gt;,&lt;img&gt;</code>等，可以访问跨域的资源，其他的请求禁止访问跨域的资源。也就是说像我们上面那样，使用原生的<code>AJAX</code>去请求谷歌接口的数据，是获取不到数据的，JS会报错的。我们在浏览器的<code>console</code>里面，可能会看到这样的错误，<code>MLHttpRequest cannot load https://www.google.com/. No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;null&#39; is therefore not allowed access.</code></p>\n<p>跨域的请求是一种合理的需求，我们无法避免的。在工作中，我们公司可能会有很多的域名，每个部门有自己的域名，业务线有业务线的域名。当需要互相调用时，就会有跨域问题。所以这时候就出现了<code>JSONP</code>,可以说是以一种<code>trick</code>的方式解决了跨域问题。那我们接下来就看看<code>JSONP</code>到底是什么。</p>\n<h1 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">callbackFunction([\"customername1\",\"customername2\"])</span><br></pre></td></tr></table></figure>\n<p>上面代码段里面就是<code>JSONP</code>格式，你看他像什么？不就是一个JS方法调用么！传递了一个数组参数！</p>\n<p>没错，就是JS方法调用。这就是JSONP。我们就这样理解，就够了。至于什么<code>json padding</code>，不用管。术语而已，咱们就来实在的大实话。</p>\n<p>上面就是JSONP的真容。</p>\n<p>接下来我们说怎么用。</p>\n<p>前面有提到，<code>&lt;script&gt;&lt;/script&gt;</code>标签不受跨域限制，里面的<code>src</code>属性，可以从任何地方加载js文件。这个地方就可以做文章了，其实这个标签本质上就是对目标发起一个<code>GET</code>请求，将返回值作为一段脚本代码，作用于当前域。</p>\n<p>那我们完全可以在服务端做一个服务，返回一段拼装的JS代码，这样<code>script</code>标签获取到了，就当做JS代码执行了。</p>\n<p>思路走到这里，我们就可以想到，像上面那样，返回一个拼装的<code>回调JS代码</code>，我们在当前域再定义一个同名函数，那这样就和一个AJAX请求一样了。请求成功就回调本地一个函数方法，并在参数里面传入请求成功的返回值。这样，就是一个<code>JSONP</code>了，也就解决了跨域问题。</p>\n<p>下面是一个最简单的演示demo，借鉴了菜鸟教程的例子：</p>\n<p>test.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;JSONP 实例&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divCustomers&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\tfunction callbackFunction(result, methodName)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            var html = &apos;&lt;ul&gt;&apos;;</span><br><span class=\"line\">            for(var i = 0; i &lt; result.length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                html += &apos;&lt;li&gt;&apos; + result[i] + &apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            html += &apos;&lt;/ul&gt;&apos;;</span><br><span class=\"line\">            document.getElementById(&apos;divCustomers&apos;).innerHTML = html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=callbackFunction&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;//cdn.bootcss.com/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t//直接ajax请求google网站，如果你部署在google.com域之外，就会报错</span><br><span class=\"line\">\t$.get(&quot;http://www.google.com/&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>jsonp.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">header(&apos;Content-type: application/json&apos;);</span><br><span class=\"line\">//获取回调函数名</span><br><span class=\"line\">$jsoncallback = htmlspecialchars($_REQUEST [&apos;jsoncallback&apos;]);</span><br><span class=\"line\">//json数据</span><br><span class=\"line\">$json_data = &apos;[&quot;customername1&quot;,&quot;customername2&quot;]&apos;;</span><br><span class=\"line\">//输出jsonp格式的数据</span><br><span class=\"line\">echo $jsoncallback . &quot;(&quot; . $json_data . &quot;)&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>这个实验，你可以在本地分两个服务器部署，然后从一台调用另外一台。也可以在<code>hosts</code>里面配域名，模仿更真实的跨域场景。</p>\n<p>或者最简单，就部署上面的test.html，看看效果，然后分析下，基本就可以明白<code>JSONP</code>了。</p>\n<h1 id=\"更好的使用JSONP\"><a href=\"#更好的使用JSONP\" class=\"headerlink\" title=\"更好的使用JSONP\"></a>更好的使用JSONP</h1><p>我们当然不愿意每一个请求都去写一个<code>script</code>标签，好在我们有<code>jquery</code></p>\n<p>我们使用<code>jquery</code>来调用<code>JSONP</code>请求将变得很简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;JSONP 实例&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=&quot;http://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js&quot;&gt;&lt;/script&gt;    </span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;divCustomers&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//就是getJSON方法,更详细的用法请参考API吧</span><br><span class=\"line\">\t$.getJSON(&quot;http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=?&quot;, function(data) &#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    var html = &apos;&lt;ul&gt;&apos;;</span><br><span class=\"line\">\t    for(var i = 0; i &lt; data.length; i++)</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t        html += &apos;&lt;li&gt;&apos; + data[i] + &apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    html += &apos;&lt;/ul&gt;&apos;;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    $(&apos;#divCustomers&apos;).html(html); </span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"不只是JSONP\"><a href=\"#不只是JSONP\" class=\"headerlink\" title=\"不只是JSONP\"></a>不只是JSONP</h1><p>跨域的方式还有很多种，这里我们只说了JSONP这一种，最近好像还看到一种W3C支持的一种跨域方案，不过还没仔细去看，大家可以自己去搜搜</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在我来到酷狗之前，一直做游戏开发。虽然是做页游，也一样是在浏览器访问，但是和传统的做web开发，还是有着很大的区别。导致我一开始的时候，在做酷狗LIVE项目时和前端配合的不是很好，当时还让前端来给我解释为什么要使用JSONP，因为那时我还第一次听到这个名词。哈哈。</p>\n</blockquote>\n<p>那么，到底什么是JSONP呢？</p>","more":"<h1 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h1><p>抛开不解释跨域问题的讨论<code>JSONP</code>，都是耍流氓。</p>\n<p>凭胸而论，啊呸，平心而论，一开始我真的没理解为什么需要JSONP。JSONP是什么，很容易理解，但是为什么要用这种方式，我真的花了点时间才搞懂。原因就是网上大多文章就一句带过，解决跨域问题，但是没有很好的解释什么是跨域问题。像我这种对前端并不是特别擅长的人，就容易产生疑惑。</p>\n<p>什么是跨域？最简单的解释：</p>\n<blockquote>\n<p>我们部署网站都会有个域名去访问，比如 <a href=\"http://www.yaoboss.me，访问我的博客，这是我的网站的域名，也就是我的网站的域，当我在我网站域下面的页面中，要通过ajax请求去google的某个接口下面获取数据，那我访问的接口一定是http://www.google.com/xxxx/inteface/getXXX，那么谷歌接口所在的域就是，www.google.com，这样就是跨域了\" target=\"_blank\" rel=\"noopener\">www.yaoboss.me，访问我的博客，这是我的网站的域名，也就是我的网站的域，当我在我网站域下面的页面中，要通过ajax请求去google的某个接口下面获取数据，那我访问的接口一定是http://www.google.com/xxxx/inteface/getXXX，那么谷歌接口所在的域就是，www.google.com，这样就是跨域了</a></p>\n</blockquote>\n<p>最早的网景公司定的浏览器规范规定了一个<code>同源策略</code>的安全协议，这个安全协议规定，一个网页中除了特殊的某些标签，<code>&lt;script&gt;,&lt;img&gt;</code>等，可以访问跨域的资源，其他的请求禁止访问跨域的资源。也就是说像我们上面那样，使用原生的<code>AJAX</code>去请求谷歌接口的数据，是获取不到数据的，JS会报错的。我们在浏览器的<code>console</code>里面，可能会看到这样的错误，<code>MLHttpRequest cannot load https://www.google.com/. No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;null&#39; is therefore not allowed access.</code></p>\n<p>跨域的请求是一种合理的需求，我们无法避免的。在工作中，我们公司可能会有很多的域名，每个部门有自己的域名，业务线有业务线的域名。当需要互相调用时，就会有跨域问题。所以这时候就出现了<code>JSONP</code>,可以说是以一种<code>trick</code>的方式解决了跨域问题。那我们接下来就看看<code>JSONP</code>到底是什么。</p>\n<h1 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">callbackFunction([\"customername1\",\"customername2\"])</span><br></pre></td></tr></table></figure>\n<p>上面代码段里面就是<code>JSONP</code>格式，你看他像什么？不就是一个JS方法调用么！传递了一个数组参数！</p>\n<p>没错，就是JS方法调用。这就是JSONP。我们就这样理解，就够了。至于什么<code>json padding</code>，不用管。术语而已，咱们就来实在的大实话。</p>\n<p>上面就是JSONP的真容。</p>\n<p>接下来我们说怎么用。</p>\n<p>前面有提到，<code>&lt;script&gt;&lt;/script&gt;</code>标签不受跨域限制，里面的<code>src</code>属性，可以从任何地方加载js文件。这个地方就可以做文章了，其实这个标签本质上就是对目标发起一个<code>GET</code>请求，将返回值作为一段脚本代码，作用于当前域。</p>\n<p>那我们完全可以在服务端做一个服务，返回一段拼装的JS代码，这样<code>script</code>标签获取到了，就当做JS代码执行了。</p>\n<p>思路走到这里，我们就可以想到，像上面那样，返回一个拼装的<code>回调JS代码</code>，我们在当前域再定义一个同名函数，那这样就和一个AJAX请求一样了。请求成功就回调本地一个函数方法，并在参数里面传入请求成功的返回值。这样，就是一个<code>JSONP</code>了，也就解决了跨域问题。</p>\n<p>下面是一个最简单的演示demo，借鉴了菜鸟教程的例子：</p>\n<p>test.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">&lt;title&gt;JSONP 实例&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divCustomers&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\t\tfunction callbackFunction(result, methodName)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            var html = &apos;&lt;ul&gt;&apos;;</span><br><span class=\"line\">            for(var i = 0; i &lt; result.length; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                html += &apos;&lt;li&gt;&apos; + result[i] + &apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            html += &apos;&lt;/ul&gt;&apos;;</span><br><span class=\"line\">            document.getElementById(&apos;divCustomers&apos;).innerHTML = html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=callbackFunction&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;//cdn.bootcss.com/jquery/3.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t//直接ajax请求google网站，如果你部署在google.com域之外，就会报错</span><br><span class=\"line\">\t$.get(&quot;http://www.google.com/&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>jsonp.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">header(&apos;Content-type: application/json&apos;);</span><br><span class=\"line\">//获取回调函数名</span><br><span class=\"line\">$jsoncallback = htmlspecialchars($_REQUEST [&apos;jsoncallback&apos;]);</span><br><span class=\"line\">//json数据</span><br><span class=\"line\">$json_data = &apos;[&quot;customername1&quot;,&quot;customername2&quot;]&apos;;</span><br><span class=\"line\">//输出jsonp格式的数据</span><br><span class=\"line\">echo $jsoncallback . &quot;(&quot; . $json_data . &quot;)&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>这个实验，你可以在本地分两个服务器部署，然后从一台调用另外一台。也可以在<code>hosts</code>里面配域名，模仿更真实的跨域场景。</p>\n<p>或者最简单，就部署上面的test.html，看看效果，然后分析下，基本就可以明白<code>JSONP</code>了。</p>\n<h1 id=\"更好的使用JSONP\"><a href=\"#更好的使用JSONP\" class=\"headerlink\" title=\"更好的使用JSONP\"></a>更好的使用JSONP</h1><p>我们当然不愿意每一个请求都去写一个<code>script</code>标签，好在我们有<code>jquery</code></p>\n<p>我们使用<code>jquery</code>来调用<code>JSONP</code>请求将变得很简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;JSONP 实例&lt;/title&gt;</span><br><span class=\"line\">    &lt;script src=&quot;http://cdn.static.runoob.com/libs/jquery/1.8.3/jquery.js&quot;&gt;&lt;/script&gt;    </span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;divCustomers&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t//就是getJSON方法,更详细的用法请参考API吧</span><br><span class=\"line\">\t$.getJSON(&quot;http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=?&quot;, function(data) &#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    var html = &apos;&lt;ul&gt;&apos;;</span><br><span class=\"line\">\t    for(var i = 0; i &lt; data.length; i++)</span><br><span class=\"line\">\t    &#123;</span><br><span class=\"line\">\t        html += &apos;&lt;li&gt;&apos; + data[i] + &apos;&lt;/li&gt;&apos;;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    html += &apos;&lt;/ul&gt;&apos;;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    $(&apos;#divCustomers&apos;).html(html); </span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"不只是JSONP\"><a href=\"#不只是JSONP\" class=\"headerlink\" title=\"不只是JSONP\"></a>不只是JSONP</h1><p>跨域的方式还有很多种，这里我们只说了JSONP这一种，最近好像还看到一种W3C支持的一种跨域方案，不过还没仔细去看，大家可以自己去搜搜</p>"},{"title":"webpack configuration has an unknown property 'babel'. These properties are valid","date":"2017-07-16T16:42:13.000Z","_content":"\n在本地编译搭建网上的一个开源项目，启动前端的server时，一直无法启动成功，报标题这个错误。因为对大前端实在是不太熟悉，百度还是花了点时间的，在这里把这错误记录下，以免以后再碰到，特别是这种坑爹的版本问题。\n\n<!--more-->\n\n开源的这个项目是使用node的npm直接启动server的，这个启动方式也给我造成了一定困扰，一直也只是知道Node，知道npm，但是也都只是执行命令，这次报错了，就懵逼了。\n\n根据那个项目的指南，是直接npm的各种模块install好了以后，就直接 `npm run server` 启动就行了，我直接运行以后，系统无情的给了我下面这些信息：\n\n```\n0 info it worked if it ends with ok\n1 verbose cli [ 'D:\\\\nodejs\\\\node.exe',\n1 verbose cli   'D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js',\n1 verbose cli   'run',\n1 verbose cli   'server' ]\n2 info using npm@2.15.8\n3 info using node@v4.4.7\n4 verbose run-script [ 'preserver', 'server', 'postserver' ]\n5 info preserver web@1.0.0\n6 info server web@1.0.0\n7 verbose unsafe-perm in lifecycle true\n8 info web@1.0.0 Failed to exec server script\n9 verbose stack Error: web@1.0.0 server: `webpack-dev-server --content-base html  --hot --progress --colors`\n9 verbose stack Exit status 1\n9 verbose stack     at EventEmitter.<anonymous> (D:\\nodejs\\node_modules\\npm\\lib\\utils\\lifecycle.js:217:16)\n9 verbose stack     at emitTwo (events.js:87:13)\n9 verbose stack     at EventEmitter.emit (events.js:172:7)\n9 verbose stack     at ChildProcess.<anonymous> (D:\\nodejs\\node_modules\\npm\\lib\\utils\\spawn.js:24:14)\n9 verbose stack     at emitTwo (events.js:87:13)\n9 verbose stack     at ChildProcess.emit (events.js:172:7)\n9 verbose stack     at maybeClose (internal/child_process.js:827:16)\n9 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)\n10 verbose pkgid web@1.0.0\n11 verbose cwd F:\\githubRepo\\apiManager\\web\n12 error Windows_NT 6.1.7601\n13 error argv \"D:\\\\nodejs\\\\node.exe\" \"D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"run\" \"server\"\n14 error node v4.4.7\n15 error npm  v2.15.8\n16 error code ELIFECYCLE\n17 error web@1.0.0 server: `webpack-dev-server --content-base html  --hot --progress --colors`\n17 error Exit status 1\n18 error Failed at the web@1.0.0 server script 'webpack-dev-server --content-base html  --hot --progress --colors'.\n18 error This is most likely a problem with the web package,\n18 error not with npm itself.\n18 error Tell the author that this fails on your system:\n18 error     webpack-dev-server --content-base html  --hot --progress --colors\n18 error You can get information on how to open an issue for this project with:\n18 error     npm bugs web\n18 error Or if that isn't available, you can get their info via:\n18 error\n18 error     npm owner ls web\n18 error There is likely additional logging output above.\n19 verbose exit [ 1, true ]\n\n```\n\n没办法只能耐心去看看，一开始使用error里面的错误直接去百度，但是没找到什么有用得消息，但是看起来好像是执行`webpack-dev-server --content-base html  --hot --progress --colors` 这个命令失败了，只能先放下这个，先去看了下npm的run server是啥原理\n\n还好这个也比较简单，npm的`run`也就是直接在`package.json`里面写了两句脚本，`server`就是命令的名字，这样就直接找到`package.json`，找到这个命令`server`，\n确实server就是运行的：`webpack-dev-server --content-base html  --hot --progress --colors`\n\n找到这里以后，那就直接把这个命令放到命令行里运行试下，试过以后，报了下面这些错误：\n\n```\nwebpack-dev-server --content-base html  --hot --progress --colors\nInvalid configuration object. Webpack has been initialised using a configuration object that does not match the API schema.\n - configuration has an unknown property 'babel'. These properties are valid:\n   object { amd?, bail?, cache?, context?, dependencies?, devServer?, devtool?, entry, externals?, loader?, module?, name?, node?, output?, performance?, plugins?, profile?, recordsInputPath?, recordsOutputPath?, recordsPath?, resolve?, resolveLoader?, stats?, target?, watch?, watchOptions? }\n   For typos: please correct them.\n   For loader options: webpack 2 no longer allows custom properties in configuration.\n     Loaders should be updated to allow passing options via loader options in module.rules.\n     Until loaders are updated one can use the LoaderOptionsPlugin to pass these options to the loader:\n     plugins: [\n       new webpack.LoaderOptionsPlugin({\n         // test: /\\.xxx$/, // may apply this only for some modules\n         options: {\n           babel: ...\n         }\n       })\n     ]\n - configuration.resolve.extensions[0] should not be empty.\n\n```\n\n这个错误就比较容易找了，直接复制关键信息，一下就百度到原因了，**webpack2**不再支持这种自定义命名的模式，虽然我也完全不懂这里面啥模式，反正那2不支持，那我就直接换**1**吧\n\n直接`npm uninstall -g webpack-dev-server`卸载掉现有的模块\n\n安装`npm install webpack-dev-server@1.*` 指定1版本的wenpack\n\nOK，齐活！\n\n\n嘻嘻。美滋滋。༺王者༻","source":"_posts/webpack-dev-server-error.md","raw":"---\ntitle: webpack configuration has an unknown property 'babel'. These properties are valid\ndate: 2017-07-17 00:42:13\ntags:\n- 前端\ncategory:\n- 前端\n---\n\n在本地编译搭建网上的一个开源项目，启动前端的server时，一直无法启动成功，报标题这个错误。因为对大前端实在是不太熟悉，百度还是花了点时间的，在这里把这错误记录下，以免以后再碰到，特别是这种坑爹的版本问题。\n\n<!--more-->\n\n开源的这个项目是使用node的npm直接启动server的，这个启动方式也给我造成了一定困扰，一直也只是知道Node，知道npm，但是也都只是执行命令，这次报错了，就懵逼了。\n\n根据那个项目的指南，是直接npm的各种模块install好了以后，就直接 `npm run server` 启动就行了，我直接运行以后，系统无情的给了我下面这些信息：\n\n```\n0 info it worked if it ends with ok\n1 verbose cli [ 'D:\\\\nodejs\\\\node.exe',\n1 verbose cli   'D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js',\n1 verbose cli   'run',\n1 verbose cli   'server' ]\n2 info using npm@2.15.8\n3 info using node@v4.4.7\n4 verbose run-script [ 'preserver', 'server', 'postserver' ]\n5 info preserver web@1.0.0\n6 info server web@1.0.0\n7 verbose unsafe-perm in lifecycle true\n8 info web@1.0.0 Failed to exec server script\n9 verbose stack Error: web@1.0.0 server: `webpack-dev-server --content-base html  --hot --progress --colors`\n9 verbose stack Exit status 1\n9 verbose stack     at EventEmitter.<anonymous> (D:\\nodejs\\node_modules\\npm\\lib\\utils\\lifecycle.js:217:16)\n9 verbose stack     at emitTwo (events.js:87:13)\n9 verbose stack     at EventEmitter.emit (events.js:172:7)\n9 verbose stack     at ChildProcess.<anonymous> (D:\\nodejs\\node_modules\\npm\\lib\\utils\\spawn.js:24:14)\n9 verbose stack     at emitTwo (events.js:87:13)\n9 verbose stack     at ChildProcess.emit (events.js:172:7)\n9 verbose stack     at maybeClose (internal/child_process.js:827:16)\n9 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)\n10 verbose pkgid web@1.0.0\n11 verbose cwd F:\\githubRepo\\apiManager\\web\n12 error Windows_NT 6.1.7601\n13 error argv \"D:\\\\nodejs\\\\node.exe\" \"D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"run\" \"server\"\n14 error node v4.4.7\n15 error npm  v2.15.8\n16 error code ELIFECYCLE\n17 error web@1.0.0 server: `webpack-dev-server --content-base html  --hot --progress --colors`\n17 error Exit status 1\n18 error Failed at the web@1.0.0 server script 'webpack-dev-server --content-base html  --hot --progress --colors'.\n18 error This is most likely a problem with the web package,\n18 error not with npm itself.\n18 error Tell the author that this fails on your system:\n18 error     webpack-dev-server --content-base html  --hot --progress --colors\n18 error You can get information on how to open an issue for this project with:\n18 error     npm bugs web\n18 error Or if that isn't available, you can get their info via:\n18 error\n18 error     npm owner ls web\n18 error There is likely additional logging output above.\n19 verbose exit [ 1, true ]\n\n```\n\n没办法只能耐心去看看，一开始使用error里面的错误直接去百度，但是没找到什么有用得消息，但是看起来好像是执行`webpack-dev-server --content-base html  --hot --progress --colors` 这个命令失败了，只能先放下这个，先去看了下npm的run server是啥原理\n\n还好这个也比较简单，npm的`run`也就是直接在`package.json`里面写了两句脚本，`server`就是命令的名字，这样就直接找到`package.json`，找到这个命令`server`，\n确实server就是运行的：`webpack-dev-server --content-base html  --hot --progress --colors`\n\n找到这里以后，那就直接把这个命令放到命令行里运行试下，试过以后，报了下面这些错误：\n\n```\nwebpack-dev-server --content-base html  --hot --progress --colors\nInvalid configuration object. Webpack has been initialised using a configuration object that does not match the API schema.\n - configuration has an unknown property 'babel'. These properties are valid:\n   object { amd?, bail?, cache?, context?, dependencies?, devServer?, devtool?, entry, externals?, loader?, module?, name?, node?, output?, performance?, plugins?, profile?, recordsInputPath?, recordsOutputPath?, recordsPath?, resolve?, resolveLoader?, stats?, target?, watch?, watchOptions? }\n   For typos: please correct them.\n   For loader options: webpack 2 no longer allows custom properties in configuration.\n     Loaders should be updated to allow passing options via loader options in module.rules.\n     Until loaders are updated one can use the LoaderOptionsPlugin to pass these options to the loader:\n     plugins: [\n       new webpack.LoaderOptionsPlugin({\n         // test: /\\.xxx$/, // may apply this only for some modules\n         options: {\n           babel: ...\n         }\n       })\n     ]\n - configuration.resolve.extensions[0] should not be empty.\n\n```\n\n这个错误就比较容易找了，直接复制关键信息，一下就百度到原因了，**webpack2**不再支持这种自定义命名的模式，虽然我也完全不懂这里面啥模式，反正那2不支持，那我就直接换**1**吧\n\n直接`npm uninstall -g webpack-dev-server`卸载掉现有的模块\n\n安装`npm install webpack-dev-server@1.*` 指定1版本的wenpack\n\nOK，齐活！\n\n\n嘻嘻。美滋滋。༺王者༻","slug":"webpack-dev-server-error","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfk00220a6ttng6nkb5","content":"<p>在本地编译搭建网上的一个开源项目，启动前端的server时，一直无法启动成功，报标题这个错误。因为对大前端实在是不太熟悉，百度还是花了点时间的，在这里把这错误记录下，以免以后再碰到，特别是这种坑爹的版本问题。</p>\n<a id=\"more\"></a>\n<p>开源的这个项目是使用node的npm直接启动server的，这个启动方式也给我造成了一定困扰，一直也只是知道Node，知道npm，但是也都只是执行命令，这次报错了，就懵逼了。</p>\n<p>根据那个项目的指南，是直接npm的各种模块install好了以后，就直接 <code>npm run server</code> 启动就行了，我直接运行以后，系统无情的给了我下面这些信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 info it worked if it ends with ok</span><br><span class=\"line\">1 verbose cli [ &apos;D:\\\\nodejs\\\\node.exe&apos;,</span><br><span class=\"line\">1 verbose cli   &apos;D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&apos;,</span><br><span class=\"line\">1 verbose cli   &apos;run&apos;,</span><br><span class=\"line\">1 verbose cli   &apos;server&apos; ]</span><br><span class=\"line\">2 info using npm@2.15.8</span><br><span class=\"line\">3 info using node@v4.4.7</span><br><span class=\"line\">4 verbose run-script [ &apos;preserver&apos;, &apos;server&apos;, &apos;postserver&apos; ]</span><br><span class=\"line\">5 info preserver web@1.0.0</span><br><span class=\"line\">6 info server web@1.0.0</span><br><span class=\"line\">7 verbose unsafe-perm in lifecycle true</span><br><span class=\"line\">8 info web@1.0.0 Failed to exec server script</span><br><span class=\"line\">9 verbose stack Error: web@1.0.0 server: `webpack-dev-server --content-base html  --hot --progress --colors`</span><br><span class=\"line\">9 verbose stack Exit status 1</span><br><span class=\"line\">9 verbose stack     at EventEmitter.&lt;anonymous&gt; (D:\\nodejs\\node_modules\\npm\\lib\\utils\\lifecycle.js:217:16)</span><br><span class=\"line\">9 verbose stack     at emitTwo (events.js:87:13)</span><br><span class=\"line\">9 verbose stack     at EventEmitter.emit (events.js:172:7)</span><br><span class=\"line\">9 verbose stack     at ChildProcess.&lt;anonymous&gt; (D:\\nodejs\\node_modules\\npm\\lib\\utils\\spawn.js:24:14)</span><br><span class=\"line\">9 verbose stack     at emitTwo (events.js:87:13)</span><br><span class=\"line\">9 verbose stack     at ChildProcess.emit (events.js:172:7)</span><br><span class=\"line\">9 verbose stack     at maybeClose (internal/child_process.js:827:16)</span><br><span class=\"line\">9 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)</span><br><span class=\"line\">10 verbose pkgid web@1.0.0</span><br><span class=\"line\">11 verbose cwd F:\\githubRepo\\apiManager\\web</span><br><span class=\"line\">12 error Windows_NT 6.1.7601</span><br><span class=\"line\">13 error argv &quot;D:\\\\nodejs\\\\node.exe&quot; &quot;D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot; &quot;run&quot; &quot;server&quot;</span><br><span class=\"line\">14 error node v4.4.7</span><br><span class=\"line\">15 error npm  v2.15.8</span><br><span class=\"line\">16 error code ELIFECYCLE</span><br><span class=\"line\">17 error web@1.0.0 server: `webpack-dev-server --content-base html  --hot --progress --colors`</span><br><span class=\"line\">17 error Exit status 1</span><br><span class=\"line\">18 error Failed at the web@1.0.0 server script &apos;webpack-dev-server --content-base html  --hot --progress --colors&apos;.</span><br><span class=\"line\">18 error This is most likely a problem with the web package,</span><br><span class=\"line\">18 error not with npm itself.</span><br><span class=\"line\">18 error Tell the author that this fails on your system:</span><br><span class=\"line\">18 error     webpack-dev-server --content-base html  --hot --progress --colors</span><br><span class=\"line\">18 error You can get information on how to open an issue for this project with:</span><br><span class=\"line\">18 error     npm bugs web</span><br><span class=\"line\">18 error Or if that isn&apos;t available, you can get their info via:</span><br><span class=\"line\">18 error</span><br><span class=\"line\">18 error     npm owner ls web</span><br><span class=\"line\">18 error There is likely additional logging output above.</span><br><span class=\"line\">19 verbose exit [ 1, true ]</span><br></pre></td></tr></table></figure>\n<p>没办法只能耐心去看看，一开始使用error里面的错误直接去百度，但是没找到什么有用得消息，但是看起来好像是执行<code>webpack-dev-server --content-base html  --hot --progress --colors</code> 这个命令失败了，只能先放下这个，先去看了下npm的run server是啥原理</p>\n<p>还好这个也比较简单，npm的<code>run</code>也就是直接在<code>package.json</code>里面写了两句脚本，<code>server</code>就是命令的名字，这样就直接找到<code>package.json</code>，找到这个命令<code>server</code>，<br>确实server就是运行的：<code>webpack-dev-server --content-base html  --hot --progress --colors</code></p>\n<p>找到这里以后，那就直接把这个命令放到命令行里运行试下，试过以后，报了下面这些错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server --content-base html  --hot --progress --colors</span><br><span class=\"line\">Invalid configuration object. Webpack has been initialised using a configuration object that does not match the API schema.</span><br><span class=\"line\"> - configuration has an unknown property &apos;babel&apos;. These properties are valid:</span><br><span class=\"line\">   object &#123; amd?, bail?, cache?, context?, dependencies?, devServer?, devtool?, entry, externals?, loader?, module?, name?, node?, output?, performance?, plugins?, profile?, recordsInputPath?, recordsOutputPath?, recordsPath?, resolve?, resolveLoader?, stats?, target?, watch?, watchOptions? &#125;</span><br><span class=\"line\">   For typos: please correct them.</span><br><span class=\"line\">   For loader options: webpack 2 no longer allows custom properties in configuration.</span><br><span class=\"line\">     Loaders should be updated to allow passing options via loader options in module.rules.</span><br><span class=\"line\">     Until loaders are updated one can use the LoaderOptionsPlugin to pass these options to the loader:</span><br><span class=\"line\">     plugins: [</span><br><span class=\"line\">       new webpack.LoaderOptionsPlugin(&#123;</span><br><span class=\"line\">         // test: /\\.xxx$/, // may apply this only for some modules</span><br><span class=\"line\">         options: &#123;</span><br><span class=\"line\">           babel: ...</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     ]</span><br><span class=\"line\"> - configuration.resolve.extensions[0] should not be empty.</span><br></pre></td></tr></table></figure>\n<p>这个错误就比较容易找了，直接复制关键信息，一下就百度到原因了，<strong>webpack2</strong>不再支持这种自定义命名的模式，虽然我也完全不懂这里面啥模式，反正那2不支持，那我就直接换<strong>1</strong>吧</p>\n<p>直接<code>npm uninstall -g webpack-dev-server</code>卸载掉现有的模块</p>\n<p>安装<code>npm install webpack-dev-server@1.*</code> 指定1版本的wenpack</p>\n<p>OK，齐活！</p>\n<p>嘻嘻。美滋滋。༺王者༻</p>\n","site":{"data":{}},"excerpt":"<p>在本地编译搭建网上的一个开源项目，启动前端的server时，一直无法启动成功，报标题这个错误。因为对大前端实在是不太熟悉，百度还是花了点时间的，在这里把这错误记录下，以免以后再碰到，特别是这种坑爹的版本问题。</p>","more":"<p>开源的这个项目是使用node的npm直接启动server的，这个启动方式也给我造成了一定困扰，一直也只是知道Node，知道npm，但是也都只是执行命令，这次报错了，就懵逼了。</p>\n<p>根据那个项目的指南，是直接npm的各种模块install好了以后，就直接 <code>npm run server</code> 启动就行了，我直接运行以后，系统无情的给了我下面这些信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 info it worked if it ends with ok</span><br><span class=\"line\">1 verbose cli [ &apos;D:\\\\nodejs\\\\node.exe&apos;,</span><br><span class=\"line\">1 verbose cli   &apos;D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&apos;,</span><br><span class=\"line\">1 verbose cli   &apos;run&apos;,</span><br><span class=\"line\">1 verbose cli   &apos;server&apos; ]</span><br><span class=\"line\">2 info using npm@2.15.8</span><br><span class=\"line\">3 info using node@v4.4.7</span><br><span class=\"line\">4 verbose run-script [ &apos;preserver&apos;, &apos;server&apos;, &apos;postserver&apos; ]</span><br><span class=\"line\">5 info preserver web@1.0.0</span><br><span class=\"line\">6 info server web@1.0.0</span><br><span class=\"line\">7 verbose unsafe-perm in lifecycle true</span><br><span class=\"line\">8 info web@1.0.0 Failed to exec server script</span><br><span class=\"line\">9 verbose stack Error: web@1.0.0 server: `webpack-dev-server --content-base html  --hot --progress --colors`</span><br><span class=\"line\">9 verbose stack Exit status 1</span><br><span class=\"line\">9 verbose stack     at EventEmitter.&lt;anonymous&gt; (D:\\nodejs\\node_modules\\npm\\lib\\utils\\lifecycle.js:217:16)</span><br><span class=\"line\">9 verbose stack     at emitTwo (events.js:87:13)</span><br><span class=\"line\">9 verbose stack     at EventEmitter.emit (events.js:172:7)</span><br><span class=\"line\">9 verbose stack     at ChildProcess.&lt;anonymous&gt; (D:\\nodejs\\node_modules\\npm\\lib\\utils\\spawn.js:24:14)</span><br><span class=\"line\">9 verbose stack     at emitTwo (events.js:87:13)</span><br><span class=\"line\">9 verbose stack     at ChildProcess.emit (events.js:172:7)</span><br><span class=\"line\">9 verbose stack     at maybeClose (internal/child_process.js:827:16)</span><br><span class=\"line\">9 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:211:5)</span><br><span class=\"line\">10 verbose pkgid web@1.0.0</span><br><span class=\"line\">11 verbose cwd F:\\githubRepo\\apiManager\\web</span><br><span class=\"line\">12 error Windows_NT 6.1.7601</span><br><span class=\"line\">13 error argv &quot;D:\\\\nodejs\\\\node.exe&quot; &quot;D:\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot; &quot;run&quot; &quot;server&quot;</span><br><span class=\"line\">14 error node v4.4.7</span><br><span class=\"line\">15 error npm  v2.15.8</span><br><span class=\"line\">16 error code ELIFECYCLE</span><br><span class=\"line\">17 error web@1.0.0 server: `webpack-dev-server --content-base html  --hot --progress --colors`</span><br><span class=\"line\">17 error Exit status 1</span><br><span class=\"line\">18 error Failed at the web@1.0.0 server script &apos;webpack-dev-server --content-base html  --hot --progress --colors&apos;.</span><br><span class=\"line\">18 error This is most likely a problem with the web package,</span><br><span class=\"line\">18 error not with npm itself.</span><br><span class=\"line\">18 error Tell the author that this fails on your system:</span><br><span class=\"line\">18 error     webpack-dev-server --content-base html  --hot --progress --colors</span><br><span class=\"line\">18 error You can get information on how to open an issue for this project with:</span><br><span class=\"line\">18 error     npm bugs web</span><br><span class=\"line\">18 error Or if that isn&apos;t available, you can get their info via:</span><br><span class=\"line\">18 error</span><br><span class=\"line\">18 error     npm owner ls web</span><br><span class=\"line\">18 error There is likely additional logging output above.</span><br><span class=\"line\">19 verbose exit [ 1, true ]</span><br></pre></td></tr></table></figure>\n<p>没办法只能耐心去看看，一开始使用error里面的错误直接去百度，但是没找到什么有用得消息，但是看起来好像是执行<code>webpack-dev-server --content-base html  --hot --progress --colors</code> 这个命令失败了，只能先放下这个，先去看了下npm的run server是啥原理</p>\n<p>还好这个也比较简单，npm的<code>run</code>也就是直接在<code>package.json</code>里面写了两句脚本，<code>server</code>就是命令的名字，这样就直接找到<code>package.json</code>，找到这个命令<code>server</code>，<br>确实server就是运行的：<code>webpack-dev-server --content-base html  --hot --progress --colors</code></p>\n<p>找到这里以后，那就直接把这个命令放到命令行里运行试下，试过以后，报了下面这些错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack-dev-server --content-base html  --hot --progress --colors</span><br><span class=\"line\">Invalid configuration object. Webpack has been initialised using a configuration object that does not match the API schema.</span><br><span class=\"line\"> - configuration has an unknown property &apos;babel&apos;. These properties are valid:</span><br><span class=\"line\">   object &#123; amd?, bail?, cache?, context?, dependencies?, devServer?, devtool?, entry, externals?, loader?, module?, name?, node?, output?, performance?, plugins?, profile?, recordsInputPath?, recordsOutputPath?, recordsPath?, resolve?, resolveLoader?, stats?, target?, watch?, watchOptions? &#125;</span><br><span class=\"line\">   For typos: please correct them.</span><br><span class=\"line\">   For loader options: webpack 2 no longer allows custom properties in configuration.</span><br><span class=\"line\">     Loaders should be updated to allow passing options via loader options in module.rules.</span><br><span class=\"line\">     Until loaders are updated one can use the LoaderOptionsPlugin to pass these options to the loader:</span><br><span class=\"line\">     plugins: [</span><br><span class=\"line\">       new webpack.LoaderOptionsPlugin(&#123;</span><br><span class=\"line\">         // test: /\\.xxx$/, // may apply this only for some modules</span><br><span class=\"line\">         options: &#123;</span><br><span class=\"line\">           babel: ...</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     ]</span><br><span class=\"line\"> - configuration.resolve.extensions[0] should not be empty.</span><br></pre></td></tr></table></figure>\n<p>这个错误就比较容易找了，直接复制关键信息，一下就百度到原因了，<strong>webpack2</strong>不再支持这种自定义命名的模式，虽然我也完全不懂这里面啥模式，反正那2不支持，那我就直接换<strong>1</strong>吧</p>\n<p>直接<code>npm uninstall -g webpack-dev-server</code>卸载掉现有的模块</p>\n<p>安装<code>npm install webpack-dev-server@1.*</code> 指定1版本的wenpack</p>\n<p>OK，齐活！</p>\n<p>嘻嘻。美滋滋。༺王者༻</p>"},{"title":"关于远程连接桌面的那些事","date":"2016-04-12T14:38:47.000Z","_content":"\n说到平时用的比较多的功能，远程桌面连接真的算的上是一个了。\n\n不论是开会时在会议室连回自己的电脑展示PPT,WORD，还是远程连接管理win server服务器，又或者是像我之前搞了公网IP，然后在外网连回自己家里的电脑，进行操作，都会使用到这个功能。\n<!-- more -->\n\n但依照我个人经验来说，每次使用远程桌面，第一次连接，很高概率都没法一次连接成功，这在关键的时候就变得很尴尬了。可能会让会议室一堆人在等着你一个人操作一个远程连接，浪费时间不说，会让别人对你心生不靠谱的感觉。别问我怎么知道的，都是泪。\n\n所以我在这里总结，我解决远程桌面连接的几种办法，基本能百分之99的概率解决问题。\n\n1.遇到下面这个问题：\n\n> 远程桌面由于以下原因之一无法连接到远程计算机:\n1) 未启用对服务器的远程访问\n2) 远程计算机已关闭\n3) 在网络上远程计算机不可用\n确保打开远程计算机、连接到网络并且启用远程访问。\n\n![img](/images/关于远程连接桌面的那些事/1.png)\n\n解决办法：\n\n计算机右键->属性->高级系统设置->远程->允许任意版本远程桌面的计算机连接\n\n![img](/images/关于远程连接桌面的那些事/2.png)\n\n如果上面设置了，错误依然不变。计算机右键->管理->服务和应用程序->服务\n![img](/images/关于远程连接桌面的那些事/3.png)\n\n启动这三个服务\n\n2.如果你确定密码，域，账号名字，密码都输入正确，但是就报 “凭据无法工作。请输入新凭据”\n\n- 从【控制面板】找到【网络和共享中心】\n- 点击进入选择【更改高级共享设置】\n- 选择【关闭密码保护共享】\n\n以上。\n\n基本可以解决远程桌面连接的大部分问题了。暂时我没有碰到其他奇葩问题了。","source":"_posts/关于远程连接桌面的那些事.md","raw":"---\ntitle: 关于远程连接桌面的那些事\ndate: 2016-04-12 22:38:47\ntags:\n- 远程桌面\n- windows\ncategory:\n- 技术杂文\n---\n\n说到平时用的比较多的功能，远程桌面连接真的算的上是一个了。\n\n不论是开会时在会议室连回自己的电脑展示PPT,WORD，还是远程连接管理win server服务器，又或者是像我之前搞了公网IP，然后在外网连回自己家里的电脑，进行操作，都会使用到这个功能。\n<!-- more -->\n\n但依照我个人经验来说，每次使用远程桌面，第一次连接，很高概率都没法一次连接成功，这在关键的时候就变得很尴尬了。可能会让会议室一堆人在等着你一个人操作一个远程连接，浪费时间不说，会让别人对你心生不靠谱的感觉。别问我怎么知道的，都是泪。\n\n所以我在这里总结，我解决远程桌面连接的几种办法，基本能百分之99的概率解决问题。\n\n1.遇到下面这个问题：\n\n> 远程桌面由于以下原因之一无法连接到远程计算机:\n1) 未启用对服务器的远程访问\n2) 远程计算机已关闭\n3) 在网络上远程计算机不可用\n确保打开远程计算机、连接到网络并且启用远程访问。\n\n![img](/images/关于远程连接桌面的那些事/1.png)\n\n解决办法：\n\n计算机右键->属性->高级系统设置->远程->允许任意版本远程桌面的计算机连接\n\n![img](/images/关于远程连接桌面的那些事/2.png)\n\n如果上面设置了，错误依然不变。计算机右键->管理->服务和应用程序->服务\n![img](/images/关于远程连接桌面的那些事/3.png)\n\n启动这三个服务\n\n2.如果你确定密码，域，账号名字，密码都输入正确，但是就报 “凭据无法工作。请输入新凭据”\n\n- 从【控制面板】找到【网络和共享中心】\n- 点击进入选择【更改高级共享设置】\n- 选择【关闭密码保护共享】\n\n以上。\n\n基本可以解决远程桌面连接的大部分问题了。暂时我没有碰到其他奇葩问题了。","slug":"关于远程连接桌面的那些事","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfl00250a6tmu89vqzh","content":"<p>说到平时用的比较多的功能，远程桌面连接真的算的上是一个了。</p>\n<p>不论是开会时在会议室连回自己的电脑展示PPT,WORD，还是远程连接管理win server服务器，又或者是像我之前搞了公网IP，然后在外网连回自己家里的电脑，进行操作，都会使用到这个功能。<br><a id=\"more\"></a></p>\n<p>但依照我个人经验来说，每次使用远程桌面，第一次连接，很高概率都没法一次连接成功，这在关键的时候就变得很尴尬了。可能会让会议室一堆人在等着你一个人操作一个远程连接，浪费时间不说，会让别人对你心生不靠谱的感觉。别问我怎么知道的，都是泪。</p>\n<p>所以我在这里总结，我解决远程桌面连接的几种办法，基本能百分之99的概率解决问题。</p>\n<p>1.遇到下面这个问题：</p>\n<blockquote>\n<p>远程桌面由于以下原因之一无法连接到远程计算机:<br>1) 未启用对服务器的远程访问<br>2) 远程计算机已关闭<br>3) 在网络上远程计算机不可用<br>确保打开远程计算机、连接到网络并且启用远程访问。</p>\n</blockquote>\n<p><img src=\"/images/关于远程连接桌面的那些事/1.png\" alt=\"img\"></p>\n<p>解决办法：</p>\n<p>计算机右键-&gt;属性-&gt;高级系统设置-&gt;远程-&gt;允许任意版本远程桌面的计算机连接</p>\n<p><img src=\"/images/关于远程连接桌面的那些事/2.png\" alt=\"img\"></p>\n<p>如果上面设置了，错误依然不变。计算机右键-&gt;管理-&gt;服务和应用程序-&gt;服务<br><img src=\"/images/关于远程连接桌面的那些事/3.png\" alt=\"img\"></p>\n<p>启动这三个服务</p>\n<p>2.如果你确定密码，域，账号名字，密码都输入正确，但是就报 “凭据无法工作。请输入新凭据”</p>\n<ul>\n<li>从【控制面板】找到【网络和共享中心】</li>\n<li>点击进入选择【更改高级共享设置】</li>\n<li>选择【关闭密码保护共享】</li>\n</ul>\n<p>以上。</p>\n<p>基本可以解决远程桌面连接的大部分问题了。暂时我没有碰到其他奇葩问题了。</p>\n","site":{"data":{}},"excerpt":"<p>说到平时用的比较多的功能，远程桌面连接真的算的上是一个了。</p>\n<p>不论是开会时在会议室连回自己的电脑展示PPT,WORD，还是远程连接管理win server服务器，又或者是像我之前搞了公网IP，然后在外网连回自己家里的电脑，进行操作，都会使用到这个功能。<br>","more":"</p>\n<p>但依照我个人经验来说，每次使用远程桌面，第一次连接，很高概率都没法一次连接成功，这在关键的时候就变得很尴尬了。可能会让会议室一堆人在等着你一个人操作一个远程连接，浪费时间不说，会让别人对你心生不靠谱的感觉。别问我怎么知道的，都是泪。</p>\n<p>所以我在这里总结，我解决远程桌面连接的几种办法，基本能百分之99的概率解决问题。</p>\n<p>1.遇到下面这个问题：</p>\n<blockquote>\n<p>远程桌面由于以下原因之一无法连接到远程计算机:<br>1) 未启用对服务器的远程访问<br>2) 远程计算机已关闭<br>3) 在网络上远程计算机不可用<br>确保打开远程计算机、连接到网络并且启用远程访问。</p>\n</blockquote>\n<p><img src=\"/images/关于远程连接桌面的那些事/1.png\" alt=\"img\"></p>\n<p>解决办法：</p>\n<p>计算机右键-&gt;属性-&gt;高级系统设置-&gt;远程-&gt;允许任意版本远程桌面的计算机连接</p>\n<p><img src=\"/images/关于远程连接桌面的那些事/2.png\" alt=\"img\"></p>\n<p>如果上面设置了，错误依然不变。计算机右键-&gt;管理-&gt;服务和应用程序-&gt;服务<br><img src=\"/images/关于远程连接桌面的那些事/3.png\" alt=\"img\"></p>\n<p>启动这三个服务</p>\n<p>2.如果你确定密码，域，账号名字，密码都输入正确，但是就报 “凭据无法工作。请输入新凭据”</p>\n<ul>\n<li>从【控制面板】找到【网络和共享中心】</li>\n<li>点击进入选择【更改高级共享设置】</li>\n<li>选择【关闭密码保护共享】</li>\n</ul>\n<p>以上。</p>\n<p>基本可以解决远程桌面连接的大部分问题了。暂时我没有碰到其他奇葩问题了。</p>"},{"title":"十分钟理解字符编码：ASCII,Unicode,UTF-8,GBK,GB2312","date":"2016-09-26T15:24:11.000Z","_content":"\n> 从我们第一天写程序开始，就注定会碰到一个坑，编码问题。我相信不管是天生的大神，还是蹒跚前行的菜鸟，都有过在半夜上百度，上google，搜索“xxxx为什么显示乱码？”的经历，当时真的不理解什么是编码，为什么计算机需要编码，为什么会产生乱码，那时候只知道按照网上某个大神的知道，在哪里加一个endoding的声明，然后就好了，具体为什么，当时没有深究，也没有能力去深究，说实话。现在多年多去，回过头来看编码，就更容易理解的多了。把自己的理解记录下来，希望能作为一个十分钟的介绍教程，让人可以很快理解编码的门道。\n\n\n<!-- more -->\n\n# 什么是编码\n\n计算机底层只有0,1这两种数据，也就是二进制，说白了就是逻辑电路，接通和断开，两种状态，表现0,1两种状态。那我们现实中这么多丰富的表现，要如何构建在这个简单的01之上呢，像英文26个字母，a-z，计算机如何去定义a-z这些字母呢？假设我们来设计计算机，我们怎么来表示呢？可能我最先想到的就是，`0表示a,1表示b,10表示c,11表示d,注意这里是二进制`，其实换成十进制也是一样，0表示a，1表示b，2表示c，3表示d，以此类推，就搞定了。\n\n# 为什么需要编码\n\n但是世界上这么多国家，这么多种类的语言，使用这么简单的0,1,2来表示，肯定是行不通的，需要一套科学的表现方式，也是就是我们说的字符编码了。由一个标准组织来制定，然后大家都准守，那么就可以解决字符在计算机上的表现问题啦。\n\n# 为什么会出现乱码\n\n乱码为什么会出现，这么来说，中国一开始搞了一套编码，0代表中，1代表国，但是美国也搞了一套编码，0代表a，1代表b，这样，我们传输了这两个中国字符给美国朋友的时候，他们的计算机看到0,1，那对应的就是a,b啊。相同的数字，在不同的编码中代表的含义不同，用错误的方式打开了原有的编码，就产生了乱码。当然，有时候乱码不是中国显示成a,b这么简单，可能会变成一个没法理解的字符。\n\n# 实际使用中用什么编码\n\n这样一个国家搞一套，大家各自占山为王，都没法正常沟通了，不能愉快的玩耍了。这时候肯定就有组织站出来说了，我们搞一套世界都通用的编码吧，那大家就方便了，不会老乱码了。这时候，unicode字符集出现了。unicode字符集，就相当于包括了世界上现有的所有语言，所以只要我们输入的时候，根据这里面的字符进行编码，那别人使用unicode解码的时候看到的也就是你想要表达的字符的意思了。\n\n好了，有了unicode，Unicode是一套规则，也是标准。但是就像计算机行业的很多标准一样，标准就像接口，他不管你的实现方式，他也没有规定实现方式。对于Unicode字符，在标准里面，使用2个字节，或者4个字节来编码字符，但是这样就会造成有些字符明明可以一个字节搞定，但是在前面补了一个字节的0，这样非常浪费存储空间，因为白白占用了8个0的空间。这时候出现了`UTF-8`编码，简单理解，`UTF-8`实现了Unicode标准，并且实现方式非常节省空间，使用变长的方式。也就是说如果字符只需要一个字节，那就使用一个字节，不在前面强制补0。但是变长之后，一片文章里面，1个字节的也有，2个也有，3个也有，解析的时候怎么知道到底现在是1字节的字符，还是2字节的字符呢？`UTF-8`给出了一个聪明的实现，定了一个规则：\n\n```\n\nUTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，也是一种前缀码。\n\n最小编码单位（code unit）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。\n\n1. 如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。\n2. 如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头\n3. 如果一个字节以1110开头，那么代表当前字符为三字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头\n4. 如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。\n\n```\n就像`TCP包协议`一样，`UTF-8`也搞了类似包头含义的东西，来标明是几字节的字符。\n\n有了这样的规则，这样的编码，基本就解决了统一编码的问题。\n\n# Mysql中的编码问题\n\n在早几年的时候，mysql就指定`utf8`就行了，啥问题都没有。但是后来出现了`emoji`表情，越来越多的移动设备开始支持`emoji`表情，我们开始发现存储`emoji`表情的时候mysql开始报错\n\n`ERROR 1366: Incorrect string value: '\\xF0\\x9D\\x8C\\x86' for column`\n\n其实根本原因就是，`emoji`的utf-8编码是4个字节，而mysql的`utf8`最大只支持3个字节\n\n而为什么只支持3个字节，这种估计就是历史原因了，没有去深究\n\n所以在`mysql 5.3.3`版本开始，`mysql`加入了`utf8mb4`，其实就是`maximum 4 bytes`，最大支持4个字节的`utf8`编码，这样就算可以支持所有`utf-8`编码的字符集了\n\n**mysql官网说明**：https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html\n\n---\n\n\n补充说明：（只是用于了解，可以略过）\n\n虽然utf-8最大可以使用6个字节来表示`unicode`字符集，但是：\n\n> UTF-8使用一至六个字节为每个字符编码（尽管如此，2003年11月UTF-8被RFC 3629重新规范，只能使用原来Unicode定义的区域，U+0000到U+10FFFF，也就是说最多四个字节）\n\n> 说明：需要5个字节和6个字节UTF-8编码的unicode编码范围，属于UCS-4 编码\n早期的规范UTF-8可以到达6字节序列，可以覆盖到31位元（通用字符集原来的极限）。尽管如此，2003年11月UTF-8 被 RFC 3629 重新规范，只能使用原来Unicode定义的区域， U+0000到U+10FFFF。根据规范，这些字节值将无法出现在合法 UTF-8序列中\n\n上面引用自`wiki`和`百度百科`，总结就是，03年出的规范，utf-8最多使用4个字节来编码，大于4个字节编码的那些字符，使用utf-4(utf-32)去编\n\n# trick\n\n通过mysql识别和还原乱码\n\n```\nmysql [localhost] {msandbox} > select hex(convert('寰堝睂' using gbk));\n+-------------------------------------+\n| hex(convert('寰堝睂' using gbk))    |\n+-------------------------------------+\n| E5BE88E5B18C                        |\n+-------------------------------------+\n1 row in set (0.01 sec)\n\n\nmysql [localhost] {msandbox} ((none)) > select convert(0xE5BE88E5B18C using utf8);\n+------------------------------------+\n| convert(0xE5BE88E5B18C using utf8) |\n+------------------------------------+\n| 很屌                               |\n+------------------------------------+\n1 row in set (0.00 sec)\n```\n\n---- \n\n参考文章：\n\n> http://cenalulu.github.io/linux/character-encoding/\n> http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\n> https://www.zhihu.com/question/23374078\n","source":"_posts/what-is-the-difference-between-unicode-utf-8-gbk-gb2312.md","raw":"---\ntitle: 十分钟理解字符编码：ASCII,Unicode,UTF-8,GBK,GB2312\ndate: 2016-09-26 23:24:11\ntags:\n- java\n- 编码\ncategory:\n- java\n---\n\n> 从我们第一天写程序开始，就注定会碰到一个坑，编码问题。我相信不管是天生的大神，还是蹒跚前行的菜鸟，都有过在半夜上百度，上google，搜索“xxxx为什么显示乱码？”的经历，当时真的不理解什么是编码，为什么计算机需要编码，为什么会产生乱码，那时候只知道按照网上某个大神的知道，在哪里加一个endoding的声明，然后就好了，具体为什么，当时没有深究，也没有能力去深究，说实话。现在多年多去，回过头来看编码，就更容易理解的多了。把自己的理解记录下来，希望能作为一个十分钟的介绍教程，让人可以很快理解编码的门道。\n\n\n<!-- more -->\n\n# 什么是编码\n\n计算机底层只有0,1这两种数据，也就是二进制，说白了就是逻辑电路，接通和断开，两种状态，表现0,1两种状态。那我们现实中这么多丰富的表现，要如何构建在这个简单的01之上呢，像英文26个字母，a-z，计算机如何去定义a-z这些字母呢？假设我们来设计计算机，我们怎么来表示呢？可能我最先想到的就是，`0表示a,1表示b,10表示c,11表示d,注意这里是二进制`，其实换成十进制也是一样，0表示a，1表示b，2表示c，3表示d，以此类推，就搞定了。\n\n# 为什么需要编码\n\n但是世界上这么多国家，这么多种类的语言，使用这么简单的0,1,2来表示，肯定是行不通的，需要一套科学的表现方式，也是就是我们说的字符编码了。由一个标准组织来制定，然后大家都准守，那么就可以解决字符在计算机上的表现问题啦。\n\n# 为什么会出现乱码\n\n乱码为什么会出现，这么来说，中国一开始搞了一套编码，0代表中，1代表国，但是美国也搞了一套编码，0代表a，1代表b，这样，我们传输了这两个中国字符给美国朋友的时候，他们的计算机看到0,1，那对应的就是a,b啊。相同的数字，在不同的编码中代表的含义不同，用错误的方式打开了原有的编码，就产生了乱码。当然，有时候乱码不是中国显示成a,b这么简单，可能会变成一个没法理解的字符。\n\n# 实际使用中用什么编码\n\n这样一个国家搞一套，大家各自占山为王，都没法正常沟通了，不能愉快的玩耍了。这时候肯定就有组织站出来说了，我们搞一套世界都通用的编码吧，那大家就方便了，不会老乱码了。这时候，unicode字符集出现了。unicode字符集，就相当于包括了世界上现有的所有语言，所以只要我们输入的时候，根据这里面的字符进行编码，那别人使用unicode解码的时候看到的也就是你想要表达的字符的意思了。\n\n好了，有了unicode，Unicode是一套规则，也是标准。但是就像计算机行业的很多标准一样，标准就像接口，他不管你的实现方式，他也没有规定实现方式。对于Unicode字符，在标准里面，使用2个字节，或者4个字节来编码字符，但是这样就会造成有些字符明明可以一个字节搞定，但是在前面补了一个字节的0，这样非常浪费存储空间，因为白白占用了8个0的空间。这时候出现了`UTF-8`编码，简单理解，`UTF-8`实现了Unicode标准，并且实现方式非常节省空间，使用变长的方式。也就是说如果字符只需要一个字节，那就使用一个字节，不在前面强制补0。但是变长之后，一片文章里面，1个字节的也有，2个也有，3个也有，解析的时候怎么知道到底现在是1字节的字符，还是2字节的字符呢？`UTF-8`给出了一个聪明的实现，定了一个规则：\n\n```\n\nUTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，也是一种前缀码。\n\n最小编码单位（code unit）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。\n\n1. 如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。\n2. 如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头\n3. 如果一个字节以1110开头，那么代表当前字符为三字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头\n4. 如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。\n\n```\n就像`TCP包协议`一样，`UTF-8`也搞了类似包头含义的东西，来标明是几字节的字符。\n\n有了这样的规则，这样的编码，基本就解决了统一编码的问题。\n\n# Mysql中的编码问题\n\n在早几年的时候，mysql就指定`utf8`就行了，啥问题都没有。但是后来出现了`emoji`表情，越来越多的移动设备开始支持`emoji`表情，我们开始发现存储`emoji`表情的时候mysql开始报错\n\n`ERROR 1366: Incorrect string value: '\\xF0\\x9D\\x8C\\x86' for column`\n\n其实根本原因就是，`emoji`的utf-8编码是4个字节，而mysql的`utf8`最大只支持3个字节\n\n而为什么只支持3个字节，这种估计就是历史原因了，没有去深究\n\n所以在`mysql 5.3.3`版本开始，`mysql`加入了`utf8mb4`，其实就是`maximum 4 bytes`，最大支持4个字节的`utf8`编码，这样就算可以支持所有`utf-8`编码的字符集了\n\n**mysql官网说明**：https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html\n\n---\n\n\n补充说明：（只是用于了解，可以略过）\n\n虽然utf-8最大可以使用6个字节来表示`unicode`字符集，但是：\n\n> UTF-8使用一至六个字节为每个字符编码（尽管如此，2003年11月UTF-8被RFC 3629重新规范，只能使用原来Unicode定义的区域，U+0000到U+10FFFF，也就是说最多四个字节）\n\n> 说明：需要5个字节和6个字节UTF-8编码的unicode编码范围，属于UCS-4 编码\n早期的规范UTF-8可以到达6字节序列，可以覆盖到31位元（通用字符集原来的极限）。尽管如此，2003年11月UTF-8 被 RFC 3629 重新规范，只能使用原来Unicode定义的区域， U+0000到U+10FFFF。根据规范，这些字节值将无法出现在合法 UTF-8序列中\n\n上面引用自`wiki`和`百度百科`，总结就是，03年出的规范，utf-8最多使用4个字节来编码，大于4个字节编码的那些字符，使用utf-4(utf-32)去编\n\n# trick\n\n通过mysql识别和还原乱码\n\n```\nmysql [localhost] {msandbox} > select hex(convert('寰堝睂' using gbk));\n+-------------------------------------+\n| hex(convert('寰堝睂' using gbk))    |\n+-------------------------------------+\n| E5BE88E5B18C                        |\n+-------------------------------------+\n1 row in set (0.01 sec)\n\n\nmysql [localhost] {msandbox} ((none)) > select convert(0xE5BE88E5B18C using utf8);\n+------------------------------------+\n| convert(0xE5BE88E5B18C using utf8) |\n+------------------------------------+\n| 很屌                               |\n+------------------------------------+\n1 row in set (0.00 sec)\n```\n\n---- \n\n参考文章：\n\n> http://cenalulu.github.io/linux/character-encoding/\n> http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\n> https://www.zhihu.com/question/23374078\n","slug":"what-is-the-difference-between-unicode-utf-8-gbk-gb2312","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfm00290a6tf88ui5zu","content":"<blockquote>\n<p>从我们第一天写程序开始，就注定会碰到一个坑，编码问题。我相信不管是天生的大神，还是蹒跚前行的菜鸟，都有过在半夜上百度，上google，搜索“xxxx为什么显示乱码？”的经历，当时真的不理解什么是编码，为什么计算机需要编码，为什么会产生乱码，那时候只知道按照网上某个大神的知道，在哪里加一个endoding的声明，然后就好了，具体为什么，当时没有深究，也没有能力去深究，说实话。现在多年多去，回过头来看编码，就更容易理解的多了。把自己的理解记录下来，希望能作为一个十分钟的介绍教程，让人可以很快理解编码的门道。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"什么是编码\"><a href=\"#什么是编码\" class=\"headerlink\" title=\"什么是编码\"></a>什么是编码</h1><p>计算机底层只有0,1这两种数据，也就是二进制，说白了就是逻辑电路，接通和断开，两种状态，表现0,1两种状态。那我们现实中这么多丰富的表现，要如何构建在这个简单的01之上呢，像英文26个字母，a-z，计算机如何去定义a-z这些字母呢？假设我们来设计计算机，我们怎么来表示呢？可能我最先想到的就是，<code>0表示a,1表示b,10表示c,11表示d,注意这里是二进制</code>，其实换成十进制也是一样，0表示a，1表示b，2表示c，3表示d，以此类推，就搞定了。</p>\n<h1 id=\"为什么需要编码\"><a href=\"#为什么需要编码\" class=\"headerlink\" title=\"为什么需要编码\"></a>为什么需要编码</h1><p>但是世界上这么多国家，这么多种类的语言，使用这么简单的0,1,2来表示，肯定是行不通的，需要一套科学的表现方式，也是就是我们说的字符编码了。由一个标准组织来制定，然后大家都准守，那么就可以解决字符在计算机上的表现问题啦。</p>\n<h1 id=\"为什么会出现乱码\"><a href=\"#为什么会出现乱码\" class=\"headerlink\" title=\"为什么会出现乱码\"></a>为什么会出现乱码</h1><p>乱码为什么会出现，这么来说，中国一开始搞了一套编码，0代表中，1代表国，但是美国也搞了一套编码，0代表a，1代表b，这样，我们传输了这两个中国字符给美国朋友的时候，他们的计算机看到0,1，那对应的就是a,b啊。相同的数字，在不同的编码中代表的含义不同，用错误的方式打开了原有的编码，就产生了乱码。当然，有时候乱码不是中国显示成a,b这么简单，可能会变成一个没法理解的字符。</p>\n<h1 id=\"实际使用中用什么编码\"><a href=\"#实际使用中用什么编码\" class=\"headerlink\" title=\"实际使用中用什么编码\"></a>实际使用中用什么编码</h1><p>这样一个国家搞一套，大家各自占山为王，都没法正常沟通了，不能愉快的玩耍了。这时候肯定就有组织站出来说了，我们搞一套世界都通用的编码吧，那大家就方便了，不会老乱码了。这时候，unicode字符集出现了。unicode字符集，就相当于包括了世界上现有的所有语言，所以只要我们输入的时候，根据这里面的字符进行编码，那别人使用unicode解码的时候看到的也就是你想要表达的字符的意思了。</p>\n<p>好了，有了unicode，Unicode是一套规则，也是标准。但是就像计算机行业的很多标准一样，标准就像接口，他不管你的实现方式，他也没有规定实现方式。对于Unicode字符，在标准里面，使用2个字节，或者4个字节来编码字符，但是这样就会造成有些字符明明可以一个字节搞定，但是在前面补了一个字节的0，这样非常浪费存储空间，因为白白占用了8个0的空间。这时候出现了<code>UTF-8</code>编码，简单理解，<code>UTF-8</code>实现了Unicode标准，并且实现方式非常节省空间，使用变长的方式。也就是说如果字符只需要一个字节，那就使用一个字节，不在前面强制补0。但是变长之后，一片文章里面，1个字节的也有，2个也有，3个也有，解析的时候怎么知道到底现在是1字节的字符，还是2字节的字符呢？<code>UTF-8</code>给出了一个聪明的实现，定了一个规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，也是一种前缀码。</span><br><span class=\"line\"></span><br><span class=\"line\">最小编码单位（code unit）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。</span><br><span class=\"line\">2. 如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头</span><br><span class=\"line\">3. 如果一个字节以1110开头，那么代表当前字符为三字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头</span><br><span class=\"line\">4. 如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。</span><br></pre></td></tr></table></figure>\n<p>就像<code>TCP包协议</code>一样，<code>UTF-8</code>也搞了类似包头含义的东西，来标明是几字节的字符。</p>\n<p>有了这样的规则，这样的编码，基本就解决了统一编码的问题。</p>\n<h1 id=\"Mysql中的编码问题\"><a href=\"#Mysql中的编码问题\" class=\"headerlink\" title=\"Mysql中的编码问题\"></a>Mysql中的编码问题</h1><p>在早几年的时候，mysql就指定<code>utf8</code>就行了，啥问题都没有。但是后来出现了<code>emoji</code>表情，越来越多的移动设备开始支持<code>emoji</code>表情，我们开始发现存储<code>emoji</code>表情的时候mysql开始报错</p>\n<p><code>ERROR 1366: Incorrect string value: &#39;\\xF0\\x9D\\x8C\\x86&#39; for column</code></p>\n<p>其实根本原因就是，<code>emoji</code>的utf-8编码是4个字节，而mysql的<code>utf8</code>最大只支持3个字节</p>\n<p>而为什么只支持3个字节，这种估计就是历史原因了，没有去深究</p>\n<p>所以在<code>mysql 5.3.3</code>版本开始，<code>mysql</code>加入了<code>utf8mb4</code>，其实就是<code>maximum 4 bytes</code>，最大支持4个字节的<code>utf8</code>编码，这样就算可以支持所有<code>utf-8</code>编码的字符集了</p>\n<p><strong>mysql官网说明</strong>：<a href=\"https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html</a></p>\n<hr>\n<p>补充说明：（只是用于了解，可以略过）</p>\n<p>虽然utf-8最大可以使用6个字节来表示<code>unicode</code>字符集，但是：</p>\n<blockquote>\n<p>UTF-8使用一至六个字节为每个字符编码（尽管如此，2003年11月UTF-8被RFC 3629重新规范，只能使用原来Unicode定义的区域，U+0000到U+10FFFF，也就是说最多四个字节）</p>\n</blockquote>\n<blockquote>\n<p>说明：需要5个字节和6个字节UTF-8编码的unicode编码范围，属于UCS-4 编码<br>早期的规范UTF-8可以到达6字节序列，可以覆盖到31位元（通用字符集原来的极限）。尽管如此，2003年11月UTF-8 被 RFC 3629 重新规范，只能使用原来Unicode定义的区域， U+0000到U+10FFFF。根据规范，这些字节值将无法出现在合法 UTF-8序列中</p>\n</blockquote>\n<p>上面引用自<code>wiki</code>和<code>百度百科</code>，总结就是，03年出的规范，utf-8最多使用4个字节来编码，大于4个字节编码的那些字符，使用utf-4(utf-32)去编</p>\n<h1 id=\"trick\"><a href=\"#trick\" class=\"headerlink\" title=\"trick\"></a>trick</h1><p>通过mysql识别和还原乱码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql [localhost] &#123;msandbox&#125; &gt; select hex(convert(&apos;寰堝睂&apos; using gbk));</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">| hex(convert(&apos;寰堝睂&apos; using gbk))    |</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">| E5BE88E5B18C                        |</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">1 row in set (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql [localhost] &#123;msandbox&#125; ((none)) &gt; select convert(0xE5BE88E5B18C using utf8);</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">| convert(0xE5BE88E5B18C using utf8) |</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">| 很屌                               |</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考文章：</p>\n<blockquote>\n<p><a href=\"http://cenalulu.github.io/linux/character-encoding/\" target=\"_blank\" rel=\"noopener\">http://cenalulu.github.io/linux/character-encoding/</a><br><a href=\"http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a><br><a href=\"https://www.zhihu.com/question/23374078\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/23374078</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>从我们第一天写程序开始，就注定会碰到一个坑，编码问题。我相信不管是天生的大神，还是蹒跚前行的菜鸟，都有过在半夜上百度，上google，搜索“xxxx为什么显示乱码？”的经历，当时真的不理解什么是编码，为什么计算机需要编码，为什么会产生乱码，那时候只知道按照网上某个大神的知道，在哪里加一个endoding的声明，然后就好了，具体为什么，当时没有深究，也没有能力去深究，说实话。现在多年多去，回过头来看编码，就更容易理解的多了。把自己的理解记录下来，希望能作为一个十分钟的介绍教程，让人可以很快理解编码的门道。</p>\n</blockquote>","more":"<h1 id=\"什么是编码\"><a href=\"#什么是编码\" class=\"headerlink\" title=\"什么是编码\"></a>什么是编码</h1><p>计算机底层只有0,1这两种数据，也就是二进制，说白了就是逻辑电路，接通和断开，两种状态，表现0,1两种状态。那我们现实中这么多丰富的表现，要如何构建在这个简单的01之上呢，像英文26个字母，a-z，计算机如何去定义a-z这些字母呢？假设我们来设计计算机，我们怎么来表示呢？可能我最先想到的就是，<code>0表示a,1表示b,10表示c,11表示d,注意这里是二进制</code>，其实换成十进制也是一样，0表示a，1表示b，2表示c，3表示d，以此类推，就搞定了。</p>\n<h1 id=\"为什么需要编码\"><a href=\"#为什么需要编码\" class=\"headerlink\" title=\"为什么需要编码\"></a>为什么需要编码</h1><p>但是世界上这么多国家，这么多种类的语言，使用这么简单的0,1,2来表示，肯定是行不通的，需要一套科学的表现方式，也是就是我们说的字符编码了。由一个标准组织来制定，然后大家都准守，那么就可以解决字符在计算机上的表现问题啦。</p>\n<h1 id=\"为什么会出现乱码\"><a href=\"#为什么会出现乱码\" class=\"headerlink\" title=\"为什么会出现乱码\"></a>为什么会出现乱码</h1><p>乱码为什么会出现，这么来说，中国一开始搞了一套编码，0代表中，1代表国，但是美国也搞了一套编码，0代表a，1代表b，这样，我们传输了这两个中国字符给美国朋友的时候，他们的计算机看到0,1，那对应的就是a,b啊。相同的数字，在不同的编码中代表的含义不同，用错误的方式打开了原有的编码，就产生了乱码。当然，有时候乱码不是中国显示成a,b这么简单，可能会变成一个没法理解的字符。</p>\n<h1 id=\"实际使用中用什么编码\"><a href=\"#实际使用中用什么编码\" class=\"headerlink\" title=\"实际使用中用什么编码\"></a>实际使用中用什么编码</h1><p>这样一个国家搞一套，大家各自占山为王，都没法正常沟通了，不能愉快的玩耍了。这时候肯定就有组织站出来说了，我们搞一套世界都通用的编码吧，那大家就方便了，不会老乱码了。这时候，unicode字符集出现了。unicode字符集，就相当于包括了世界上现有的所有语言，所以只要我们输入的时候，根据这里面的字符进行编码，那别人使用unicode解码的时候看到的也就是你想要表达的字符的意思了。</p>\n<p>好了，有了unicode，Unicode是一套规则，也是标准。但是就像计算机行业的很多标准一样，标准就像接口，他不管你的实现方式，他也没有规定实现方式。对于Unicode字符，在标准里面，使用2个字节，或者4个字节来编码字符，但是这样就会造成有些字符明明可以一个字节搞定，但是在前面补了一个字节的0，这样非常浪费存储空间，因为白白占用了8个0的空间。这时候出现了<code>UTF-8</code>编码，简单理解，<code>UTF-8</code>实现了Unicode标准，并且实现方式非常节省空间，使用变长的方式。也就是说如果字符只需要一个字节，那就使用一个字节，不在前面强制补0。但是变长之后，一片文章里面，1个字节的也有，2个也有，3个也有，解析的时候怎么知道到底现在是1字节的字符，还是2字节的字符呢？<code>UTF-8</code>给出了一个聪明的实现，定了一个规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode的可变长度字符编码，也是一种前缀码。</span><br><span class=\"line\"></span><br><span class=\"line\">最小编码单位（code unit）为一个字节。一个字节的前1-3个bit为描述性部分，后面为实际序号部分。</span><br><span class=\"line\"></span><br><span class=\"line\">1. 如果一个字节的第一位为0，那么代表当前字符为单字节字符，占用一个字节的空间。0之后的所有部分（7个bit）代表在Unicode中的序号。</span><br><span class=\"line\">2. 如果一个字节以110开头，那么代表当前字符为双字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后一个字节的除10外的部分（6个bit）代表在Unicode中的序号。且第二个字节以10开头</span><br><span class=\"line\">3. 如果一个字节以1110开头，那么代表当前字符为三字节字符，占用2个字节的空间。110之后的所有部分（5个bit）加上后两个字节的除10外的部分（12个bit）代表在Unicode中的序号。且第二、第三个字节以10开头</span><br><span class=\"line\">4. 如果一个字节以10开头，那么代表当前字节为多字节字符的第二个字节。10之后的所有部分（6个bit）和之前的部分一同组成在Unicode中的序号。</span><br></pre></td></tr></table></figure>\n<p>就像<code>TCP包协议</code>一样，<code>UTF-8</code>也搞了类似包头含义的东西，来标明是几字节的字符。</p>\n<p>有了这样的规则，这样的编码，基本就解决了统一编码的问题。</p>\n<h1 id=\"Mysql中的编码问题\"><a href=\"#Mysql中的编码问题\" class=\"headerlink\" title=\"Mysql中的编码问题\"></a>Mysql中的编码问题</h1><p>在早几年的时候，mysql就指定<code>utf8</code>就行了，啥问题都没有。但是后来出现了<code>emoji</code>表情，越来越多的移动设备开始支持<code>emoji</code>表情，我们开始发现存储<code>emoji</code>表情的时候mysql开始报错</p>\n<p><code>ERROR 1366: Incorrect string value: &#39;\\xF0\\x9D\\x8C\\x86&#39; for column</code></p>\n<p>其实根本原因就是，<code>emoji</code>的utf-8编码是4个字节，而mysql的<code>utf8</code>最大只支持3个字节</p>\n<p>而为什么只支持3个字节，这种估计就是历史原因了，没有去深究</p>\n<p>所以在<code>mysql 5.3.3</code>版本开始，<code>mysql</code>加入了<code>utf8mb4</code>，其实就是<code>maximum 4 bytes</code>，最大支持4个字节的<code>utf8</code>编码，这样就算可以支持所有<code>utf-8</code>编码的字符集了</p>\n<p><strong>mysql官网说明</strong>：<a href=\"https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html\" target=\"_blank\" rel=\"noopener\">https://dev.mysql.com/doc/refman/5.5/en/charset-unicode-utf8mb4.html</a></p>\n<hr>\n<p>补充说明：（只是用于了解，可以略过）</p>\n<p>虽然utf-8最大可以使用6个字节来表示<code>unicode</code>字符集，但是：</p>\n<blockquote>\n<p>UTF-8使用一至六个字节为每个字符编码（尽管如此，2003年11月UTF-8被RFC 3629重新规范，只能使用原来Unicode定义的区域，U+0000到U+10FFFF，也就是说最多四个字节）</p>\n</blockquote>\n<blockquote>\n<p>说明：需要5个字节和6个字节UTF-8编码的unicode编码范围，属于UCS-4 编码<br>早期的规范UTF-8可以到达6字节序列，可以覆盖到31位元（通用字符集原来的极限）。尽管如此，2003年11月UTF-8 被 RFC 3629 重新规范，只能使用原来Unicode定义的区域， U+0000到U+10FFFF。根据规范，这些字节值将无法出现在合法 UTF-8序列中</p>\n</blockquote>\n<p>上面引用自<code>wiki</code>和<code>百度百科</code>，总结就是，03年出的规范，utf-8最多使用4个字节来编码，大于4个字节编码的那些字符，使用utf-4(utf-32)去编</p>\n<h1 id=\"trick\"><a href=\"#trick\" class=\"headerlink\" title=\"trick\"></a>trick</h1><p>通过mysql识别和还原乱码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql [localhost] &#123;msandbox&#125; &gt; select hex(convert(&apos;寰堝睂&apos; using gbk));</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">| hex(convert(&apos;寰堝睂&apos; using gbk))    |</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">| E5BE88E5B18C                        |</span><br><span class=\"line\">+-------------------------------------+</span><br><span class=\"line\">1 row in set (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">mysql [localhost] &#123;msandbox&#125; ((none)) &gt; select convert(0xE5BE88E5B18C using utf8);</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">| convert(0xE5BE88E5B18C using utf8) |</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">| 很屌                               |</span><br><span class=\"line\">+------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考文章：</p>\n<blockquote>\n<p><a href=\"http://cenalulu.github.io/linux/character-encoding/\" target=\"_blank\" rel=\"noopener\">http://cenalulu.github.io/linux/character-encoding/</a><br><a href=\"http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a><br><a href=\"https://www.zhihu.com/question/23374078\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/23374078</a></p>\n</blockquote>"},{"title":"解决wordpress默认头像无法显示问题","date":"2016-04-02T13:16:09.000Z","_content":"\nWordrpress默认去Gravatar获取头像信息，然后由于Great Wall的存在，国内的用户都获取不到头像，导致网站每个管理后台的页面都要去获取头像，然后这个请求只能超时，很不爽！\n\n看了网上几种办法，最方便的就是按照个 WP User Avatar插件 解决。\n\n直接在插件按照中搜索。搜索到了直接安w装。\n\n![WP User Avatar](/images/解决wordpress默认头像无法显示问题/1.png)","source":"_posts/解决wordpress默认头像无法显示问题.md","raw":"---\ntitle: 解决wordpress默认头像无法显示问题\ndate: 2016-04-02 21:16:09\ntags: wordpress\ncategory:\n- 博客\n---\n\nWordrpress默认去Gravatar获取头像信息，然后由于Great Wall的存在，国内的用户都获取不到头像，导致网站每个管理后台的页面都要去获取头像，然后这个请求只能超时，很不爽！\n\n看了网上几种办法，最方便的就是按照个 WP User Avatar插件 解决。\n\n直接在插件按照中搜索。搜索到了直接安w装。\n\n![WP User Avatar](/images/解决wordpress默认头像无法显示问题/1.png)","slug":"解决wordpress默认头像无法显示问题","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfn002d0a6tufi8lcs0","content":"<p>Wordrpress默认去Gravatar获取头像信息，然后由于Great Wall的存在，国内的用户都获取不到头像，导致网站每个管理后台的页面都要去获取头像，然后这个请求只能超时，很不爽！</p>\n<p>看了网上几种办法，最方便的就是按照个 WP User Avatar插件 解决。</p>\n<p>直接在插件按照中搜索。搜索到了直接安w装。</p>\n<p><img src=\"/images/解决wordpress默认头像无法显示问题/1.png\" alt=\"WP User Avatar\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Wordrpress默认去Gravatar获取头像信息，然后由于Great Wall的存在，国内的用户都获取不到头像，导致网站每个管理后台的页面都要去获取头像，然后这个请求只能超时，很不爽！</p>\n<p>看了网上几种办法，最方便的就是按照个 WP User Avatar插件 解决。</p>\n<p>直接在插件按照中搜索。搜索到了直接安w装。</p>\n<p><img src=\"/images/解决wordpress默认头像无法显示问题/1.png\" alt=\"WP User Avatar\"></p>\n"},{"title":"如何正确的kill一个java程序","date":"2016-07-24T14:45:22.000Z","_content":"以前代码部署在线上的linux环境，每次都是直接kill -9 pid停止程序的进程。因为我们是使用的jetty 嵌入式模式，直接通过java程序启动的，又没有写相应的相应停止的代码，看了公司以前的用来启动和停止shell脚本的代码，也是直接在使用kill -9 pid这种方式。\n<!--more-->\n\n不过这两天正好碰到一个服务有个问题，是kafka相关的。消费kafka的设备上报日志，转存到elasticSearch以提供各种需要查用户相关设备的查询服务。我在调试时需要切换日志级别，查看更详细的打印信息，这时候就不得不做重启服务的操作。\n\n如果熟悉kafka的同学应该知道，kafka的offset信息都是存在zookeeper集群里的，这时候，如果我粗暴的使用kill -9 pid这种方式停止程序，并重启的话，那我很可能要丢失一段时间offset信息，因为这时候，程序还没把offset写到zokeeper就已经被粗暴终止了。这时候当我重新启动时，程序就会从zookeeper读取一个最近的offset信息，并从这里开始消费日志信息。这样如果这时候这段时间，日志的量很大的话，就又重复做了这段时间的写入，完全是在浪费。\n\n去翻官方的kafka文档，里面是有关于graceful的关闭kafka消费程序的。但是这时候我需要让程序知道，我在关闭时，它要去调kafka的关闭方法，做一些善后工作。\n\n查了一些资料发现\n\n1. kill -15 pid\n使用15这个信号去关闭程序，并且在java程序中注册shutdownhook的调用，当程序接收到这个信号时，会调用回调的钩子，处理完善后，再进行退出。这样就比较合理了。所以有时候粗暴确实不太靠谱。\n\n\n```java\npublic class TestStop{\nprivate static final void shutdownCallback() {\nSystem.out.println(\"Shutdown callback is invoked.\");\n}\npublic static void main(String[] args) throws Exception {\nRuntime.getRuntime().addShutdownHook(new Thread() {\n@Override\npublic void run() {\nshutdownCallback();\n}\n});\nThread.sleep(60 * 1000 * 60 * 60);\n}\n}\n```\n\n如果想做实验的话，可以直接使用上面这个小例子。\n\n这种方式对于spring里面的\n\ncontext.registerShutdownHook();\n方法也同样有效。spring容器会去执行lifecycle的doClose()方法，最后所有组件的重写的destroy()以及注解@destory的方法都会被执行。","source":"_posts/如何正确的kill一个java程序.md","raw":"---\ntitle: 如何正确的kill一个java程序\ndate: 2016-07-24 22:45:22\ntags:\n- Java\n- linux\ncategory:\n- Java\n---\n以前代码部署在线上的linux环境，每次都是直接kill -9 pid停止程序的进程。因为我们是使用的jetty 嵌入式模式，直接通过java程序启动的，又没有写相应的相应停止的代码，看了公司以前的用来启动和停止shell脚本的代码，也是直接在使用kill -9 pid这种方式。\n<!--more-->\n\n不过这两天正好碰到一个服务有个问题，是kafka相关的。消费kafka的设备上报日志，转存到elasticSearch以提供各种需要查用户相关设备的查询服务。我在调试时需要切换日志级别，查看更详细的打印信息，这时候就不得不做重启服务的操作。\n\n如果熟悉kafka的同学应该知道，kafka的offset信息都是存在zookeeper集群里的，这时候，如果我粗暴的使用kill -9 pid这种方式停止程序，并重启的话，那我很可能要丢失一段时间offset信息，因为这时候，程序还没把offset写到zokeeper就已经被粗暴终止了。这时候当我重新启动时，程序就会从zookeeper读取一个最近的offset信息，并从这里开始消费日志信息。这样如果这时候这段时间，日志的量很大的话，就又重复做了这段时间的写入，完全是在浪费。\n\n去翻官方的kafka文档，里面是有关于graceful的关闭kafka消费程序的。但是这时候我需要让程序知道，我在关闭时，它要去调kafka的关闭方法，做一些善后工作。\n\n查了一些资料发现\n\n1. kill -15 pid\n使用15这个信号去关闭程序，并且在java程序中注册shutdownhook的调用，当程序接收到这个信号时，会调用回调的钩子，处理完善后，再进行退出。这样就比较合理了。所以有时候粗暴确实不太靠谱。\n\n\n```java\npublic class TestStop{\nprivate static final void shutdownCallback() {\nSystem.out.println(\"Shutdown callback is invoked.\");\n}\npublic static void main(String[] args) throws Exception {\nRuntime.getRuntime().addShutdownHook(new Thread() {\n@Override\npublic void run() {\nshutdownCallback();\n}\n});\nThread.sleep(60 * 1000 * 60 * 60);\n}\n}\n```\n\n如果想做实验的话，可以直接使用上面这个小例子。\n\n这种方式对于spring里面的\n\ncontext.registerShutdownHook();\n方法也同样有效。spring容器会去执行lifecycle的doClose()方法，最后所有组件的重写的destroy()以及注解@destory的方法都会被执行。","slug":"如何正确的kill一个java程序","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfo002f0a6tdogr8eh2","content":"<p>以前代码部署在线上的linux环境，每次都是直接kill -9 pid停止程序的进程。因为我们是使用的jetty 嵌入式模式，直接通过java程序启动的，又没有写相应的相应停止的代码，看了公司以前的用来启动和停止shell脚本的代码，也是直接在使用kill -9 pid这种方式。<br><a id=\"more\"></a></p>\n<p>不过这两天正好碰到一个服务有个问题，是kafka相关的。消费kafka的设备上报日志，转存到elasticSearch以提供各种需要查用户相关设备的查询服务。我在调试时需要切换日志级别，查看更详细的打印信息，这时候就不得不做重启服务的操作。</p>\n<p>如果熟悉kafka的同学应该知道，kafka的offset信息都是存在zookeeper集群里的，这时候，如果我粗暴的使用kill -9 pid这种方式停止程序，并重启的话，那我很可能要丢失一段时间offset信息，因为这时候，程序还没把offset写到zokeeper就已经被粗暴终止了。这时候当我重新启动时，程序就会从zookeeper读取一个最近的offset信息，并从这里开始消费日志信息。这样如果这时候这段时间，日志的量很大的话，就又重复做了这段时间的写入，完全是在浪费。</p>\n<p>去翻官方的kafka文档，里面是有关于graceful的关闭kafka消费程序的。但是这时候我需要让程序知道，我在关闭时，它要去调kafka的关闭方法，做一些善后工作。</p>\n<p>查了一些资料发现</p>\n<ol>\n<li>kill -15 pid<br>使用15这个信号去关闭程序，并且在java程序中注册shutdownhook的调用，当程序接收到这个信号时，会调用回调的钩子，处理完善后，再进行退出。这样就比较合理了。所以有时候粗暴确实不太靠谱。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStop</span></span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdownCallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"Shutdown callback is invoked.\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">Runtime.getRuntime().addShutdownHook(<span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">shutdownCallback();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Thread.sleep(<span class=\"number\">60</span> * <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想做实验的话，可以直接使用上面这个小例子。</p>\n<p>这种方式对于spring里面的</p>\n<p>context.registerShutdownHook();<br>方法也同样有效。spring容器会去执行lifecycle的doClose()方法，最后所有组件的重写的destroy()以及注解@destory的方法都会被执行。</p>\n","site":{"data":{}},"excerpt":"<p>以前代码部署在线上的linux环境，每次都是直接kill -9 pid停止程序的进程。因为我们是使用的jetty 嵌入式模式，直接通过java程序启动的，又没有写相应的相应停止的代码，看了公司以前的用来启动和停止shell脚本的代码，也是直接在使用kill -9 pid这种方式。<br>","more":"</p>\n<p>不过这两天正好碰到一个服务有个问题，是kafka相关的。消费kafka的设备上报日志，转存到elasticSearch以提供各种需要查用户相关设备的查询服务。我在调试时需要切换日志级别，查看更详细的打印信息，这时候就不得不做重启服务的操作。</p>\n<p>如果熟悉kafka的同学应该知道，kafka的offset信息都是存在zookeeper集群里的，这时候，如果我粗暴的使用kill -9 pid这种方式停止程序，并重启的话，那我很可能要丢失一段时间offset信息，因为这时候，程序还没把offset写到zokeeper就已经被粗暴终止了。这时候当我重新启动时，程序就会从zookeeper读取一个最近的offset信息，并从这里开始消费日志信息。这样如果这时候这段时间，日志的量很大的话，就又重复做了这段时间的写入，完全是在浪费。</p>\n<p>去翻官方的kafka文档，里面是有关于graceful的关闭kafka消费程序的。但是这时候我需要让程序知道，我在关闭时，它要去调kafka的关闭方法，做一些善后工作。</p>\n<p>查了一些资料发现</p>\n<ol>\n<li>kill -15 pid<br>使用15这个信号去关闭程序，并且在java程序中注册shutdownhook的调用，当程序接收到这个信号时，会调用回调的钩子，处理完善后，再进行退出。这样就比较合理了。所以有时候粗暴确实不太靠谱。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStop</span></span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdownCallback</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"Shutdown callback is invoked.\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">Runtime.getRuntime().addShutdownHook(<span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">shutdownCallback();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Thread.sleep(<span class=\"number\">60</span> * <span class=\"number\">1000</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想做实验的话，可以直接使用上面这个小例子。</p>\n<p>这种方式对于spring里面的</p>\n<p>context.registerShutdownHook();<br>方法也同样有效。spring容器会去执行lifecycle的doClose()方法，最后所有组件的重写的destroy()以及注解@destory的方法都会被执行。</p>"},{"title":"进入四月","date":"2016-04-05T13:32:21.000Z","_content":"\n![京都樱花](/images/进入四月/1.jpg)\n\n马上进入四月。\n\n4月已经过去5天。清明假期好像又被自己浪费，啥也没做。一到假期就懒散，没法集中精力的毛病还是改不掉。真不知道这样下去，明年的目标到底能不能实现。算下来，这也是自己的第二年了。工作的第二年，基本也没啥成就，默默无闻的写着代码，没有任何闪光点，每天做着重复的代码劳动，疲劳又没太多意义。心里憔悴。\n\n \n\n四月，希望有所改变吧。加油吧。少年！","source":"_posts/进入四月.md","raw":"---\ntitle: 进入四月\ndate: 2016-04-05 21:32:21\ntags:\n- 杂文\ncategory:\n- 杂文\n---\n\n![京都樱花](/images/进入四月/1.jpg)\n\n马上进入四月。\n\n4月已经过去5天。清明假期好像又被自己浪费，啥也没做。一到假期就懒散，没法集中精力的毛病还是改不掉。真不知道这样下去，明年的目标到底能不能实现。算下来，这也是自己的第二年了。工作的第二年，基本也没啥成就，默默无闻的写着代码，没有任何闪光点，每天做着重复的代码劳动，疲劳又没太多意义。心里憔悴。\n\n \n\n四月，希望有所改变吧。加油吧。少年！","slug":"进入四月","published":1,"updated":"2018-07-22T03:57:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjwbbgfq002j0a6t937pwav2","content":"<p><img src=\"/images/进入四月/1.jpg\" alt=\"京都樱花\"></p>\n<p>马上进入四月。</p>\n<p>4月已经过去5天。清明假期好像又被自己浪费，啥也没做。一到假期就懒散，没法集中精力的毛病还是改不掉。真不知道这样下去，明年的目标到底能不能实现。算下来，这也是自己的第二年了。工作的第二年，基本也没啥成就，默默无闻的写着代码，没有任何闪光点，每天做着重复的代码劳动，疲劳又没太多意义。心里憔悴。</p>\n<p>四月，希望有所改变吧。加油吧。少年！</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/进入四月/1.jpg\" alt=\"京都樱花\"></p>\n<p>马上进入四月。</p>\n<p>4月已经过去5天。清明假期好像又被自己浪费，啥也没做。一到假期就懒散，没法集中精力的毛病还是改不掉。真不知道这样下去，明年的目标到底能不能实现。算下来，这也是自己的第二年了。工作的第二年，基本也没啥成就，默默无闻的写着代码，没有任何闪光点，每天做着重复的代码劳动，疲劳又没太多意义。心里憔悴。</p>\n<p>四月，希望有所改变吧。加油吧。少年！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjjwbbge500000a6t9w4zt5it","category_id":"cjjwbbgeb00030a6t6l9u0q5o","_id":"cjjwbbgei000c0a6t0gnvowg0"},{"post_id":"cjjwbbge900020a6tyiy2y97z","category_id":"cjjwbbgeg00080a6tfwin8437","_id":"cjjwbbgeo000j0a6tvf71bylo"},{"post_id":"cjjwbbgee00060a6tcy9m0uaa","category_id":"cjjwbbgeg00080a6tfwin8437","_id":"cjjwbbgf3000u0a6tug4viist"},{"post_id":"cjjwbbgey000n0a6t0dxknj0f","category_id":"cjjwbbgej000d0a6t8x5zwsk9","_id":"cjjwbbgf5000y0a6tgy4c7azc"},{"post_id":"cjjwbbgef00070a6tsfce1yux","category_id":"cjjwbbgej000d0a6t8x5zwsk9","_id":"cjjwbbgf600110a6ttpofn6nb"},{"post_id":"cjjwbbgeh000a0a6tqdje7a02","category_id":"cjjwbbgf3000t0a6t7jtbyb3x","_id":"cjjwbbgf800180a6tbfds0h49"},{"post_id":"cjjwbbgei000b0a6te24qa0il","category_id":"cjjwbbgf600130a6tzmbga4aj","_id":"cjjwbbgfb001f0a6tkp8pjqep"},{"post_id":"cjjwbbgej000f0a6t9juy1pfz","category_id":"cjjwbbgf9001b0a6t0rgqrlke","_id":"cjjwbbgfd001k0a6tnzt31rg0"},{"post_id":"cjjwbbgfb001i0a6t9xtt8z8b","category_id":"cjjwbbgej000d0a6t8x5zwsk9","_id":"cjjwbbgff001r0a6tpd17hnqi"},{"post_id":"cjjwbbged00050a6tokveg4h0","category_id":"cjjwbbgej000d0a6t8x5zwsk9","_id":"cjjwbbgfh001w0a6tvpk97o2x"},{"post_id":"cjjwbbged00050a6tokveg4h0","category_id":"cjjwbbgfb001h0a6tywus706e","_id":"cjjwbbgfj001z0a6tigmw1l38"},{"post_id":"cjjwbbgfc001j0a6t4inpiud9","category_id":"cjjwbbgf3000t0a6t7jtbyb3x","_id":"cjjwbbgfk00230a6twmvgh706"},{"post_id":"cjjwbbgfd001o0a6tp02pxbi3","category_id":"cjjwbbgf3000t0a6t7jtbyb3x","_id":"cjjwbbgfl00260a6txxvjscia"},{"post_id":"cjjwbbgel000h0a6tfk9uqvd2","category_id":"cjjwbbgf3000t0a6t7jtbyb3x","_id":"cjjwbbgfn002a0a6t0caawpuf"},{"post_id":"cjjwbbgfe001q0a6togy8g7ft","category_id":"cjjwbbgej000d0a6t8x5zwsk9","_id":"cjjwbbgfo002e0a6t7aw3gqec"},{"post_id":"cjjwbbgeq000m0a6tl5z2upwe","category_id":"cjjwbbgfg001s0a6tg11p43vj","_id":"cjjwbbgfp002g0a6tux49go61"},{"post_id":"cjjwbbgf0000q0a6t7h9sgu38","category_id":"cjjwbbgfg001s0a6tg11p43vj","_id":"cjjwbbgfr002k0a6tkpg1b6dm"},{"post_id":"cjjwbbgfl00250a6tmu89vqzh","category_id":"cjjwbbgf9001b0a6t0rgqrlke","_id":"cjjwbbgfr002l0a6t41g36fqy"},{"post_id":"cjjwbbgfm00290a6tf88ui5zu","category_id":"cjjwbbgej000d0a6t8x5zwsk9","_id":"cjjwbbgfs002p0a6tt0ckrhsa"},{"post_id":"cjjwbbgf1000s0a6tot6ig5u0","category_id":"cjjwbbgej000d0a6t8x5zwsk9","_id":"cjjwbbgfs002q0a6t7yjqppyq"},{"post_id":"cjjwbbgf1000s0a6tot6ig5u0","category_id":"cjjwbbgfm00280a6tqp843myk","_id":"cjjwbbgft002t0a6tgfoe558f"},{"post_id":"cjjwbbgf3000x0a6tsx8rgla6","category_id":"cjjwbbgfq002h0a6tt11mbnep","_id":"cjjwbbgft002v0a6tgkax1alj"},{"post_id":"cjjwbbgf500100a6tvx3ftis2","category_id":"cjjwbbgfs002m0a6tykw6x3rj","_id":"cjjwbbgft002z0a6t9kmmd4xx"},{"post_id":"cjjwbbgf600150a6tze7ynb0f","category_id":"cjjwbbgfs002r0a6tb470guoq","_id":"cjjwbbgfu00310a6twctgaiyu"},{"post_id":"cjjwbbgf700170a6trcabd6x7","category_id":"cjjwbbgft002x0a6tj7g9jxbj","_id":"cjjwbbgfu00360a6toiaddar3"},{"post_id":"cjjwbbgf8001a0a6tdku8oed9","category_id":"cjjwbbgfu00320a6tsmblvlvr","_id":"cjjwbbgfv003b0a6totk5dspa"},{"post_id":"cjjwbbgf9001d0a6tr3exjdys","category_id":"cjjwbbgfv00370a6toqdci7tn","_id":"cjjwbbgfx003g0a6t0wjeaxem"},{"post_id":"cjjwbbgfa001e0a6t1uvsp4hx","category_id":"cjjwbbgfv00370a6toqdci7tn","_id":"cjjwbbgfx003k0a6tmxcsye6s"},{"post_id":"cjjwbbgfg001v0a6t04a8wmog","category_id":"cjjwbbgft002x0a6tj7g9jxbj","_id":"cjjwbbgfy003m0a6t3ow71mc8"},{"post_id":"cjjwbbgfi001y0a6tuf2rrmox","category_id":"cjjwbbgfx003j0a6tc60qpgqc","_id":"cjjwbbgfy003q0a6t3rvy9xwv"},{"post_id":"cjjwbbgfk00220a6ttng6nkb5","category_id":"cjjwbbgfy003n0a6tca2cel19","_id":"cjjwbbgfz003v0a6tqadf3rqd"},{"post_id":"cjjwbbgfn002d0a6tufi8lcs0","category_id":"cjjwbbgfs002m0a6tykw6x3rj","_id":"cjjwbbgg0003y0a6tiu36hwwb"},{"post_id":"cjjwbbgfo002f0a6tdogr8eh2","category_id":"cjjwbbgfz003u0a6tvroji9yv","_id":"cjjwbbgg100430a6tx4ivxc6l"},{"post_id":"cjjwbbgfq002j0a6t937pwav2","category_id":"cjjwbbgg0003z0a6tshsdn8d1","_id":"cjjwbbgg100450a6t8w0c70t1"}],"PostTag":[{"post_id":"cjjwbbge500000a6t9w4zt5it","tag_id":"cjjwbbgec00040a6tkfh9a6io","_id":"cjjwbbgel000g0a6ttnxamtnt"},{"post_id":"cjjwbbge500000a6t9w4zt5it","tag_id":"cjjwbbgeg00090a6tv9txssgg","_id":"cjjwbbgeo000i0a6tqfsrih6z"},{"post_id":"cjjwbbge900020a6tyiy2y97z","tag_id":"cjjwbbgej000e0a6tw971j7vd","_id":"cjjwbbgf1000r0a6togtge2sg"},{"post_id":"cjjwbbge900020a6tyiy2y97z","tag_id":"cjjwbbgeo000l0a6tm5bn3scv","_id":"cjjwbbgf3000v0a6tyd1zmeif"},{"post_id":"cjjwbbged00050a6tokveg4h0","tag_id":"cjjwbbgeo000l0a6tm5bn3scv","_id":"cjjwbbgf5000z0a6txcq2i0o1"},{"post_id":"cjjwbbgf1000s0a6tot6ig5u0","tag_id":"cjjwbbgeo000l0a6tm5bn3scv","_id":"cjjwbbgf600120a6tez17hht0"},{"post_id":"cjjwbbgee00060a6tcy9m0uaa","tag_id":"cjjwbbgej000e0a6tw971j7vd","_id":"cjjwbbgf700160a6tn234ibgb"},{"post_id":"cjjwbbgef00070a6tsfce1yux","tag_id":"cjjwbbgeo000l0a6tm5bn3scv","_id":"cjjwbbgf9001c0a6tfrqot2wa"},{"post_id":"cjjwbbgfb001i0a6t9xtt8z8b","tag_id":"cjjwbbgeo000l0a6tm5bn3scv","_id":"cjjwbbgfd001n0a6tln3nvwok"},{"post_id":"cjjwbbgeh000a0a6tqdje7a02","tag_id":"cjjwbbgf800190a6t6pxrci3d","_id":"cjjwbbgfe001p0a6tr4q3yeuq"},{"post_id":"cjjwbbgeh000a0a6tqdje7a02","tag_id":"cjjwbbgfb001g0a6tti2k6wa2","_id":"cjjwbbgfg001u0a6tcg7sidp4"},{"post_id":"cjjwbbgfc001j0a6t4inpiud9","tag_id":"cjjwbbgfb001g0a6tti2k6wa2","_id":"cjjwbbgfi001x0a6t9gdk5c0r"},{"post_id":"cjjwbbgei000b0a6te24qa0il","tag_id":"cjjwbbgfd001l0a6tcq3o2nfr","_id":"cjjwbbgfl00240a6th7uyfekp"},{"post_id":"cjjwbbgei000b0a6te24qa0il","tag_id":"cjjwbbgfg001t0a6t0fi639e0","_id":"cjjwbbgfm00270a6tdr7luid1"},{"post_id":"cjjwbbgej000f0a6t9juy1pfz","tag_id":"cjjwbbgfj00210a6tljq90hqc","_id":"cjjwbbgfn002c0a6tq6mmsfc5"},{"post_id":"cjjwbbgfq002j0a6t937pwav2","tag_id":"cjjwbbgec00040a6tkfh9a6io","_id":"cjjwbbgfs002o0a6tpfeg47et"},{"post_id":"cjjwbbgel000h0a6tfk9uqvd2","tag_id":"cjjwbbgfb001g0a6tti2k6wa2","_id":"cjjwbbgft002u0a6tq5xnzm1x"},{"post_id":"cjjwbbgel000h0a6tfk9uqvd2","tag_id":"cjjwbbgfq002i0a6tb5fe7whd","_id":"cjjwbbgft002w0a6tn8i4ufec"},{"post_id":"cjjwbbgel000h0a6tfk9uqvd2","tag_id":"cjjwbbgfs002n0a6tiw9h60mw","_id":"cjjwbbgfu00300a6tc3mfqgxo"},{"post_id":"cjjwbbgeq000m0a6tl5z2upwe","tag_id":"cjjwbbgfs002s0a6tnrm3qd32","_id":"cjjwbbgfu00340a6te9fvvz09"},{"post_id":"cjjwbbgeq000m0a6tl5z2upwe","tag_id":"cjjwbbgft002y0a6tgy0u71m4","_id":"cjjwbbgfu00350a6ty68293xo"},{"post_id":"cjjwbbgey000n0a6t0dxknj0f","tag_id":"cjjwbbgfu00330a6t1gmxl9es","_id":"cjjwbbgfv00390a6thvc9vwky"},{"post_id":"cjjwbbgey000n0a6t0dxknj0f","tag_id":"cjjwbbgeo000l0a6tm5bn3scv","_id":"cjjwbbgfv003a0a6t8mdet0iz"},{"post_id":"cjjwbbgf0000q0a6t7h9sgu38","tag_id":"cjjwbbgft002y0a6tgy0u71m4","_id":"cjjwbbgfw003e0a6tsgrvbj50"},{"post_id":"cjjwbbgf3000x0a6tsx8rgla6","tag_id":"cjjwbbgfv003c0a6t7vs1vd7p","_id":"cjjwbbgfx003i0a6t4s5ycql8"},{"post_id":"cjjwbbgf500100a6tvx3ftis2","tag_id":"cjjwbbgfx003h0a6tan7sgym4","_id":"cjjwbbgfy003p0a6ttwfl68nl"},{"post_id":"cjjwbbgf500100a6tvx3ftis2","tag_id":"cjjwbbgfy003l0a6taarevnyw","_id":"cjjwbbgfz003r0a6tg44vxw5w"},{"post_id":"cjjwbbgf600150a6tze7ynb0f","tag_id":"cjjwbbgfy003o0a6t5eq3g2re","_id":"cjjwbbgg0003x0a6t8x0imclv"},{"post_id":"cjjwbbgf600150a6tze7ynb0f","tag_id":"cjjwbbgfz003t0a6tt0bimwxc","_id":"cjjwbbgg000400a6tx5kwqffi"},{"post_id":"cjjwbbgf700170a6trcabd6x7","tag_id":"cjjwbbgg0003w0a6tzwf7rpt9","_id":"cjjwbbgg100420a6teow5h92r"},{"post_id":"cjjwbbgf8001a0a6tdku8oed9","tag_id":"cjjwbbgg000410a6tzcoullb8","_id":"cjjwbbgg200470a6t4wyq9kx7"},{"post_id":"cjjwbbgf8001a0a6tdku8oed9","tag_id":"cjjwbbgg100440a6tp4h2106h","_id":"cjjwbbgg300480a6t2lzj8u2c"},{"post_id":"cjjwbbgf9001d0a6tr3exjdys","tag_id":"cjjwbbgfq002i0a6tb5fe7whd","_id":"cjjwbbgg3004a0a6ttuk2o4ip"},{"post_id":"cjjwbbgfa001e0a6t1uvsp4hx","tag_id":"cjjwbbgfb001g0a6tti2k6wa2","_id":"cjjwbbgg4004d0a6tltqlghtj"},{"post_id":"cjjwbbgfa001e0a6t1uvsp4hx","tag_id":"cjjwbbgfq002i0a6tb5fe7whd","_id":"cjjwbbgg4004e0a6tvh3d9rw3"},{"post_id":"cjjwbbgfd001o0a6tp02pxbi3","tag_id":"cjjwbbgfb001g0a6tti2k6wa2","_id":"cjjwbbgg5004g0a6tdwhay1kv"},{"post_id":"cjjwbbgfd001o0a6tp02pxbi3","tag_id":"cjjwbbgg4004c0a6tw6rv4nwt","_id":"cjjwbbgg5004h0a6t0ra29z3z"},{"post_id":"cjjwbbgfe001q0a6togy8g7ft","tag_id":"cjjwbbgeo000l0a6tm5bn3scv","_id":"cjjwbbgg7004k0a6t4icaylo0"},{"post_id":"cjjwbbgfe001q0a6togy8g7ft","tag_id":"cjjwbbgg5004f0a6tb86lrzdr","_id":"cjjwbbgg7004l0a6t3agn2kw0"},{"post_id":"cjjwbbgfe001q0a6togy8g7ft","tag_id":"cjjwbbgg6004i0a6t14coukg5","_id":"cjjwbbgg7004n0a6t1qdt5424"},{"post_id":"cjjwbbgfg001v0a6t04a8wmog","tag_id":"cjjwbbgg0003w0a6tzwf7rpt9","_id":"cjjwbbgg8004o0a6t7rwob21z"},{"post_id":"cjjwbbgfi001y0a6tuf2rrmox","tag_id":"cjjwbbgg7004m0a6tusqz788e","_id":"cjjwbbgg8004q0a6tn8zvpouy"},{"post_id":"cjjwbbgfk00220a6ttng6nkb5","tag_id":"cjjwbbgg8004p0a6teyj26yb5","_id":"cjjwbbgg8004s0a6t37kc383w"},{"post_id":"cjjwbbgfl00250a6tmu89vqzh","tag_id":"cjjwbbgg8004r0a6tife4owaa","_id":"cjjwbbgg9004v0a6tkke2l828"},{"post_id":"cjjwbbgfl00250a6tmu89vqzh","tag_id":"cjjwbbgg8004t0a6t1fcl4r61","_id":"cjjwbbgg9004w0a6tftsl77ok"},{"post_id":"cjjwbbgfm00290a6tf88ui5zu","tag_id":"cjjwbbgeo000l0a6tm5bn3scv","_id":"cjjwbbgg9004y0a6tgnmeho8e"},{"post_id":"cjjwbbgfm00290a6tf88ui5zu","tag_id":"cjjwbbgg9004u0a6tpvwcqbcv","_id":"cjjwbbgg9004z0a6terifhg08"},{"post_id":"cjjwbbgfn002d0a6tufi8lcs0","tag_id":"cjjwbbgg9004x0a6ti8wjux06","_id":"cjjwbbgga00510a6tpgaogryq"},{"post_id":"cjjwbbgfo002f0a6tdogr8eh2","tag_id":"cjjwbbgg900500a6t80anomlz","_id":"cjjwbbggb00520a6tf2cggfy6"},{"post_id":"cjjwbbgfo002f0a6tdogr8eh2","tag_id":"cjjwbbgfb001g0a6tti2k6wa2","_id":"cjjwbbggb00530a6t3lvmswoi"}],"Tag":[{"name":"杂文","_id":"cjjwbbgec00040a6tkfh9a6io"},{"name":"年终总结","_id":"cjjwbbgeg00090a6tv9txssgg"},{"name":"ElasticSearch","_id":"cjjwbbgej000e0a6tw971j7vd"},{"name":"java","_id":"cjjwbbgeo000l0a6tm5bn3scv"},{"name":"Xmanager.Enterprise5","_id":"cjjwbbgf800190a6t6pxrci3d"},{"name":"linux","_id":"cjjwbbgfb001g0a6tti2k6wa2"},{"name":"开发工具","_id":"cjjwbbgfd001l0a6tcq3o2nfr"},{"name":"sublime text3","_id":"cjjwbbgfg001t0a6t0fi639e0"},{"name":"技术杂文","_id":"cjjwbbgfj00210a6tljq90hqc"},{"name":"mysql","_id":"cjjwbbgfq002i0a6tb5fe7whd"},{"name":"centos","_id":"cjjwbbgfs002n0a6tiw9h60mw"},{"name":"vscode","_id":"cjjwbbgfs002s0a6tnrm3qd32"},{"name":"go","_id":"cjjwbbgft002y0a6tgy0u71m4"},{"name":"maven","_id":"cjjwbbgfu00330a6t1gmxl9es"},{"name":"git","_id":"cjjwbbgfv003c0a6t7vs1vd7p"},{"name":"hexo","_id":"cjjwbbgfx003h0a6tan7sgym4"},{"name":"博客","_id":"cjjwbbgfy003l0a6taarevnyw"},{"name":"php","_id":"cjjwbbgfy003o0a6t5eq3g2re"},{"name":"web","_id":"cjjwbbgfz003t0a6tt0bimwxc"},{"name":"算法","_id":"cjjwbbgg0003w0a6tzwf7rpt9"},{"name":"Markdown","_id":"cjjwbbgg000410a6tzcoullb8"},{"name":"好用图床","_id":"cjjwbbgg100440a6tp4h2106h"},{"name":"xmanager","_id":"cjjwbbgg4004c0a6tw6rv4nwt"},{"name":"tesseract","_id":"cjjwbbgg5004f0a6tb86lrzdr"},{"name":"机器学习","_id":"cjjwbbgg6004i0a6t14coukg5"},{"name":"web技术","_id":"cjjwbbgg7004m0a6tusqz788e"},{"name":"前端","_id":"cjjwbbgg8004p0a6teyj26yb5"},{"name":"远程桌面","_id":"cjjwbbgg8004r0a6tife4owaa"},{"name":"windows","_id":"cjjwbbgg8004t0a6t1fcl4r61"},{"name":"编码","_id":"cjjwbbgg9004u0a6tpvwcqbcv"},{"name":"wordpress","_id":"cjjwbbgg9004x0a6ti8wjux06"},{"name":"Java","_id":"cjjwbbgg900500a6t80anomlz"}]}}